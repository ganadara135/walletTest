
test6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006c0  00800100  00008662  000086f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00008662  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000148  008007c0  008007c0  00008db6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00008db6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00008e14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000578  00000000  00000000  00008e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000abd8  00000000  00000000  000093c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000257c  00000000  00000000  00013fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000399c  00000000  00000000  0001651c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000182c  00000000  00000000  00019eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001b72  00000000  00000000  0001b6e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009c23  00000000  00000000  0001d256  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004c8  00000000  00000000  00026e79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	05 c3       	rjmp	.+1546   	; 0x60c <__ctors_end>
       2:	00 00       	nop
       4:	22 c3       	rjmp	.+1604   	; 0x64a <__bad_interrupt>
       6:	00 00       	nop
       8:	20 c3       	rjmp	.+1600   	; 0x64a <__bad_interrupt>
       a:	00 00       	nop
       c:	1e c3       	rjmp	.+1596   	; 0x64a <__bad_interrupt>
       e:	00 00       	nop
      10:	1c c3       	rjmp	.+1592   	; 0x64a <__bad_interrupt>
      12:	00 00       	nop
      14:	1a c3       	rjmp	.+1588   	; 0x64a <__bad_interrupt>
      16:	00 00       	nop
      18:	18 c3       	rjmp	.+1584   	; 0x64a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	16 c3       	rjmp	.+1580   	; 0x64a <__bad_interrupt>
      1e:	00 00       	nop
      20:	14 c3       	rjmp	.+1576   	; 0x64a <__bad_interrupt>
      22:	00 00       	nop
      24:	12 c3       	rjmp	.+1572   	; 0x64a <__bad_interrupt>
      26:	00 00       	nop
      28:	10 c3       	rjmp	.+1568   	; 0x64a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0e c3       	rjmp	.+1564   	; 0x64a <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c c3       	rjmp	.+1560   	; 0x64a <__bad_interrupt>
      32:	00 00       	nop
      34:	0a c3       	rjmp	.+1556   	; 0x64a <__bad_interrupt>
      36:	00 00       	nop
      38:	08 c3       	rjmp	.+1552   	; 0x64a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	06 c3       	rjmp	.+1548   	; 0x64a <__bad_interrupt>
      3e:	00 00       	nop
      40:	04 c3       	rjmp	.+1544   	; 0x64a <__bad_interrupt>
      42:	00 00       	nop
      44:	02 c3       	rjmp	.+1540   	; 0x64a <__bad_interrupt>
      46:	00 00       	nop
      48:	00 c3       	rjmp	.+1536   	; 0x64a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fe c2       	rjmp	.+1532   	; 0x64a <__bad_interrupt>
      4e:	00 00       	nop
      50:	fc c2       	rjmp	.+1528   	; 0x64a <__bad_interrupt>
      52:	00 00       	nop
      54:	fa c2       	rjmp	.+1524   	; 0x64a <__bad_interrupt>
      56:	00 00       	nop
      58:	f8 c2       	rjmp	.+1520   	; 0x64a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f6 c2       	rjmp	.+1516   	; 0x64a <__bad_interrupt>
      5e:	00 00       	nop
      60:	f4 c2       	rjmp	.+1512   	; 0x64a <__bad_interrupt>
      62:	00 00       	nop
      64:	f2 c2       	rjmp	.+1508   	; 0x64a <__bad_interrupt>
      66:	00 00       	nop
      68:	f0 c2       	rjmp	.+1504   	; 0x64a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ee c2       	rjmp	.+1500   	; 0x64a <__bad_interrupt>
      6e:	00 00       	nop
      70:	ec c2       	rjmp	.+1496   	; 0x64a <__bad_interrupt>
      72:	00 00       	nop
      74:	ea c2       	rjmp	.+1492   	; 0x64a <__bad_interrupt>
      76:	00 00       	nop
      78:	e8 c2       	rjmp	.+1488   	; 0x64a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e6 c2       	rjmp	.+1484   	; 0x64a <__bad_interrupt>
      7e:	00 00       	nop
      80:	e4 c2       	rjmp	.+1480   	; 0x64a <__bad_interrupt>
      82:	00 00       	nop
      84:	e2 c2       	rjmp	.+1476   	; 0x64a <__bad_interrupt>
      86:	00 00       	nop
      88:	e0 c2       	rjmp	.+1472   	; 0x64a <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	52 09       	sbc	r21, r2
      8e:	6a d5       	rcall	.+2772   	; 0xb64 <bigCompareVariableSize+0x68>
      90:	30 36       	cpi	r19, 0x60	; 96
      92:	a5 38       	cpi	r26, 0x85	; 133
      94:	bf 40       	sbci	r27, 0x0F	; 15
      96:	a3 9e       	mul	r10, r19
      98:	81 f3       	breq	.-32     	; 0x7a <__SREG__+0x3b>
      9a:	d7 fb       	bst	r29, 7
      9c:	7c e3       	ldi	r23, 0x3C	; 60
      9e:	39 82       	std	Y+1, r3	; 0x01
      a0:	9b 2f       	mov	r25, r27
      a2:	ff 87       	std	Y+15, r31	; 0x0f
      a4:	34 8e       	std	Z+28, r3	; 0x1c
      a6:	43 44       	sbci	r20, 0x43	; 67
      a8:	c4 de       	rcall	.-632    	; 0xfffffe32 <__eeprom_end+0xff7efe32>
      aa:	e9 cb       	rjmp	.-2094   	; 0xfffff87e <__eeprom_end+0xff7ef87e>
      ac:	54 7b       	andi	r21, 0xB4	; 180
      ae:	94 32       	cpi	r25, 0x24	; 36
      b0:	a6 c2       	rjmp	.+1356   	; 0x5fe <k+0xf2>
      b2:	23 3d       	cpi	r18, 0xD3	; 211
      b4:	ee 4c       	sbci	r30, 0xCE	; 206
      b6:	95 0b       	sbc	r25, r21
      b8:	42 fa       	bst	r4, 2
      ba:	c3 4e       	sbci	r28, 0xE3	; 227
      bc:	08 2e       	mov	r0, r24
      be:	a1 66       	ori	r26, 0x61	; 97
      c0:	28 d9       	rcall	.-3504   	; 0xfffff312 <__eeprom_end+0xff7ef312>
      c2:	24 b2       	in	r2, 0x14	; 20
      c4:	76 5b       	subi	r23, 0xB6	; 182
      c6:	a2 49       	sbci	r26, 0x92	; 146
      c8:	6d 8b       	std	Y+21, r22	; 0x15
      ca:	d1 25       	eor	r29, r1
      cc:	72 f8       	bld	r7, 2
      ce:	f6 64       	ori	r31, 0x46	; 70
      d0:	86 68       	ori	r24, 0x86	; 134
      d2:	98 16       	cp	r9, r24
      d4:	d4 a4       	ldd	r13, Z+44	; 0x2c
      d6:	5c cc       	rjmp	.-1864   	; 0xfffff990 <__eeprom_end+0xff7ef990>
      d8:	5d 65       	ori	r21, 0x5D	; 93
      da:	b6 92       	lac	Z, r11
      dc:	6c 70       	andi	r22, 0x0C	; 12
      de:	48 50       	subi	r20, 0x08	; 8
      e0:	fd ed       	ldi	r31, 0xDD	; 221
      e2:	b9 da       	rcall	.-2702   	; 0xfffff656 <__eeprom_end+0xff7ef656>
      e4:	5e 15       	cp	r21, r14
      e6:	46 57       	subi	r20, 0x76	; 118
      e8:	a7 8d       	ldd	r26, Z+31	; 0x1f
      ea:	9d 84       	ldd	r9, Y+13	; 0x0d
      ec:	90 d8       	rcall	.-3808   	; 0xfffff20e <__eeprom_end+0xff7ef20e>
      ee:	ab 00       	.word	0x00ab	; ????
      f0:	8c bc       	out	0x2c, r8	; 44
      f2:	d3 0a       	sbc	r13, r19
      f4:	f7 e4       	ldi	r31, 0x47	; 71
      f6:	58 05       	cpc	r21, r8
      f8:	b8 b3       	in	r27, 0x18	; 24
      fa:	45 06       	cpc	r4, r21
      fc:	d0 2c       	mov	r13, r0
      fe:	1e 8f       	std	Y+30, r17	; 0x1e
     100:	ca 3f       	cpi	r28, 0xFA	; 250
     102:	0f 02       	muls	r16, r31
     104:	c1 af       	std	Z+57, r28	; 0x39
     106:	bd 03       	fmulsu	r19, r21
     108:	01 13       	cpse	r16, r17
     10a:	8a 6b       	ori	r24, 0xBA	; 186
     10c:	3a 91       	ld	r19, -Y
     10e:	11 41       	sbci	r17, 0x11	; 17
     110:	4f 67       	ori	r20, 0x7F	; 127
     112:	dc ea       	ldi	r29, 0xAC	; 172
     114:	97 f2       	brie	.-92     	; 0xba <__trampolines_end+0x2e>
     116:	cf ce       	rjmp	.-610    	; 0xfffffeb6 <__eeprom_end+0xff7efeb6>
     118:	f0 b4       	in	r15, 0x20	; 32
     11a:	e6 73       	andi	r30, 0x36	; 54
     11c:	96 ac       	ldd	r9, Z+62	; 0x3e
     11e:	74 22       	and	r7, r20
     120:	e7 ad       	ldd	r30, Z+63	; 0x3f
     122:	35 85       	ldd	r19, Z+13	; 0x0d
     124:	e2 f9       	bld	r30, 2
     126:	37 e8       	ldi	r19, 0x87	; 135
     128:	1c 75       	andi	r17, 0x5C	; 92
     12a:	df 6e       	ori	r29, 0xEF	; 239
     12c:	47 f1       	brie	.+80     	; 0x17e <__trampolines_end+0xf2>
     12e:	1a 71       	andi	r17, 0x1A	; 26
     130:	1d 29       	or	r17, r13
     132:	c5 89       	ldd	r28, Z+21	; 0x15
     134:	6f b7       	in	r22, 0x3f	; 63
     136:	62 0e       	add	r6, r18
     138:	aa 18       	sub	r10, r10
     13a:	be 1b       	sub	r27, r30
     13c:	fc 56       	subi	r31, 0x6C	; 108
     13e:	3e 4b       	sbci	r19, 0xBE	; 190
     140:	c6 d2       	rcall	.+1420   	; 0x6ce <shiftOrInvShiftRows+0x46>
     142:	79 20       	and	r7, r9
     144:	9a db       	rcall	.-2252   	; 0xfffff87a <__eeprom_end+0xff7ef87a>
     146:	c0 fe       	sbrs	r12, 0
     148:	78 cd       	rjmp	.-1296   	; 0xfffffc3a <__eeprom_end+0xff7efc3a>
     14a:	5a f4       	brpl	.+22     	; 0x162 <__trampolines_end+0xd6>
     14c:	1f dd       	rcall	.-1474   	; 0xfffffb8c <__eeprom_end+0xff7efb8c>
     14e:	a8 33       	cpi	r26, 0x38	; 56
     150:	88 07       	cpc	r24, r24
     152:	c7 31       	cpi	r28, 0x17	; 23
     154:	b1 12       	cpse	r11, r17
     156:	10 59       	subi	r17, 0x90	; 144
     158:	27 80       	ldd	r2, Z+7	; 0x07
     15a:	ec 5f       	subi	r30, 0xFC	; 252
     15c:	60 51       	subi	r22, 0x10	; 16
     15e:	7f a9       	ldd	r23, Y+55	; 0x37
     160:	19 b5       	in	r17, 0x29	; 41
     162:	4a 0d       	add	r20, r10
     164:	2d e5       	ldi	r18, 0x5D	; 93
     166:	7a 9f       	mul	r23, r26
     168:	93 c9       	rjmp	.-3290   	; 0xfffff490 <__eeprom_end+0xff7ef490>
     16a:	9c ef       	ldi	r25, 0xFC	; 252
     16c:	a0 e0       	ldi	r26, 0x00	; 0
     16e:	3b 4d       	sbci	r19, 0xDB	; 219
     170:	ae 2a       	or	r10, r30
     172:	f5 b0       	in	r15, 0x05	; 5
     174:	c8 eb       	ldi	r28, 0xB8	; 184
     176:	bb 3c       	cpi	r27, 0xCB	; 203
     178:	83 53       	subi	r24, 0x33	; 51
     17a:	99 61       	ori	r25, 0x19	; 25
     17c:	17 2b       	or	r17, r23
     17e:	04 7e       	andi	r16, 0xE4	; 228
     180:	ba 77       	andi	r27, 0x7A	; 122
     182:	d6 26       	eor	r13, r22
     184:	e1 69       	ori	r30, 0x91	; 145
     186:	14 63       	ori	r17, 0x34	; 52
     188:	55 21       	and	r21, r5
     18a:	0c 7d       	andi	r16, 0xDC	; 220

0000018c <sbox>:
     18c:	63 7c 77 7b f2 6b 6f c5 30 01 67 2b fe d7 ab 76     c|w{.ko.0.g+...v
     19c:	ca 82 c9 7d fa 59 47 f0 ad d4 a2 af 9c a4 72 c0     ...}.YG.......r.
     1ac:	b7 fd 93 26 36 3f f7 cc 34 a5 e5 f1 71 d8 31 15     ...&6?..4...q.1.
     1bc:	04 c7 23 c3 18 96 05 9a 07 12 80 e2 eb 27 b2 75     ..#..........'.u
     1cc:	09 83 2c 1a 1b 6e 5a a0 52 3b d6 b3 29 e3 2f 84     ..,..nZ.R;..)./.
     1dc:	53 d1 00 ed 20 fc b1 5b 6a cb be 39 4a 4c 58 cf     S... ..[j..9JLX.
     1ec:	d0 ef aa fb 43 4d 33 85 45 f9 02 7f 50 3c 9f a8     ....CM3.E...P<..
     1fc:	51 a3 40 8f 92 9d 38 f5 bc b6 da 21 10 ff f3 d2     Q.@...8....!....
     20c:	cd 0c 13 ec 5f 97 44 17 c4 a7 7e 3d 64 5d 19 73     ...._.D...~=d].s
     21c:	60 81 4f dc 22 2a 90 88 46 ee b8 14 de 5e 0b db     `.O."*..F....^..
     22c:	e0 32 3a 0a 49 06 24 5c c2 d3 ac 62 91 95 e4 79     .2:.I.$\...b...y
     23c:	e7 c8 37 6d 8d d5 4e a9 6c 56 f4 ea 65 7a ae 08     ..7m..N.lV..ez..
     24c:	ba 78 25 2e 1c a6 b4 c6 e8 dd 74 1f 4b bd 8b 8a     .x%.......t.K...
     25c:	70 3e b5 66 48 03 f6 0e 61 35 57 b9 86 c1 1d 9e     p>.fH...a5W.....
     26c:	e1 f8 98 11 69 d9 8e 94 9b 1e 87 e9 ce 55 28 df     ....i........U(.
     27c:	8c a1 89 0d bf e6 42 68 41 99 2d 0f b0 54 bb 16     ......BhA.-..T..

0000028c <secp256k1_Gy>:
     28c:	b8 d4 10 fb 8f d0 47 9c 19 54 85 a6 48 b4 17 fd     ......G..T..H...
     29c:	a8 08 11 0e fc fb a4 5d 65 c4 a3 26 77 da 3a 48     .......]e..&w.:H

000002ac <secp256k1_Gx>:
     2ac:	98 17 f8 16 5b 81 f2 59 d9 28 ce 2d db fc 9b 02     ....[..Y.(.-....
     2bc:	07 0b 87 ce 95 62 a0 55 ac bb dc f9 7e 66 be 79     .....b.U....~f.y

000002cc <k>:
     2cc:	98 2f 8a 42 91 44 37 71 cf fb c0 b5 a5 db b5 e9     ./.B.D7q........
     2dc:	5b c2 56 39 f1 11 f1 59 a4 82 3f 92 d5 5e 1c ab     [.V9...Y..?..^..
     2ec:	98 aa 07 d8 01 5b 83 12 be 85 31 24 c3 7d 0c 55     .....[....1$.}.U
     2fc:	74 5d be 72 fe b1 de 80 a7 06 dc 9b 74 f1 9b c1     t].r........t...
     30c:	c1 69 9b e4 86 47 be ef c6 9d c1 0f cc a1 0c 24     .i...G.........$
     31c:	6f 2c e9 2d aa 84 74 4a dc a9 b0 5c da 88 f9 76     o,.-..tJ...\...v
     32c:	52 51 3e 98 6d c6 31 a8 c8 27 03 b0 c7 7f 59 bf     RQ>.m.1..'....Y.
     33c:	f3 0b e0 c6 47 91 a7 d5 51 63 ca 06 67 29 29 14     ....G...Qc..g)).
     34c:	85 0a b7 27 38 21 1b 2e fc 6d 2c 4d 13 0d 38 53     ...'8!...m,M..8S
     35c:	54 73 0a 65 bb 0a 6a 76 2e c9 c2 81 85 2c 72 92     Ts.e..jv.....,r.
     36c:	a1 e8 bf a2 4b 66 1a a8 70 8b 4b c2 a3 51 6c c7     ....Kf..p.K..Ql.
     37c:	19 e8 92 d1 24 06 99 d6 85 35 0e f4 70 a0 6a 10     ....$....5..p.j.
     38c:	16 c1 a4 19 08 6c 37 1e 4c 77 48 27 b5 bc b0 34     .....l7.LwH'...4
     39c:	b3 0c 1c 39 4a aa d8 4e 4f ca 9c 5b f3 6f 2e 68     ...9J..NO..[.o.h
     3ac:	ee 82 8f 74 6f 63 a5 78 14 78 c8 84 08 02 c7 8c     ...toc.x.x......
     3bc:	fa ff be 90 eb 6c 50 a4 f7 a3 f9 be f2 78 71 c6     .....lP......xq.

000003cc <s2>:
     3cc:	08 09 09 0b 0d 0f 0f 05 07 07 08 0b 0e 0e 0c 06     ................
     3dc:	09 0d 0f 07 0c 08 09 0b 07 07 0c 07 06 0f 0d 0b     ................
     3ec:	09 07 0f 0b 08 06 06 0e 0c 0d 05 0e 0d 0d 07 05     ................
     3fc:	0f 05 08 0b 0e 0e 06 0e 06 09 0c 09 0c 05 0f 08     ................
     40c:	08 05 0c 09 0c 05 0e 06 08 0d 06 05 0f 0d 0b 0b     ................

0000041c <s1>:
     41c:	0b 0e 0f 0c 05 08 07 09 0b 0d 0e 0f 06 07 09 08     ................
     42c:	07 06 08 0d 0b 09 07 0f 07 0c 0f 09 0b 07 0d 0c     ................
     43c:	0b 0d 06 07 0e 09 0d 0f 0e 08 0d 06 05 0c 07 05     ................
     44c:	0b 0c 0e 0f 0e 0f 09 08 09 0e 05 06 08 06 05 0c     ................
     45c:	09 0f 05 0b 06 08 0d 0c 05 0c 0d 0e 0b 08 05 06     ................

0000046c <r2>:
     46c:	05 0e 07 00 09 02 0b 04 0d 06 0f 08 01 0a 03 0c     ................
     47c:	06 0b 03 07 00 0d 05 0a 0e 0f 08 0c 04 09 01 02     ................
     48c:	0f 05 01 03 07 0e 06 09 0b 08 0c 02 0a 00 04 0d     ................
     49c:	08 06 04 01 03 0b 0f 00 05 0c 02 0d 09 07 0a 0e     ................
     4ac:	0c 0f 0a 04 01 05 08 07 06 02 0d 0e 00 03 09 0b     ................

000004bc <r1>:
     4bc:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f     ................
     4cc:	07 04 0d 01 0a 06 0f 03 0c 00 09 05 02 0e 0b 08     ................
     4dc:	03 0a 0e 04 09 0f 08 01 02 07 00 06 0d 0b 05 0c     ................
     4ec:	01 09 0b 0a 00 08 0c 04 0d 03 07 0f 0e 05 06 02     ................
     4fc:	04 00 05 09 07 0c 02 0a 0e 01 03 08 0b 06 0f 0d     ................

0000050c <k>:
     50c:	98 2f 8a 42 91 44 37 71 cf fb c0 b5 a5 db b5 e9     ./.B.D7q........
     51c:	5b c2 56 39 f1 11 f1 59 a4 82 3f 92 d5 5e 1c ab     [.V9...Y..?..^..
     52c:	98 aa 07 d8 01 5b 83 12 be 85 31 24 c3 7d 0c 55     .....[....1$.}.U
     53c:	74 5d be 72 fe b1 de 80 a7 06 dc 9b 74 f1 9b c1     t].r........t...
     54c:	c1 69 9b e4 86 47 be ef c6 9d c1 0f cc a1 0c 24     .i...G.........$
     55c:	6f 2c e9 2d aa 84 74 4a dc a9 b0 5c da 88 f9 76     o,.-..tJ...\...v
     56c:	52 51 3e 98 6d c6 31 a8 c8 27 03 b0 c7 7f 59 bf     RQ>.m.1..'....Y.
     57c:	f3 0b e0 c6 47 91 a7 d5 51 63 ca 06 67 29 29 14     ....G...Qc..g)).
     58c:	85 0a b7 27 38 21 1b 2e fc 6d 2c 4d 13 0d 38 53     ...'8!...m,M..8S
     59c:	54 73 0a 65 bb 0a 6a 76 2e c9 c2 81 85 2c 72 92     Ts.e..jv.....,r.
     5ac:	a1 e8 bf a2 4b 66 1a a8 70 8b 4b c2 a3 51 6c c7     ....Kf..p.K..Ql.
     5bc:	19 e8 92 d1 24 06 99 d6 85 35 0e f4 70 a0 6a 10     ....$....5..p.j.
     5cc:	16 c1 a4 19 08 6c 37 1e 4c 77 48 27 b5 bc b0 34     .....l7.LwH'...4
     5dc:	b3 0c 1c 39 4a aa d8 4e 4f ca 9c 5b f3 6f 2e 68     ...9J..NO..[.o.h
     5ec:	ee 82 8f 74 6f 63 a5 78 14 78 c8 84 08 02 c7 8c     ...toc.x.x......
     5fc:	fa ff be 90 eb 6c 50 a4 f7 a3 f9 be f2 78 71 c6     .....lP......xq.

0000060c <__ctors_end>:
     60c:	11 24       	eor	r1, r1
     60e:	1f be       	out	0x3f, r1	; 63
     610:	cf ef       	ldi	r28, 0xFF	; 255
     612:	d0 e1       	ldi	r29, 0x10	; 16
     614:	de bf       	out	0x3e, r29	; 62
     616:	cd bf       	out	0x3d, r28	; 61

00000618 <__do_copy_data>:
     618:	17 e0       	ldi	r17, 0x07	; 7
     61a:	a0 e0       	ldi	r26, 0x00	; 0
     61c:	b1 e0       	ldi	r27, 0x01	; 1
     61e:	e2 e6       	ldi	r30, 0x62	; 98
     620:	f6 e8       	ldi	r31, 0x86	; 134
     622:	00 e0       	ldi	r16, 0x00	; 0
     624:	0b bf       	out	0x3b, r16	; 59
     626:	02 c0       	rjmp	.+4      	; 0x62c <__do_copy_data+0x14>
     628:	07 90       	elpm	r0, Z+
     62a:	0d 92       	st	X+, r0
     62c:	a0 3c       	cpi	r26, 0xC0	; 192
     62e:	b1 07       	cpc	r27, r17
     630:	d9 f7       	brne	.-10     	; 0x628 <__do_copy_data+0x10>

00000632 <__do_clear_bss>:
     632:	29 e0       	ldi	r18, 0x09	; 9
     634:	a0 ec       	ldi	r26, 0xC0	; 192
     636:	b7 e0       	ldi	r27, 0x07	; 7
     638:	01 c0       	rjmp	.+2      	; 0x63c <.do_clear_bss_start>

0000063a <.do_clear_bss_loop>:
     63a:	1d 92       	st	X+, r1

0000063c <.do_clear_bss_start>:
     63c:	a8 30       	cpi	r26, 0x08	; 8
     63e:	b2 07       	cpc	r27, r18
     640:	e1 f7       	brne	.-8      	; 0x63a <.do_clear_bss_loop>
     642:	0e 94 ad 21 	call	0x435a	; 0x435a <main>
     646:	0c 94 2f 43 	jmp	0x865e	; 0x865e <_exit>

0000064a <__bad_interrupt>:
     64a:	da cc       	rjmp	.-1612   	; 0x0 <__vectors>

0000064c <time>:
     64c:	fc 01       	movw	r30, r24
     64e:	0f b6       	in	r0, 0x3f	; 63
     650:	f8 94       	cli
     652:	60 91 04 09 	lds	r22, 0x0904	; 0x800904 <__system_time>
     656:	70 91 05 09 	lds	r23, 0x0905	; 0x800905 <__system_time+0x1>
     65a:	80 91 06 09 	lds	r24, 0x0906	; 0x800906 <__system_time+0x2>
     65e:	90 91 07 09 	lds	r25, 0x0907	; 0x800907 <__system_time+0x3>
     662:	0f be       	out	0x3f, r0	; 63
     664:	30 97       	sbiw	r30, 0x00	; 0
     666:	21 f0       	breq	.+8      	; 0x670 <time+0x24>
     668:	60 83       	st	Z, r22
     66a:	71 83       	std	Z+1, r23	; 0x01
     66c:	82 83       	std	Z+2, r24	; 0x02
     66e:	93 83       	std	Z+3, r25	; 0x03
     670:	08 95       	ret

00000672 <xTimes2InGF>:
  * x ^ 8 + x ^ 4 + x ^ 3 + x + 1. */
static uint8_t xTimes2InGF(uint8_t x)
{
	// ((unsigned int)(-(int)(x >> 7)) & 0x1b) is equivalent to
	// (x & 0x80 ? 0x1b : 0) but is more timing attack resistant.
	return (uint8_t)(((unsigned int)(-(int)(x >> 7)) & 0x1b) ^ (unsigned int)(x + x));
     672:	98 2f       	mov	r25, r24
     674:	99 0f       	add	r25, r25
     676:	99 0b       	sbc	r25, r25
     678:	9b 71       	andi	r25, 0x1B	; 27
     67a:	88 0f       	add	r24, r24
}
     67c:	89 27       	eor	r24, r25
     67e:	08 95       	ret

00000680 <xTimes8InGF>:

/** Multiply x by 4 under the field GF(2 ^ 8) with the reducing polynomial
  * x ^ 8 + x ^ 4 + x ^ 3 + x + 1. */
static uint8_t xTimes4InGF(uint8_t x)
{
	return xTimes2InGF(xTimes2InGF(x));
     680:	f8 df       	rcall	.-16     	; 0x672 <xTimes2InGF>
     682:	f7 df       	rcall	.-18     	; 0x672 <xTimes2InGF>

/** Multiply x by 8 under the field GF(2 ^ 8) with the reducing polynomial
  * x ^ 8 + x ^ 4 + x ^ 3 + x + 1. */
static uint8_t xTimes8InGF(uint8_t x)
{
	return xTimes2InGF(xTimes4InGF(x));
     684:	f6 cf       	rjmp	.-20     	; 0x672 <xTimes2InGF>
     686:	08 95       	ret

00000688 <shiftOrInvShiftRows>:
}
     688:	cf 93       	push	r28
  * - row1 is shifted left (or right) 1 column
  * - row2 is shifted left (or right) 2 column
  * - row3 is shifted left (or right) 3 column
  */
static void shiftOrInvShiftRows(uint8_t *state, uint8_t shift_or_inv)
{
     68a:	df 93       	push	r29
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
     690:	60 97       	sbiw	r28, 0x10	; 16
     692:	0f b6       	in	r0, 0x3f	; 63
     694:	f8 94       	cli
     696:	de bf       	out	0x3e, r29	; 62
     698:	0f be       	out	0x3f, r0	; 63
     69a:	cd bf       	out	0x3d, r28	; 61
     69c:	dc 01       	movw	r26, r24
     69e:	34 e0       	ldi	r19, 0x04	; 4
	uint8_t tmp[16];
	uint8_t i, j;
	uint8_t o1, o2;

	o1 = 0;
	o2 = 0;
     6a0:	80 e0       	ldi	r24, 0x00	; 0
{
	uint8_t tmp[16];
	uint8_t i, j;
	uint8_t o1, o2;

	o1 = 0;
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	2f c0       	rjmp	.+94     	; 0x704 <shiftOrInvShiftRows+0x7c>
	o2 = 0;
	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 4; j++)
		{
			if (shift_or_inv == 5)
     6a6:	65 30       	cpi	r22, 0x05	; 5
     6a8:	89 f4       	brne	.+34     	; 0x6cc <shiftOrInvShiftRows+0x44>
			{
				tmp[o1] = LOOKUP_BYTE(sbox[state[o2]]);
     6aa:	fd 01       	movw	r30, r26
     6ac:	e8 0f       	add	r30, r24
     6ae:	f1 1d       	adc	r31, r1
     6b0:	e0 81       	ld	r30, Z
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	e4 57       	subi	r30, 0x74	; 116
     6b6:	fe 4f       	sbci	r31, 0xFE	; 254
     6b8:	74 91       	lpm	r23, Z
     6ba:	41 e0       	ldi	r20, 0x01	; 1
     6bc:	50 e0       	ldi	r21, 0x00	; 0
     6be:	4c 0f       	add	r20, r28
     6c0:	5d 1f       	adc	r21, r29
     6c2:	49 0f       	add	r20, r25
     6c4:	51 1d       	adc	r21, r1
     6c6:	fa 01       	movw	r30, r20
     6c8:	70 83       	st	Z, r23
     6ca:	10 c0       	rjmp	.+32     	; 0x6ec <shiftOrInvShiftRows+0x64>
			}
			else
			{
				tmp[o1] = LOOKUP_BYTE(inv_sbox[state[o2]]);
     6cc:	fd 01       	movw	r30, r26
     6ce:	e8 0f       	add	r30, r24
     6d0:	f1 1d       	adc	r31, r1
     6d2:	e0 81       	ld	r30, Z
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	e4 57       	subi	r30, 0x74	; 116
     6d8:	ff 4f       	sbci	r31, 0xFF	; 255
     6da:	74 91       	lpm	r23, Z
     6dc:	41 e0       	ldi	r20, 0x01	; 1
     6de:	50 e0       	ldi	r21, 0x00	; 0
     6e0:	4c 0f       	add	r20, r28
     6e2:	5d 1f       	adc	r21, r29
     6e4:	49 0f       	add	r20, r25
     6e6:	51 1d       	adc	r21, r1
     6e8:	fa 01       	movw	r30, r20
     6ea:	70 83       	st	Z, r23
			}
			o1 = (uint8_t)((o1 + 4) & 15);
     6ec:	9c 5f       	subi	r25, 0xFC	; 252
     6ee:	9f 70       	andi	r25, 0x0F	; 15
			o2 = (uint8_t)((o2 + 4) & 15);
     6f0:	8c 5f       	subi	r24, 0xFC	; 252
     6f2:	8f 70       	andi	r24, 0x0F	; 15
     6f4:	21 50       	subi	r18, 0x01	; 1

	o1 = 0;
	o2 = 0;
	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 4; j++)
     6f6:	b9 f6       	brne	.-82     	; 0x6a6 <shiftOrInvShiftRows+0x1e>
				tmp[o1] = LOOKUP_BYTE(inv_sbox[state[o2]]);
			}
			o1 = (uint8_t)((o1 + 4) & 15);
			o2 = (uint8_t)((o2 + 4) & 15);
		}
		o1 = (uint8_t)((o1 + 1) & 15);
     6f8:	9f 5f       	subi	r25, 0xFF	; 255
     6fa:	9f 70       	andi	r25, 0x0F	; 15
		o2 = (uint8_t)((o2 + shift_or_inv) & 15);
     6fc:	86 0f       	add	r24, r22
     6fe:	8f 70       	andi	r24, 0x0F	; 15
     700:	31 50       	subi	r19, 0x01	; 1
	uint8_t i, j;
	uint8_t o1, o2;

	o1 = 0;
	o2 = 0;
	for (i = 0; i < 4; i++)
     702:	11 f0       	breq	.+4      	; 0x708 <shiftOrInvShiftRows+0x80>
  * - row1 is shifted left (or right) 1 column
  * - row2 is shifted left (or right) 2 column
  * - row3 is shifted left (or right) 3 column
  */
static void shiftOrInvShiftRows(uint8_t *state, uint8_t shift_or_inv)
{
     704:	24 e0       	ldi	r18, 0x04	; 4
     706:	cf cf       	rjmp	.-98     	; 0x6a6 <shiftOrInvShiftRows+0x1e>
		}
		o1 = (uint8_t)((o1 + 1) & 15);
		o2 = (uint8_t)((o2 + shift_or_inv) & 15);
	}

	memcpy(state, tmp, 16);
     708:	80 e1       	ldi	r24, 0x10	; 16
     70a:	fe 01       	movw	r30, r28
     70c:	31 96       	adiw	r30, 0x01	; 1
     70e:	01 90       	ld	r0, Z+
     710:	0d 92       	st	X+, r0
     712:	8a 95       	dec	r24
     714:	e1 f7       	brne	.-8      	; 0x70e <shiftOrInvShiftRows+0x86>
}
     716:	60 96       	adiw	r28, 0x10	; 16
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	f8 94       	cli
     71c:	de bf       	out	0x3e, r29	; 62
     71e:	0f be       	out	0x3f, r0	; 63
     720:	cd bf       	out	0x3d, r28	; 61
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	08 95       	ret

00000728 <xor16Bytes>:
  * \param r One operand for the XOR operation. The result will also be
  *          written here.
  * \param op1 The other operand for the XOR operation.
  */
void xor16Bytes(uint8_t *r, uint8_t *op1)
{
     728:	db 01       	movw	r26, r22
     72a:	fc 01       	movw	r30, r24
     72c:	ac 01       	movw	r20, r24
     72e:	40 5f       	subi	r20, 0xF0	; 240
     730:	5f 4f       	sbci	r21, 0xFF	; 255
	uint8_t i;

	for (i = 0; i < 16; i++)
	{
		r[i] ^= op1[i];
     732:	9d 91       	ld	r25, X+
     734:	20 81       	ld	r18, Z
     736:	92 27       	eor	r25, r18
     738:	91 93       	st	Z+, r25
  */
void xor16Bytes(uint8_t *r, uint8_t *op1)
{
	uint8_t i;

	for (i = 0; i < 16; i++)
     73a:	e4 17       	cp	r30, r20
     73c:	f5 07       	cpc	r31, r21
     73e:	c9 f7       	brne	.-14     	; 0x732 <xor16Bytes+0xa>
	{
		r[i] ^= op1[i];
	}
}
     740:	08 95       	ret

00000742 <aesExpandKey>:
  * \param expanded_key Buffer of size #EXPANDED_KEY_SIZE bytes to store
  *                     expanded key.
  * \param key 16 byte input key.
  */
void aesExpandKey(uint8_t *expanded_key, uint8_t *key)
{
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
	uint8_t tmp0, tmp1, tmp2, tmp3, tmp4;
	uint8_t idx;

	memcpy(expanded_key, key, 16);
     746:	20 e1       	ldi	r18, 0x10	; 16
     748:	fb 01       	movw	r30, r22
     74a:	a8 2f       	mov	r26, r24
     74c:	b9 2f       	mov	r27, r25
     74e:	01 90       	ld	r0, Z+
     750:	0d 92       	st	X+, r0
     752:	2a 95       	dec	r18
     754:	e1 f7       	brne	.-8      	; 0x74e <aesExpandKey+0xc>
     756:	c8 2f       	mov	r28, r24
     758:	d9 2f       	mov	r29, r25

	for (idx = 16; idx < 176; idx = (uint8_t)(idx + 4))
     75a:	40 e1       	ldi	r20, 0x10	; 16
     75c:	de 01       	movw	r26, r28
	{
		tmp0 = expanded_key[idx - 4];
     75e:	9c 85       	ldd	r25, Y+12	; 0x0c
		tmp1 = expanded_key[idx - 3];
     760:	8d 85       	ldd	r24, Y+13	; 0x0d
		tmp2 = expanded_key[idx - 2];
     762:	2e 85       	ldd	r18, Y+14	; 0x0e
		tmp3 = expanded_key[idx - 1];
     764:	3f 85       	ldd	r19, Y+15	; 0x0f
		if ((idx & 15) == 0)
     766:	54 2f       	mov	r21, r20
     768:	5f 70       	andi	r21, 0x0F	; 15
     76a:	f1 f4       	brne	.+60     	; 0x7a8 <aesExpandKey+0x66>
		{
			tmp4 = tmp3;
			tmp3 = LOOKUP_BYTE(sbox[tmp0]);
     76c:	e9 2f       	mov	r30, r25
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	e4 57       	subi	r30, 0x74	; 116
     772:	fe 4f       	sbci	r31, 0xFE	; 254
     774:	54 91       	lpm	r21, Z
			tmp0 = (uint8_t)(LOOKUP_BYTE(sbox[tmp1]) ^ r_con[idx >> 4]);
     776:	e8 2f       	mov	r30, r24
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	e4 57       	subi	r30, 0x74	; 116
     77c:	fe 4f       	sbci	r31, 0xFE	; 254
     77e:	84 91       	lpm	r24, Z
     780:	e4 2f       	mov	r30, r20
     782:	e2 95       	swap	r30
     784:	ef 70       	andi	r30, 0x0F	; 15
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	e6 5f       	subi	r30, 0xF6	; 246
     78a:	fe 4f       	sbci	r31, 0xFE	; 254
     78c:	e0 81       	ld	r30, Z
     78e:	98 2f       	mov	r25, r24
     790:	9e 27       	eor	r25, r30
			tmp1 = LOOKUP_BYTE(sbox[tmp2]);
     792:	e2 2f       	mov	r30, r18
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	e4 57       	subi	r30, 0x74	; 116
     798:	fe 4f       	sbci	r31, 0xFE	; 254
     79a:	84 91       	lpm	r24, Z
			tmp2 = LOOKUP_BYTE(sbox[tmp4]);
     79c:	e3 2f       	mov	r30, r19
     79e:	f0 e0       	ldi	r31, 0x00	; 0
     7a0:	e4 57       	subi	r30, 0x74	; 116
     7a2:	fe 4f       	sbci	r31, 0xFE	; 254
     7a4:	24 91       	lpm	r18, Z
		tmp2 = expanded_key[idx - 2];
		tmp3 = expanded_key[idx - 1];
		if ((idx & 15) == 0)
		{
			tmp4 = tmp3;
			tmp3 = LOOKUP_BYTE(sbox[tmp0]);
     7a6:	35 2f       	mov	r19, r21
			tmp0 = (uint8_t)(LOOKUP_BYTE(sbox[tmp1]) ^ r_con[idx >> 4]);
			tmp1 = LOOKUP_BYTE(sbox[tmp2]);
			tmp2 = LOOKUP_BYTE(sbox[tmp4]);
		}

		expanded_key[idx + 0] = (uint8_t)(expanded_key[idx - 16 + 0] ^ tmp0);
     7a8:	ec 91       	ld	r30, X
     7aa:	e9 27       	eor	r30, r25
     7ac:	50 96       	adiw	r26, 0x10	; 16
     7ae:	ec 93       	st	X, r30
     7b0:	50 97       	sbiw	r26, 0x10	; 16
		expanded_key[idx + 1] = (uint8_t)(expanded_key[idx - 16 + 1] ^ tmp1);
     7b2:	11 96       	adiw	r26, 0x01	; 1
     7b4:	ec 91       	ld	r30, X
     7b6:	11 97       	sbiw	r26, 0x01	; 1
     7b8:	e8 27       	eor	r30, r24
     7ba:	51 96       	adiw	r26, 0x11	; 17
     7bc:	ec 93       	st	X, r30
     7be:	51 97       	sbiw	r26, 0x11	; 17
		expanded_key[idx + 2] = (uint8_t)(expanded_key[idx - 16 + 2] ^ tmp2);
     7c0:	12 96       	adiw	r26, 0x02	; 2
     7c2:	ec 91       	ld	r30, X
     7c4:	12 97       	sbiw	r26, 0x02	; 2
     7c6:	e2 27       	eor	r30, r18
     7c8:	52 96       	adiw	r26, 0x12	; 18
     7ca:	ec 93       	st	X, r30
     7cc:	52 97       	sbiw	r26, 0x12	; 18
		expanded_key[idx + 3] = (uint8_t)(expanded_key[idx - 16 + 3] ^ tmp3);
     7ce:	13 96       	adiw	r26, 0x03	; 3
     7d0:	ec 91       	ld	r30, X
     7d2:	13 97       	sbiw	r26, 0x03	; 3
     7d4:	e3 27       	eor	r30, r19
     7d6:	53 96       	adiw	r26, 0x13	; 19
     7d8:	ec 93       	st	X, r30
	uint8_t tmp0, tmp1, tmp2, tmp3, tmp4;
	uint8_t idx;

	memcpy(expanded_key, key, 16);

	for (idx = 16; idx < 176; idx = (uint8_t)(idx + 4))
     7da:	4c 5f       	subi	r20, 0xFC	; 252
     7dc:	24 96       	adiw	r28, 0x04	; 4
     7de:	40 3b       	cpi	r20, 0xB0	; 176
     7e0:	09 f0       	breq	.+2      	; 0x7e4 <aesExpandKey+0xa2>
     7e2:	bc cf       	rjmp	.-136    	; 0x75c <aesExpandKey+0x1a>
		expanded_key[idx + 0] = (uint8_t)(expanded_key[idx - 16 + 0] ^ tmp0);
		expanded_key[idx + 1] = (uint8_t)(expanded_key[idx - 16 + 1] ^ tmp1);
		expanded_key[idx + 2] = (uint8_t)(expanded_key[idx - 16 + 2] ^ tmp2);
		expanded_key[idx + 3] = (uint8_t)(expanded_key[idx - 16 + 3] ^ tmp3);
	}
}
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	08 95       	ret

000007ea <aesEncrypt>:
  * \param in The plaintext to encrypt. This should also be a 16 byte array.
  * \param expanded_key Should point to an array containing the expanded
  *                     key (see aesExpandKey()).
  */
void aesEncrypt(uint8_t *out, uint8_t *in, uint8_t *expanded_key)
{
     7ea:	2f 92       	push	r2
     7ec:	3f 92       	push	r3
     7ee:	4f 92       	push	r4
     7f0:	5f 92       	push	r5
     7f2:	6f 92       	push	r6
     7f4:	7f 92       	push	r7
     7f6:	8f 92       	push	r8
     7f8:	9f 92       	push	r9
     7fa:	af 92       	push	r10
     7fc:	bf 92       	push	r11
     7fe:	cf 92       	push	r12
     800:	df 92       	push	r13
     802:	ef 92       	push	r14
     804:	ff 92       	push	r15
     806:	0f 93       	push	r16
     808:	1f 93       	push	r17
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	cd b7       	in	r28, 0x3d	; 61
     810:	de b7       	in	r29, 0x3e	; 62
     812:	60 97       	sbiw	r28, 0x10	; 16
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	f8 94       	cli
     818:	de bf       	out	0x3e, r29	; 62
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	cd bf       	out	0x3d, r28	; 61
     81e:	7c 01       	movw	r14, r24
     820:	4a 01       	movw	r8, r20
	uint8_t round;

	memcpy(out, in, 16);
     822:	80 e1       	ldi	r24, 0x10	; 16
     824:	fb 01       	movw	r30, r22
     826:	d7 01       	movw	r26, r14
     828:	01 90       	ld	r0, Z+
     82a:	0d 92       	st	X+, r0
     82c:	8a 95       	dec	r24
     82e:	e1 f7       	brne	.-8      	; 0x828 <aesEncrypt+0x3e>

	xor16Bytes(out, expanded_key);
     830:	ba 01       	movw	r22, r20
     832:	c7 01       	movw	r24, r14
     834:	79 df       	rcall	.-270    	; 0x728 <xor16Bytes>
     836:	80 e1       	ldi	r24, 0x10	; 16
     838:	88 0e       	add	r8, r24
     83a:	91 1c       	adc	r9, r1

	for (round = 1; round < 11; round++)
     83c:	44 24       	eor	r4, r4
     83e:	43 94       	inc	r4
	{
		if (round < 10)
     840:	0f 2e       	mov	r0, r31
     842:	ff e0       	ldi	r31, 0x0F	; 15
     844:	2f 2e       	mov	r2, r31
     846:	f0 2d       	mov	r31, r0
     848:	31 2c       	mov	r3, r1
     84a:	99 e0       	ldi	r25, 0x09	; 9
     84c:	94 15       	cp	r25, r4
     84e:	08 f4       	brcc	.+2      	; 0x852 <aesEncrypt+0x68>
     850:	62 c0       	rjmp	.+196    	; 0x916 <aesEncrypt+0x12c>
     852:	de 01       	movw	r26, r28
     854:	11 96       	adiw	r26, 0x01	; 1
     856:	5d 01       	movw	r10, r26
     858:	62 2c       	mov	r6, r2
     85a:	0f 2e       	mov	r0, r31
     85c:	fa e0       	ldi	r31, 0x0A	; 10
     85e:	7f 2e       	mov	r7, r31
     860:	f0 2d       	mov	r31, r0
     862:	0f 2e       	mov	r0, r31
     864:	f5 e0       	ldi	r31, 0x05	; 5
     866:	cf 2e       	mov	r12, r31
     868:	f0 2d       	mov	r31, r0
     86a:	d3 2c       	mov	r13, r3
     86c:	00 e0       	ldi	r16, 0x00	; 0
	o3 = 10;
	o4 = 15;
	for (i = 0; i < 16; i++)
	{
		tmp[i] = (uint8_t)(
			xTimes2InGF(LOOKUP_BYTE(sbox[state[o1]]))
     86e:	f7 01       	movw	r30, r14
     870:	ed 0d       	add	r30, r13
     872:	f1 1d       	adc	r31, r1
     874:	e0 81       	ld	r30, Z
     876:	f0 e0       	ldi	r31, 0x00	; 0
     878:	e4 57       	subi	r30, 0x74	; 116
     87a:	fe 4f       	sbci	r31, 0xFE	; 254
     87c:	84 91       	lpm	r24, Z
     87e:	f9 de       	rcall	.-526    	; 0x672 <xTimes2InGF>
     880:	58 2e       	mov	r5, r24
			^ xTimes3InGF(LOOKUP_BYTE(sbox[state[o2]]))
     882:	f7 01       	movw	r30, r14
     884:	ec 0d       	add	r30, r12
     886:	f1 1d       	adc	r31, r1
     888:	e0 81       	ld	r30, Z
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	e4 57       	subi	r30, 0x74	; 116
     88e:	fe 4f       	sbci	r31, 0xFE	; 254

/** Multiply x by 3 under the field GF(2 ^ 8) with the reducing polynomial
  * x ^ 8 + x ^ 4 + x ^ 3 + x + 1. */
static uint8_t xTimes3InGF(uint8_t x)
{
	return (uint8_t)(xTimes2InGF(x) ^ x);
     890:	14 91       	lpm	r17, Z
     892:	81 2f       	mov	r24, r17
     894:	ee de       	rcall	.-548    	; 0x672 <xTimes2InGF>
	for (i = 0; i < 16; i++)
	{
		tmp[i] = (uint8_t)(
			xTimes2InGF(LOOKUP_BYTE(sbox[state[o1]]))
			^ xTimes3InGF(LOOKUP_BYTE(sbox[state[o2]]))
			^ LOOKUP_BYTE(sbox[state[o3]])
     896:	f7 01       	movw	r30, r14
     898:	e7 0d       	add	r30, r7
     89a:	f1 1d       	adc	r31, r1
     89c:	e0 81       	ld	r30, Z
     89e:	f0 e0       	ldi	r31, 0x00	; 0
     8a0:	e4 57       	subi	r30, 0x74	; 116
     8a2:	fe 4f       	sbci	r31, 0xFE	; 254
     8a4:	24 91       	lpm	r18, Z
			^ LOOKUP_BYTE(sbox[state[o4]]));
     8a6:	f7 01       	movw	r30, r14
     8a8:	e6 0d       	add	r30, r6
     8aa:	f1 1d       	adc	r31, r1
     8ac:	90 81       	ld	r25, Z
     8ae:	e9 2f       	mov	r30, r25
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	e4 57       	subi	r30, 0x74	; 116
     8b4:	fe 4f       	sbci	r31, 0xFE	; 254
     8b6:	94 91       	lpm	r25, Z
	o2 = 5;
	o3 = 10;
	o4 = 15;
	for (i = 0; i < 16; i++)
	{
		tmp[i] = (uint8_t)(
     8b8:	15 25       	eor	r17, r5
     8ba:	e1 2f       	mov	r30, r17
     8bc:	e8 27       	eor	r30, r24
     8be:	e2 27       	eor	r30, r18
     8c0:	e9 27       	eor	r30, r25
     8c2:	d5 01       	movw	r26, r10
     8c4:	ed 93       	st	X+, r30
     8c6:	5d 01       	movw	r10, r26
		otemp = o1;
		o1 = o2;
		o2 = o3;
		o3 = o4;
		o4 = otemp;
		if ((i & 3) == 3)
     8c8:	80 2f       	mov	r24, r16
     8ca:	83 70       	andi	r24, 0x03	; 3
     8cc:	83 30       	cpi	r24, 0x03	; 3
     8ce:	89 f4       	brne	.+34     	; 0x8f2 <aesEncrypt+0x108>
		{
			o1 = (uint8_t)((o1 + 4) & 15);
     8d0:	84 e0       	ldi	r24, 0x04	; 4
     8d2:	8c 0d       	add	r24, r12
			o2 = (uint8_t)((o2 + 4) & 15);
     8d4:	94 e0       	ldi	r25, 0x04	; 4
     8d6:	97 0d       	add	r25, r7
     8d8:	9f 70       	andi	r25, 0x0F	; 15
     8da:	c9 2e       	mov	r12, r25
			o3 = (uint8_t)((o3 + 4) & 15);
     8dc:	94 e0       	ldi	r25, 0x04	; 4
     8de:	96 0d       	add	r25, r6
     8e0:	9f 70       	andi	r25, 0x0F	; 15
     8e2:	79 2e       	mov	r7, r25
			o4 = (uint8_t)((o4 + 4) & 15);
     8e4:	94 e0       	ldi	r25, 0x04	; 4
     8e6:	9d 0d       	add	r25, r13
     8e8:	9f 70       	andi	r25, 0x0F	; 15
     8ea:	69 2e       	mov	r6, r25
		o2 = o3;
		o3 = o4;
		o4 = otemp;
		if ((i & 3) == 3)
		{
			o1 = (uint8_t)((o1 + 4) & 15);
     8ec:	8f 70       	andi	r24, 0x0F	; 15
     8ee:	d8 2e       	mov	r13, r24
     8f0:	05 c0       	rjmp	.+10     	; 0x8fc <aesEncrypt+0x112>
		otemp = o1;
		o1 = o2;
		o2 = o3;
		o3 = o4;
		o4 = otemp;
		if ((i & 3) == 3)
     8f2:	8d 2d       	mov	r24, r13
     8f4:	dc 2c       	mov	r13, r12
     8f6:	c7 2c       	mov	r12, r7
     8f8:	76 2c       	mov	r7, r6
     8fa:	68 2e       	mov	r6, r24

	o1 = 0;
	o2 = 5;
	o3 = 10;
	o4 = 15;
	for (i = 0; i < 16; i++)
     8fc:	0f 5f       	subi	r16, 0xFF	; 255
     8fe:	00 31       	cpi	r16, 0x10	; 16
     900:	09 f0       	breq	.+2      	; 0x904 <aesEncrypt+0x11a>
     902:	b5 cf       	rjmp	.-150    	; 0x86e <aesEncrypt+0x84>
			o3 = (uint8_t)((o3 + 4) & 15);
			o4 = (uint8_t)((o4 + 4) & 15);
		}
	}

	memcpy(state, tmp, 16);
     904:	80 e1       	ldi	r24, 0x10	; 16
     906:	fe 01       	movw	r30, r28
     908:	31 96       	adiw	r30, 0x01	; 1
     90a:	d7 01       	movw	r26, r14
     90c:	01 90       	ld	r0, Z+
     90e:	0d 92       	st	X+, r0
     910:	8a 95       	dec	r24
     912:	e1 f7       	brne	.-8      	; 0x90c <aesEncrypt+0x122>
		{
			mixSubColumns(out);
		}
		else
		{
			shiftOrInvShiftRows(out, 5);
     914:	03 c0       	rjmp	.+6      	; 0x91c <aesEncrypt+0x132>
     916:	65 e0       	ldi	r22, 0x05	; 5
     918:	c7 01       	movw	r24, r14
		}

		xor16Bytes(out, &(expanded_key[round * 16]));
     91a:	b6 de       	rcall	.-660    	; 0x688 <shiftOrInvShiftRows>
     91c:	b4 01       	movw	r22, r8
     91e:	c7 01       	movw	r24, r14
     920:	03 df       	rcall	.-506    	; 0x728 <xor16Bytes>

	memcpy(out, in, 16);

	xor16Bytes(out, expanded_key);

	for (round = 1; round < 11; round++)
     922:	43 94       	inc	r4
     924:	b0 e1       	ldi	r27, 0x10	; 16
     926:	8b 0e       	add	r8, r27
     928:	91 1c       	adc	r9, r1
     92a:	8b e0       	ldi	r24, 0x0B	; 11
     92c:	48 12       	cpse	r4, r24
     92e:	8d cf       	rjmp	.-230    	; 0x84a <aesEncrypt+0x60>
			shiftOrInvShiftRows(out, 5);
		}

		xor16Bytes(out, &(expanded_key[round * 16]));
	}
}
     930:	60 96       	adiw	r28, 0x10	; 16
     932:	0f b6       	in	r0, 0x3f	; 63
     934:	f8 94       	cli
     936:	de bf       	out	0x3e, r29	; 62
     938:	0f be       	out	0x3f, r0	; 63
     93a:	cd bf       	out	0x3d, r28	; 61
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	1f 91       	pop	r17
     942:	0f 91       	pop	r16
     944:	ff 90       	pop	r15
     946:	ef 90       	pop	r14
     948:	df 90       	pop	r13
     94a:	cf 90       	pop	r12
     94c:	bf 90       	pop	r11
     94e:	af 90       	pop	r10
     950:	9f 90       	pop	r9
     952:	8f 90       	pop	r8
     954:	7f 90       	pop	r7
     956:	6f 90       	pop	r6
     958:	5f 90       	pop	r5
     95a:	4f 90       	pop	r4
     95c:	3f 90       	pop	r3
     95e:	2f 90       	pop	r2
     960:	08 95       	ret

00000962 <aesDecrypt>:
  * \param in The ciphertext to decrypt. This should also be a 16 byte array.
  * \param expanded_key Should point to an array containing the expanded
  *                     key (see aesExpandKey()).
  */
void aesDecrypt(uint8_t *out, uint8_t *in, uint8_t *expanded_key)
{
     962:	2f 92       	push	r2
     964:	3f 92       	push	r3
     966:	4f 92       	push	r4
     968:	5f 92       	push	r5
     96a:	6f 92       	push	r6
     96c:	7f 92       	push	r7
     96e:	8f 92       	push	r8
     970:	9f 92       	push	r9
     972:	af 92       	push	r10
     974:	bf 92       	push	r11
     976:	cf 92       	push	r12
     978:	df 92       	push	r13
     97a:	ef 92       	push	r14
     97c:	ff 92       	push	r15
     97e:	0f 93       	push	r16
     980:	1f 93       	push	r17
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	cd b7       	in	r28, 0x3d	; 61
     988:	de b7       	in	r29, 0x3e	; 62
     98a:	62 97       	sbiw	r28, 0x12	; 18
     98c:	0f b6       	in	r0, 0x3f	; 63
     98e:	f8 94       	cli
     990:	de bf       	out	0x3e, r29	; 62
     992:	0f be       	out	0x3f, r0	; 63
     994:	cd bf       	out	0x3d, r28	; 61
     996:	5c 01       	movw	r10, r24
     998:	5a 8b       	std	Y+18, r21	; 0x12
     99a:	49 8b       	std	Y+17, r20	; 0x11
	uint8_t round;

	memcpy(out, in, 16);
     99c:	80 e1       	ldi	r24, 0x10	; 16
     99e:	fb 01       	movw	r30, r22
     9a0:	d5 01       	movw	r26, r10
     9a2:	01 90       	ld	r0, Z+
     9a4:	0d 92       	st	X+, r0
     9a6:	8a 95       	dec	r24
     9a8:	e1 f7       	brne	.-8      	; 0x9a2 <aesDecrypt+0x40>

	xor16Bytes(out, &(expanded_key[160]));
     9aa:	69 89       	ldd	r22, Y+17	; 0x11
     9ac:	7a 89       	ldd	r23, Y+18	; 0x12
     9ae:	60 56       	subi	r22, 0x60	; 96
     9b0:	7f 4f       	sbci	r23, 0xFF	; 255
     9b2:	c5 01       	movw	r24, r10
     9b4:	b9 de       	rcall	.-654    	; 0x728 <xor16Bytes>
	shiftOrInvShiftRows(out, 13);
     9b6:	6d e0       	ldi	r22, 0x0D	; 13
     9b8:	c5 01       	movw	r24, r10
     9ba:	66 de       	rcall	.-820    	; 0x688 <shiftOrInvShiftRows>

	for (round = 10; round--; )
     9bc:	0f 2e       	mov	r0, r31
     9be:	f9 e0       	ldi	r31, 0x09	; 9
     9c0:	3f 2e       	mov	r3, r31
     9c2:	f0 2d       	mov	r31, r0
     9c4:	4e 01       	movw	r8, r28
     9c6:	81 e1       	ldi	r24, 0x11	; 17
     9c8:	88 0e       	add	r8, r24
     9ca:	91 1c       	adc	r9, r1
	{
		xor16Bytes(out, &(expanded_key[round * 16]));
     9cc:	69 89       	ldd	r22, Y+17	; 0x11
     9ce:	7a 89       	ldd	r23, Y+18	; 0x12
     9d0:	e0 e1       	ldi	r30, 0x10	; 16
     9d2:	3e 9e       	mul	r3, r30
     9d4:	60 0d       	add	r22, r0
     9d6:	71 1d       	adc	r23, r1
     9d8:	11 24       	eor	r1, r1
     9da:	c5 01       	movw	r24, r10
     9dc:	a5 de       	rcall	.-694    	; 0x728 <xor16Bytes>
		if (round != 0)
     9de:	33 20       	and	r3, r3
     9e0:	09 f4       	brne	.+2      	; 0x9e4 <aesDecrypt+0x82>
     9e2:	73 c0       	rjmp	.+230    	; 0xaca <aesDecrypt+0x168>
     9e4:	c1 2c       	mov	r12, r1
     9e6:	0f 2e       	mov	r0, r31
     9e8:	f3 e0       	ldi	r31, 0x03	; 3
     9ea:	4f 2e       	mov	r4, r31
     9ec:	f0 2d       	mov	r31, r0
     9ee:	68 94       	set
     9f0:	55 24       	eor	r5, r5
     9f2:	51 f8       	bld	r5, 1
     9f4:	66 24       	eor	r6, r6
     9f6:	63 94       	inc	r6
     9f8:	71 2c       	mov	r7, r1
     9fa:	d1 2c       	mov	r13, r1
	o4 = 3;
	idx = 0;
	for (i = 0; i < 16; i++)
	{
		tmp[idx] = (uint8_t)(
			xTimesEInGF(state[o1])
     9fc:	f5 01       	movw	r30, r10
     9fe:	e7 0d       	add	r30, r7
     a00:	f1 1d       	adc	r31, r1

/** Multiply x by 14 under the field GF(2 ^ 8) with the reducing polynomial
  * x ^ 8 + x ^ 4 + x ^ 3 + x + 1. */
static uint8_t xTimesEInGF(uint8_t x)
{
	return (uint8_t)(xTimes8InGF(x) ^ xTimes4InGF(x) ^ xTimes2InGF(x));
     a02:	10 81       	ld	r17, Z
     a04:	81 2f       	mov	r24, r17
     a06:	3c de       	rcall	.-904    	; 0x680 <xTimes8InGF>

/** Multiply x by 4 under the field GF(2 ^ 8) with the reducing polynomial
  * x ^ 8 + x ^ 4 + x ^ 3 + x + 1. */
static uint8_t xTimes4InGF(uint8_t x)
{
	return xTimes2InGF(xTimes2InGF(x));
     a08:	28 2e       	mov	r2, r24
     a0a:	81 2f       	mov	r24, r17
     a0c:	32 de       	rcall	.-924    	; 0x672 <xTimes2InGF>
     a0e:	f8 2e       	mov	r15, r24
     a10:	30 de       	rcall	.-928    	; 0x672 <xTimes2InGF>
     a12:	18 2f       	mov	r17, r24
	idx = 0;
	for (i = 0; i < 16; i++)
	{
		tmp[idx] = (uint8_t)(
			xTimesEInGF(state[o1])
			^ xTimesBInGF(state[o2])
     a14:	f5 01       	movw	r30, r10
     a16:	e6 0d       	add	r30, r6
     a18:	f1 1d       	adc	r31, r1

/** Multiply x by 9 under the field GF(2 ^ 8) with the reducing polynomial
  * x ^ 8 + x ^ 4 + x ^ 3 + x + 1. */
static uint8_t xTimes9InGF(uint8_t x)
{
	return (uint8_t)(xTimes8InGF(x) ^ x);
     a1a:	e0 80       	ld	r14, Z
     a1c:	8e 2d       	mov	r24, r14
     a1e:	30 de       	rcall	.-928    	; 0x680 <xTimes8InGF>
     a20:	08 2f       	mov	r16, r24
     a22:	f2 24       	eor	r15, r2

/** Multiply x by 11 under the field GF(2 ^ 8) with the reducing polynomial
  * x ^ 8 + x ^ 4 + x ^ 3 + x + 1. */
static uint8_t xTimesBInGF(uint8_t x)
{
	return (uint8_t)(xTimes9InGF(x) ^ xTimes2InGF(x));
     a24:	8e 2d       	mov	r24, r14
     a26:	25 de       	rcall	.-950    	; 0x672 <xTimes2InGF>
     a28:	1f 25       	eor	r17, r15
     a2a:	10 27       	eor	r17, r16
     a2c:	18 27       	eor	r17, r24
	for (i = 0; i < 16; i++)
	{
		tmp[idx] = (uint8_t)(
			xTimesEInGF(state[o1])
			^ xTimesBInGF(state[o2])
			^ xTimesDInGF(state[o3])
     a2e:	f5 01       	movw	r30, r10
     a30:	e5 0d       	add	r30, r5

/** Multiply x by 9 under the field GF(2 ^ 8) with the reducing polynomial
  * x ^ 8 + x ^ 4 + x ^ 3 + x + 1. */
static uint8_t xTimes9InGF(uint8_t x)
{
	return (uint8_t)(xTimes8InGF(x) ^ x);
     a32:	f1 1d       	adc	r31, r1
     a34:	f0 80       	ld	r15, Z
     a36:	8f 2d       	mov	r24, r15
     a38:	23 de       	rcall	.-954    	; 0x680 <xTimes8InGF>

/** Multiply x by 4 under the field GF(2 ^ 8) with the reducing polynomial
  * x ^ 8 + x ^ 4 + x ^ 3 + x + 1. */
static uint8_t xTimes4InGF(uint8_t x)
{
	return xTimes2InGF(xTimes2InGF(x));
     a3a:	18 27       	eor	r17, r24
     a3c:	8f 2d       	mov	r24, r15
     a3e:	19 de       	rcall	.-974    	; 0x672 <xTimes2InGF>
     a40:	18 de       	rcall	.-976    	; 0x672 <xTimes2InGF>
     a42:	18 27       	eor	r17, r24
	{
		tmp[idx] = (uint8_t)(
			xTimesEInGF(state[o1])
			^ xTimesBInGF(state[o2])
			^ xTimesDInGF(state[o3])
			^ xTimes9InGF(state[o4]));
     a44:	f5 01       	movw	r30, r10
     a46:	e4 0d       	add	r30, r4
     a48:	f1 1d       	adc	r31, r1
     a4a:	00 81       	ld	r16, Z

/** Multiply x by 9 under the field GF(2 ^ 8) with the reducing polynomial
  * x ^ 8 + x ^ 4 + x ^ 3 + x + 1. */
static uint8_t xTimes9InGF(uint8_t x)
{
	return (uint8_t)(xTimes8InGF(x) ^ x);
     a4c:	80 2f       	mov	r24, r16
     a4e:	18 de       	rcall	.-976    	; 0x680 <xTimes8InGF>
     a50:	e1 e0       	ldi	r30, 0x01	; 1
	o3 = 2;
	o4 = 3;
	idx = 0;
	for (i = 0; i < 16; i++)
	{
		tmp[idx] = (uint8_t)(
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	ec 0f       	add	r30, r28
     a56:	fd 1f       	adc	r31, r29
     a58:	ed 0d       	add	r30, r13
     a5a:	f1 1d       	adc	r31, r1
     a5c:	81 27       	eor	r24, r17
     a5e:	e8 26       	eor	r14, r24
     a60:	fe 24       	eor	r15, r14
     a62:	f0 26       	eor	r15, r16
     a64:	f0 82       	st	Z, r15
     a66:	85 e0       	ldi	r24, 0x05	; 5
			xTimesEInGF(state[o1])
			^ xTimesBInGF(state[o2])
			^ xTimesDInGF(state[o3])
			^ xTimes9InGF(state[o4]));
		idx = (uint8_t)((idx + 5) & 15);
     a68:	8d 0d       	add	r24, r13
     a6a:	8f 70       	andi	r24, 0x0F	; 15
     a6c:	d8 2e       	mov	r13, r24
     a6e:	8c 2d       	mov	r24, r12
		otemp = o1;
		o1 = o2;
		o2 = o3;
		o3 = o4;
		o4 = otemp;
		if ((i & 3) == 3)
     a70:	83 70       	andi	r24, 0x03	; 3
     a72:	83 30       	cpi	r24, 0x03	; 3
     a74:	89 f4       	brne	.+34     	; 0xa98 <aesDecrypt+0x136>
     a76:	84 e0       	ldi	r24, 0x04	; 4
		{
			o1 = (uint8_t)((o1 + 4) & 15);
     a78:	86 0d       	add	r24, r6
     a7a:	94 e0       	ldi	r25, 0x04	; 4
			o2 = (uint8_t)((o2 + 4) & 15);
     a7c:	95 0d       	add	r25, r5
     a7e:	9f 70       	andi	r25, 0x0F	; 15
     a80:	69 2e       	mov	r6, r25
     a82:	94 e0       	ldi	r25, 0x04	; 4
			o3 = (uint8_t)((o3 + 4) & 15);
     a84:	94 0d       	add	r25, r4
     a86:	9f 70       	andi	r25, 0x0F	; 15
     a88:	59 2e       	mov	r5, r25
     a8a:	94 e0       	ldi	r25, 0x04	; 4
			o4 = (uint8_t)((o4 + 4) & 15);
     a8c:	97 0d       	add	r25, r7
     a8e:	9f 70       	andi	r25, 0x0F	; 15
     a90:	49 2e       	mov	r4, r25
     a92:	8f 70       	andi	r24, 0x0F	; 15
		o2 = o3;
		o3 = o4;
		o4 = otemp;
		if ((i & 3) == 3)
		{
			o1 = (uint8_t)((o1 + 4) & 15);
     a94:	78 2e       	mov	r7, r24
     a96:	05 c0       	rjmp	.+10     	; 0xaa2 <aesDecrypt+0x140>
     a98:	87 2d       	mov	r24, r7
		otemp = o1;
		o1 = o2;
		o2 = o3;
		o3 = o4;
		o4 = otemp;
		if ((i & 3) == 3)
     a9a:	76 2c       	mov	r7, r6
     a9c:	65 2c       	mov	r6, r5
     a9e:	54 2c       	mov	r5, r4
     aa0:	48 2e       	mov	r4, r24
     aa2:	c3 94       	inc	r12
	o1 = 0;
	o2 = 1;
	o3 = 2;
	o4 = 3;
	idx = 0;
	for (i = 0; i < 16; i++)
     aa4:	f0 e1       	ldi	r31, 0x10	; 16
     aa6:	cf 12       	cpse	r12, r31
     aa8:	a9 cf       	rjmp	.-174    	; 0x9fc <aesDecrypt+0x9a>
     aaa:	de 01       	movw	r26, r28
     aac:	11 96       	adiw	r26, 0x01	; 1
     aae:	c5 01       	movw	r24, r10
     ab0:	ed 91       	ld	r30, X+
		}
	}

	for (i = 0; i < 16; i++)
	{
		state[i] = LOOKUP_BYTE(inv_sbox[tmp[i]]);
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	e4 57       	subi	r30, 0x74	; 116
     ab6:	ff 4f       	sbci	r31, 0xFF	; 255
     ab8:	24 91       	lpm	r18, Z
     aba:	fc 01       	movw	r30, r24
     abc:	21 93       	st	Z+, r18
     abe:	cf 01       	movw	r24, r30
     ac0:	8a 16       	cp	r8, r26
			o3 = (uint8_t)((o3 + 4) & 15);
			o4 = (uint8_t)((o4 + 4) & 15);
		}
	}

	for (i = 0; i < 16; i++)
     ac2:	9b 06       	cpc	r9, r27
     ac4:	a9 f7       	brne	.-22     	; 0xab0 <aesDecrypt+0x14e>
     ac6:	3a 94       	dec	r3
	memcpy(out, in, 16);

	xor16Bytes(out, &(expanded_key[160]));
	shiftOrInvShiftRows(out, 13);

	for (round = 10; round--; )
     ac8:	81 cf       	rjmp	.-254    	; 0x9cc <aesDecrypt+0x6a>
     aca:	62 96       	adiw	r28, 0x12	; 18
		if (round != 0)
		{
			invMixSubColumns(out);
		}
	}
}
     acc:	0f b6       	in	r0, 0x3f	; 63
     ace:	f8 94       	cli
     ad0:	de bf       	out	0x3e, r29	; 62
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	cd bf       	out	0x3d, r28	; 61
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	1f 91       	pop	r17
     adc:	0f 91       	pop	r16
     ade:	ff 90       	pop	r15
     ae0:	ef 90       	pop	r14
     ae2:	df 90       	pop	r13
     ae4:	cf 90       	pop	r12
     ae6:	bf 90       	pop	r11
     ae8:	af 90       	pop	r10
     aea:	9f 90       	pop	r9
     aec:	8f 90       	pop	r8
     aee:	7f 90       	pop	r7
     af0:	6f 90       	pop	r6
     af2:	5f 90       	pop	r5
     af4:	4f 90       	pop	r4
     af6:	3f 90       	pop	r3
     af8:	2f 90       	pop	r2
     afa:	08 95       	ret

00000afc <bigCompareVariableSize>:
     afc:	1f 93       	push	r17
	{
		carry = (uint8_t)(r[i] & 1);
		r[i] = (uint8_t)((r[i] >> 1) | (old_carry << 7));
		old_carry = carry;
	}
}
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	dc 01       	movw	r26, r24
     b04:	5f ef       	ldi	r21, 0xFF	; 255
     b06:	54 0f       	add	r21, r20
     b08:	54 17       	cp	r21, r20
     b0a:	50 f5       	brcc	.+84     	; 0xb60 <bigCompareVariableSize+0x64>
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	25 2f       	mov	r18, r21
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	fb 01       	movw	r30, r22
     b14:	e2 0f       	add	r30, r18
     b16:	f3 1f       	adc	r31, r19
     b18:	e0 81       	ld	r30, Z
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	ed 01       	movw	r28, r26
     b1e:	c2 0f       	add	r28, r18
     b20:	d3 1f       	adc	r29, r19
     b22:	28 81       	ld	r18, Y
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	ef 01       	movw	r28, r30
     b28:	c2 1b       	sub	r28, r18
     b2a:	d3 0b       	sbc	r29, r19
     b2c:	9d 2f       	mov	r25, r29
     b2e:	91 70       	andi	r25, 0x01	; 1
     b30:	c8 2f       	mov	r28, r24
     b32:	d0 e0       	ldi	r29, 0x00	; 0
     b34:	d1 95       	neg	r29
     b36:	c1 95       	neg	r28
     b38:	d1 09       	sbc	r29, r1
     b3a:	89 27       	eor	r24, r25
     b3c:	8d 23       	and	r24, r29
     b3e:	98 27       	eor	r25, r24
     b40:	2e 1b       	sub	r18, r30
     b42:	3f 0b       	sbc	r19, r31
     b44:	83 2f       	mov	r24, r19
     b46:	82 70       	andi	r24, 0x02	; 2
     b48:	29 2f       	mov	r18, r25
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	31 95       	neg	r19
     b4e:	21 95       	neg	r18
     b50:	31 09       	sbc	r19, r1
     b52:	98 27       	eor	r25, r24
     b54:	93 23       	and	r25, r19
     b56:	89 27       	eor	r24, r25
     b58:	51 50       	subi	r21, 0x01	; 1
     b5a:	54 17       	cp	r21, r20
     b5c:	c0 f2       	brcs	.-80     	; 0xb0e <bigCompareVariableSize+0x12>
     b5e:	01 c0       	rjmp	.+2      	; 0xb62 <bigCompareVariableSize+0x66>
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	1f 91       	pop	r17
     b68:	08 95       	ret

00000b6a <bigCompare>:
     b6a:	40 e2       	ldi	r20, 0x20	; 32
     b6c:	c7 cf       	rjmp	.-114    	; 0xafc <bigCompareVariableSize>
     b6e:	08 95       	ret

00000b70 <bigIsZeroVariableSize>:
     b70:	66 23       	and	r22, r22
     b72:	79 f0       	breq	.+30     	; 0xb92 <bigIsZeroVariableSize+0x22>
     b74:	fc 01       	movw	r30, r24
     b76:	61 50       	subi	r22, 0x01	; 1
     b78:	26 2f       	mov	r18, r22
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	2f 5f       	subi	r18, 0xFF	; 255
     b7e:	3f 4f       	sbci	r19, 0xFF	; 255
     b80:	28 0f       	add	r18, r24
     b82:	39 1f       	adc	r19, r25
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	91 91       	ld	r25, Z+
     b88:	79 2b       	or	r23, r25
     b8a:	e2 17       	cp	r30, r18
     b8c:	f3 07       	cpc	r31, r19
     b8e:	d9 f7       	brne	.-10     	; 0xb86 <bigIsZeroVariableSize+0x16>
     b90:	01 c0       	rjmp	.+2      	; 0xb94 <bigIsZeroVariableSize+0x24>
     b92:	70 e0       	ldi	r23, 0x00	; 0
     b94:	87 2f       	mov	r24, r23
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	91 95       	neg	r25
     b9a:	81 95       	neg	r24
     b9c:	91 09       	sbc	r25, r1
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	89 0f       	add	r24, r25
     ba2:	08 95       	ret

00000ba4 <bigIsZero>:
     ba4:	60 e2       	ldi	r22, 0x20	; 32
     ba6:	e4 cf       	rjmp	.-56     	; 0xb70 <bigIsZeroVariableSize>
     ba8:	08 95       	ret

00000baa <bigSetZero>:
     baa:	20 e2       	ldi	r18, 0x20	; 32
     bac:	fc 01       	movw	r30, r24
     bae:	11 92       	st	Z+, r1
     bb0:	2a 95       	dec	r18
     bb2:	e9 f7       	brne	.-6      	; 0xbae <bigSetZero+0x4>
     bb4:	08 95       	ret

00000bb6 <bigAssign>:
     bb6:	dc 01       	movw	r26, r24
     bb8:	90 e2       	ldi	r25, 0x20	; 32
     bba:	fb 01       	movw	r30, r22
     bbc:	01 90       	ld	r0, Z+
     bbe:	0d 92       	st	X+, r0
     bc0:	9a 95       	dec	r25
     bc2:	e1 f7       	brne	.-8      	; 0xbbc <bigAssign+0x6>
     bc4:	08 95       	ret

00000bc6 <swapEndian256>:
     bc6:	fc 01       	movw	r30, r24
     bc8:	b0 96       	adiw	r30, 0x20	; 32
     bca:	dc 01       	movw	r26, r24
     bcc:	ac 01       	movw	r20, r24
     bce:	40 5f       	subi	r20, 0xF0	; 240
     bd0:	5f 4f       	sbci	r21, 0xFF	; 255
     bd2:	9c 91       	ld	r25, X
     bd4:	22 91       	ld	r18, -Z
     bd6:	2d 93       	st	X+, r18
     bd8:	90 83       	st	Z, r25
     bda:	e4 17       	cp	r30, r20
     bdc:	f5 07       	cpc	r31, r21
     bde:	c9 f7       	brne	.-14     	; 0xbd2 <swapEndian256+0xc>
     be0:	08 95       	ret

00000be2 <bigSetField>:
     be2:	90 93 c4 07 	sts	0x07C4, r25	; 0x8007c4 <n+0x1>
     be6:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <n>
     bea:	70 93 c2 07 	sts	0x07C2, r23	; 0x8007c2 <complement_n+0x1>
     bee:	60 93 c1 07 	sts	0x07C1, r22	; 0x8007c1 <complement_n>
     bf2:	40 93 c0 07 	sts	0x07C0, r20	; 0x8007c0 <__data_end>
     bf6:	08 95       	ret

00000bf8 <bigAddVariableSizeNoModulo>:
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
     bfc:	22 23       	and	r18, r18
     bfe:	c9 f0       	breq	.+50     	; 0xc32 <bigAddVariableSizeNoModulo+0x3a>
     c00:	fb 01       	movw	r30, r22
     c02:	c4 2f       	mov	r28, r20
     c04:	d5 2f       	mov	r29, r21
     c06:	a8 2f       	mov	r26, r24
     c08:	b9 2f       	mov	r27, r25
     c0a:	21 50       	subi	r18, 0x01	; 1
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	2f 5f       	subi	r18, 0xFF	; 255
     c10:	3f 4f       	sbci	r19, 0xFF	; 255
     c12:	62 0f       	add	r22, r18
     c14:	73 1f       	adc	r23, r19
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	31 91       	ld	r19, Z+
     c1a:	89 91       	ld	r24, Y+
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	83 0f       	add	r24, r19
     c20:	91 1d       	adc	r25, r1
     c22:	82 0f       	add	r24, r18
     c24:	91 1d       	adc	r25, r1
     c26:	8d 93       	st	X+, r24
     c28:	29 2f       	mov	r18, r25
     c2a:	e6 17       	cp	r30, r22
     c2c:	f7 07       	cpc	r31, r23
     c2e:	a1 f7       	brne	.-24     	; 0xc18 <bigAddVariableSizeNoModulo+0x20>
     c30:	01 c0       	rjmp	.+2      	; 0xc34 <bigAddVariableSizeNoModulo+0x3c>
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	82 2f       	mov	r24, r18
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	08 95       	ret

00000c3c <bigSubtractVariableSizeNoModulo>:
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	22 23       	and	r18, r18
     c42:	d1 f0       	breq	.+52     	; 0xc78 <bigSubtractVariableSizeNoModulo+0x3c>
     c44:	fb 01       	movw	r30, r22
     c46:	c4 2f       	mov	r28, r20
     c48:	d5 2f       	mov	r29, r21
     c4a:	a8 2f       	mov	r26, r24
     c4c:	b9 2f       	mov	r27, r25
     c4e:	21 50       	subi	r18, 0x01	; 1
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	2f 5f       	subi	r18, 0xFF	; 255
     c54:	3f 4f       	sbci	r19, 0xFF	; 255
     c56:	62 0f       	add	r22, r18
     c58:	73 1f       	adc	r23, r19
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	81 91       	ld	r24, Z+
     c5e:	39 91       	ld	r19, Y+
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	83 1b       	sub	r24, r19
     c64:	91 09       	sbc	r25, r1
     c66:	82 1b       	sub	r24, r18
     c68:	91 09       	sbc	r25, r1
     c6a:	8d 93       	st	X+, r24
     c6c:	29 2f       	mov	r18, r25
     c6e:	21 70       	andi	r18, 0x01	; 1
     c70:	e6 17       	cp	r30, r22
     c72:	f7 07       	cpc	r31, r23
     c74:	99 f7       	brne	.-26     	; 0xc5c <bigSubtractVariableSizeNoModulo+0x20>
     c76:	01 c0       	rjmp	.+2      	; 0xc7a <bigSubtractVariableSizeNoModulo+0x3e>
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	82 2f       	mov	r24, r18
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	08 95       	ret

00000c82 <bigSubtractNoModulo>:
     c82:	20 e2       	ldi	r18, 0x20	; 32
     c84:	db cf       	rjmp	.-74     	; 0xc3c <bigSubtractVariableSizeNoModulo>
     c86:	08 95       	ret

00000c88 <bigModulo>:
     c88:	af 92       	push	r10
     c8a:	bf 92       	push	r11
     c8c:	cf 92       	push	r12
     c8e:	df 92       	push	r13
     c90:	ef 92       	push	r14
     c92:	ff 92       	push	r15
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	a4 97       	sbiw	r28, 0x24	; 36
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	f8 94       	cli
     ca6:	de bf       	out	0x3e, r29	; 62
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	cd bf       	out	0x3d, r28	; 61
     cac:	7c 01       	movw	r14, r24
     cae:	8b 01       	movw	r16, r22
     cb0:	6e 01       	movw	r12, r28
     cb2:	85 e0       	ldi	r24, 0x05	; 5
     cb4:	c8 0e       	add	r12, r24
     cb6:	d1 1c       	adc	r13, r1
     cb8:	c6 01       	movw	r24, r12
     cba:	77 df       	rcall	.-274    	; 0xbaa <bigSetZero>
     cbc:	a0 90 c3 07 	lds	r10, 0x07C3	; 0x8007c3 <n>
     cc0:	b0 90 c4 07 	lds	r11, 0x07C4	; 0x8007c4 <n+0x1>
     cc4:	b5 01       	movw	r22, r10
     cc6:	c8 01       	movw	r24, r16
     cc8:	50 df       	rcall	.-352    	; 0xb6a <bigCompare>
     cca:	92 e0       	ldi	r25, 0x02	; 2
     ccc:	89 27       	eor	r24, r25
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	91 95       	neg	r25
     cd2:	81 95       	neg	r24
     cd4:	91 09       	sbc	r25, r1
     cd6:	ba 82       	std	Y+2, r11	; 0x02
     cd8:	a9 82       	std	Y+1, r10	; 0x01
     cda:	dc 82       	std	Y+4, r13	; 0x04
     cdc:	cb 82       	std	Y+3, r12	; 0x03
     cde:	e1 e0       	ldi	r30, 0x01	; 1
     ce0:	e9 0f       	add	r30, r25
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	ee 0f       	add	r30, r30
     ce6:	ff 1f       	adc	r31, r31
     ce8:	ec 0f       	add	r30, r28
     cea:	fd 1f       	adc	r31, r29
     cec:	41 81       	ldd	r20, Z+1	; 0x01
     cee:	52 81       	ldd	r21, Z+2	; 0x02
     cf0:	b8 01       	movw	r22, r16
     cf2:	c7 01       	movw	r24, r14
     cf4:	c6 df       	rcall	.-116    	; 0xc82 <bigSubtractNoModulo>
     cf6:	a4 96       	adiw	r28, 0x24	; 36
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	1f 91       	pop	r17
     d08:	0f 91       	pop	r16
     d0a:	ff 90       	pop	r15
     d0c:	ef 90       	pop	r14
     d0e:	df 90       	pop	r13
     d10:	cf 90       	pop	r12
     d12:	bf 90       	pop	r11
     d14:	af 90       	pop	r10
     d16:	08 95       	ret

00000d18 <bigAdd>:
     d18:	af 92       	push	r10
     d1a:	bf 92       	push	r11
     d1c:	cf 92       	push	r12
     d1e:	df 92       	push	r13
     d20:	ef 92       	push	r14
     d22:	ff 92       	push	r15
     d24:	0f 93       	push	r16
     d26:	1f 93       	push	r17
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	a4 97       	sbiw	r28, 0x24	; 36
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	f8 94       	cli
     d36:	de bf       	out	0x3e, r29	; 62
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	cd bf       	out	0x3d, r28	; 61
     d3c:	7c 01       	movw	r14, r24
     d3e:	6b 01       	movw	r12, r22
     d40:	8a 01       	movw	r16, r20
     d42:	5e 01       	movw	r10, r28
     d44:	85 e0       	ldi	r24, 0x05	; 5
     d46:	a8 0e       	add	r10, r24
     d48:	b1 1c       	adc	r11, r1
     d4a:	c5 01       	movw	r24, r10
     d4c:	2e df       	rcall	.-420    	; 0xbaa <bigSetZero>
     d4e:	20 e2       	ldi	r18, 0x20	; 32
     d50:	a8 01       	movw	r20, r16
     d52:	b6 01       	movw	r22, r12
     d54:	c7 01       	movw	r24, r14
     d56:	50 df       	rcall	.-352    	; 0xbf8 <bigAddVariableSizeNoModulo>
     d58:	18 2f       	mov	r17, r24
     d5a:	c0 90 c3 07 	lds	r12, 0x07C3	; 0x8007c3 <n>
     d5e:	d0 90 c4 07 	lds	r13, 0x07C4	; 0x8007c4 <n+0x1>
     d62:	b6 01       	movw	r22, r12
     d64:	c7 01       	movw	r24, r14
     d66:	01 df       	rcall	.-510    	; 0xb6a <bigCompare>
     d68:	92 e0       	ldi	r25, 0x02	; 2
     d6a:	89 27       	eor	r24, r25
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	91 95       	neg	r25
     d70:	81 95       	neg	r24
     d72:	91 09       	sbc	r25, r1
     d74:	ba 82       	std	Y+2, r11	; 0x02
     d76:	a9 82       	std	Y+1, r10	; 0x01
     d78:	dc 82       	std	Y+4, r13	; 0x04
     d7a:	cb 82       	std	Y+3, r12	; 0x03
     d7c:	e9 2f       	mov	r30, r25
     d7e:	e1 70       	andi	r30, 0x01	; 1
     d80:	1e 2b       	or	r17, r30
     d82:	e1 2f       	mov	r30, r17
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	ee 0f       	add	r30, r30
     d88:	ff 1f       	adc	r31, r31
     d8a:	ec 0f       	add	r30, r28
     d8c:	fd 1f       	adc	r31, r29
     d8e:	41 81       	ldd	r20, Z+1	; 0x01
     d90:	52 81       	ldd	r21, Z+2	; 0x02
     d92:	b7 01       	movw	r22, r14
     d94:	c7 01       	movw	r24, r14
     d96:	75 df       	rcall	.-278    	; 0xc82 <bigSubtractNoModulo>
     d98:	a4 96       	adiw	r28, 0x24	; 36
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	f8 94       	cli
     d9e:	de bf       	out	0x3e, r29	; 62
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	cd bf       	out	0x3d, r28	; 61
     da4:	df 91       	pop	r29
     da6:	cf 91       	pop	r28
     da8:	1f 91       	pop	r17
     daa:	0f 91       	pop	r16
     dac:	ff 90       	pop	r15
     dae:	ef 90       	pop	r14
     db0:	df 90       	pop	r13
     db2:	cf 90       	pop	r12
     db4:	bf 90       	pop	r11
     db6:	af 90       	pop	r10
     db8:	08 95       	ret

00000dba <bigSubtract>:
     dba:	af 92       	push	r10
     dbc:	bf 92       	push	r11
     dbe:	cf 92       	push	r12
     dc0:	df 92       	push	r13
     dc2:	ef 92       	push	r14
     dc4:	ff 92       	push	r15
     dc6:	0f 93       	push	r16
     dc8:	1f 93       	push	r17
     dca:	cf 93       	push	r28
     dcc:	df 93       	push	r29
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	a4 97       	sbiw	r28, 0x24	; 36
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	f8 94       	cli
     dd8:	de bf       	out	0x3e, r29	; 62
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	cd bf       	out	0x3d, r28	; 61
     dde:	8c 01       	movw	r16, r24
     de0:	6b 01       	movw	r12, r22
     de2:	5a 01       	movw	r10, r20
     de4:	7e 01       	movw	r14, r28
     de6:	85 e0       	ldi	r24, 0x05	; 5
     de8:	e8 0e       	add	r14, r24
     dea:	f1 1c       	adc	r15, r1
     dec:	c7 01       	movw	r24, r14
     dee:	dd de       	rcall	.-582    	; 0xbaa <bigSetZero>
     df0:	a5 01       	movw	r20, r10
     df2:	b6 01       	movw	r22, r12
     df4:	c8 01       	movw	r24, r16
     df6:	45 df       	rcall	.-374    	; 0xc82 <bigSubtractNoModulo>
     df8:	fa 82       	std	Y+2, r15	; 0x02
     dfa:	e9 82       	std	Y+1, r14	; 0x01
     dfc:	20 91 c3 07 	lds	r18, 0x07C3	; 0x8007c3 <n>
     e00:	30 91 c4 07 	lds	r19, 0x07C4	; 0x8007c4 <n+0x1>
     e04:	3c 83       	std	Y+4, r19	; 0x04
     e06:	2b 83       	std	Y+3, r18	; 0x03
     e08:	e8 2f       	mov	r30, r24
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	ee 0f       	add	r30, r30
     e0e:	ff 1f       	adc	r31, r31
     e10:	ec 0f       	add	r30, r28
     e12:	fd 1f       	adc	r31, r29
     e14:	41 81       	ldd	r20, Z+1	; 0x01
     e16:	52 81       	ldd	r21, Z+2	; 0x02
     e18:	20 e2       	ldi	r18, 0x20	; 32
     e1a:	b8 01       	movw	r22, r16
     e1c:	c8 01       	movw	r24, r16
     e1e:	ec de       	rcall	.-552    	; 0xbf8 <bigAddVariableSizeNoModulo>
     e20:	a4 96       	adiw	r28, 0x24	; 36
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	f8 94       	cli
     e26:	de bf       	out	0x3e, r29	; 62
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	cd bf       	out	0x3d, r28	; 61
     e2c:	df 91       	pop	r29
     e2e:	cf 91       	pop	r28
     e30:	1f 91       	pop	r17
     e32:	0f 91       	pop	r16
     e34:	ff 90       	pop	r15
     e36:	ef 90       	pop	r14
     e38:	df 90       	pop	r13
     e3a:	cf 90       	pop	r12
     e3c:	bf 90       	pop	r11
     e3e:	af 90       	pop	r10
     e40:	08 95       	ret

00000e42 <bigMultiplyVariableSizeNoModulo>:
  * \warning This function is the speed bottleneck in an ECDSA signing
  *          operation. To speed up ECDSA signing, reimplement this in
  *          assembly and define PLATFORM_SPECIFIC_BIGMULTIPLY.
  */
void bigMultiplyVariableSizeNoModulo(uint8_t *r, uint8_t *op1, uint8_t op1_size, uint8_t *op2, uint8_t op2_size)
{
     e42:	5f 92       	push	r5
     e44:	6f 92       	push	r6
     e46:	7f 92       	push	r7
     e48:	8f 92       	push	r8
     e4a:	9f 92       	push	r9
     e4c:	af 92       	push	r10
     e4e:	bf 92       	push	r11
     e50:	cf 92       	push	r12
     e52:	df 92       	push	r13
     e54:	ef 92       	push	r14
     e56:	ff 92       	push	r15
     e58:	0f 93       	push	r16
     e5a:	1f 93       	push	r17
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
     e60:	b8 2e       	mov	r11, r24
     e62:	d9 2e       	mov	r13, r25
     e64:	eb 01       	movw	r28, r22
     e66:	c4 2e       	mov	r12, r20
     e68:	72 2e       	mov	r7, r18
     e6a:	83 2e       	mov	r8, r19
     e6c:	90 2e       	mov	r9, r16
	uint8_t multiply_result_high8;
	uint16_t partial_sum;
	uint8_t i;
	uint8_t j;

	memset(r, 0, (uint16_t)(op1_size + op2_size));
     e6e:	40 2f       	mov	r20, r16
     e70:	50 e0       	ldi	r21, 0x00	; 0
     e72:	4c 0d       	add	r20, r12
     e74:	51 1d       	adc	r21, r1
     e76:	60 e0       	ldi	r22, 0x00	; 0
     e78:	70 e0       	ldi	r23, 0x00	; 0
     e7a:	0e 94 8c 3e 	call	0x7d18	; 0x7d18 <memset>
	// method. It's also sometimes referred to as "long multiplication". It's
	// the most straightforward method of multiplication.
	// Note that for the operand sizes this function typically deals with,
	// and with the platforms this code is intended to run on, the Karatsuba
	// algorithm isn't significantly better.
	for (i = 0; i < op1_size; i++)
     e7e:	cc 20       	and	r12, r12
     e80:	09 f4       	brne	.+2      	; 0xe84 <bigMultiplyVariableSizeNoModulo+0x42>
     e82:	40 c0       	rjmp	.+128    	; 0xf04 <bigMultiplyVariableSizeNoModulo+0xc2>
     e84:	7e 01       	movw	r14, r28
     e86:	0b 2d       	mov	r16, r11
     e88:	1d 2d       	mov	r17, r13
     e8a:	ca 94       	dec	r12
     e8c:	d1 2c       	mov	r13, r1
     e8e:	8f ef       	ldi	r24, 0xFF	; 255
     e90:	c8 1a       	sub	r12, r24
     e92:	d8 0a       	sbc	r13, r24
     e94:	cc 0e       	add	r12, r28
     e96:	dd 1e       	adc	r13, r29
     e98:	aa 24       	eor	r10, r10
     e9a:	aa 94       	dec	r10
     e9c:	a9 0c       	add	r10, r9
     e9e:	b1 2c       	mov	r11, r1
     ea0:	ef ef       	ldi	r30, 0xFF	; 255
     ea2:	ae 1a       	sub	r10, r30
     ea4:	be 0a       	sbc	r11, r30
	{
		cached_op1 = op1[i];
		high_carry = 0;
		for (j = 0; j < op2_size; j++)
     ea6:	61 2c       	mov	r6, r1
	// Note that for the operand sizes this function typically deals with,
	// and with the platforms this code is intended to run on, the Karatsuba
	// algorithm isn't significantly better.
	for (i = 0; i < op1_size; i++)
	{
		cached_op1 = op1[i];
     ea8:	f7 01       	movw	r30, r14
     eaa:	61 91       	ld	r22, Z+
     eac:	7f 01       	movw	r14, r30
		high_carry = 0;
		for (j = 0; j < op2_size; j++)
     eae:	99 20       	and	r9, r9
     eb0:	21 f1       	breq	.+72     	; 0xefa <bigMultiplyVariableSizeNoModulo+0xb8>
     eb2:	a7 2d       	mov	r26, r7
     eb4:	b8 2d       	mov	r27, r8
     eb6:	e5 01       	movw	r28, r10
     eb8:	c0 0f       	add	r28, r16
     eba:	d1 1f       	adc	r29, r17
     ebc:	f8 01       	movw	r30, r16
     ebe:	46 2d       	mov	r20, r6
		{
			multiply_result16 = (uint16_t)((uint16_t)cached_op1 * (uint16_t)op2[j]);
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	8d 91       	ld	r24, X+
     ec4:	86 9f       	mul	r24, r22
     ec6:	90 01       	movw	r18, r0
     ec8:	87 9f       	mul	r24, r23
     eca:	30 0d       	add	r19, r0
     ecc:	11 24       	eor	r1, r1
			multiply_result_low8 = (uint8_t)multiply_result16;
			multiply_result_high8 = (uint8_t)(multiply_result16 >> 8);
			partial_sum = (uint16_t)((uint16_t)r[i + j] + (uint16_t)multiply_result_low8);
     ece:	80 81       	ld	r24, Z
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	82 0f       	add	r24, r18
     ed4:	91 1d       	adc	r25, r1
			r[i + j] = (uint8_t)partial_sum;
     ed6:	81 93       	st	Z+, r24
			low_carry = (uint8_t)(partial_sum >> 8);
     ed8:	89 2f       	mov	r24, r25
     eda:	99 27       	eor	r25, r25
			partial_sum = (uint16_t)((uint16_t)r[i + j + 1] + (uint16_t)multiply_result_high8 + (uint16_t)low_carry + (uint16_t)high_carry);
     edc:	50 80       	ld	r5, Z
     ede:	50 e0       	ldi	r21, 0x00	; 0
     ee0:	45 0d       	add	r20, r5
     ee2:	51 1d       	adc	r21, r1
     ee4:	23 2f       	mov	r18, r19
     ee6:	33 27       	eor	r19, r19
     ee8:	24 0f       	add	r18, r20
     eea:	35 1f       	adc	r19, r21
     eec:	28 0f       	add	r18, r24
     eee:	39 1f       	adc	r19, r25
			r[i + j + 1] = (uint8_t)partial_sum;
     ef0:	20 83       	st	Z, r18
			high_carry = (uint8_t)(partial_sum >> 8);
     ef2:	43 2f       	mov	r20, r19
	// algorithm isn't significantly better.
	for (i = 0; i < op1_size; i++)
	{
		cached_op1 = op1[i];
		high_carry = 0;
		for (j = 0; j < op2_size; j++)
     ef4:	ec 17       	cp	r30, r28
     ef6:	fd 07       	cpc	r31, r29
     ef8:	21 f7       	brne	.-56     	; 0xec2 <bigMultiplyVariableSizeNoModulo+0x80>
     efa:	0f 5f       	subi	r16, 0xFF	; 255
     efc:	1f 4f       	sbci	r17, 0xFF	; 255
	// method. It's also sometimes referred to as "long multiplication". It's
	// the most straightforward method of multiplication.
	// Note that for the operand sizes this function typically deals with,
	// and with the platforms this code is intended to run on, the Karatsuba
	// algorithm isn't significantly better.
	for (i = 0; i < op1_size; i++)
     efe:	ec 14       	cp	r14, r12
     f00:	fd 04       	cpc	r15, r13
     f02:	91 f6       	brne	.-92     	; 0xea8 <bigMultiplyVariableSizeNoModulo+0x66>
		}
#ifdef TEST
		assert(high_carry == 0);
#endif // #ifdef TEST
	}
}
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
     f08:	1f 91       	pop	r17
     f0a:	0f 91       	pop	r16
     f0c:	ff 90       	pop	r15
     f0e:	ef 90       	pop	r14
     f10:	df 90       	pop	r13
     f12:	cf 90       	pop	r12
     f14:	bf 90       	pop	r11
     f16:	af 90       	pop	r10
     f18:	9f 90       	pop	r9
     f1a:	8f 90       	pop	r8
     f1c:	7f 90       	pop	r7
     f1e:	6f 90       	pop	r6
     f20:	5f 90       	pop	r5
     f22:	08 95       	ret

00000f24 <bigMultiply>:
  * \param op1 The first 32 byte operand to multiply. This may alias r.
  * \param op2 The second 32 byte operand to multiply. This may alias r or
  *            op1.
  */
void bigMultiply(BigNum256 r, BigNum256 op1, BigNum256 op2)
{
     f24:	7f 92       	push	r7
     f26:	8f 92       	push	r8
     f28:	9f 92       	push	r9
     f2a:	af 92       	push	r10
     f2c:	bf 92       	push	r11
     f2e:	cf 92       	push	r12
     f30:	df 92       	push	r13
     f32:	ef 92       	push	r14
     f34:	ff 92       	push	r15
     f36:	0f 93       	push	r16
     f38:	1f 93       	push	r17
     f3a:	cf 93       	push	r28
     f3c:	df 93       	push	r29
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
     f42:	c0 58       	subi	r28, 0x80	; 128
     f44:	d1 09       	sbc	r29, r1
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	4c 01       	movw	r8, r24
     f52:	9a 01       	movw	r18, r20
	uint8_t temp[64];
	uint8_t full_r[64];
	uint8_t remaining;

	bigMultiplyVariableSizeNoModulo(full_r, op1, 32, op2, 32);
     f54:	00 e2       	ldi	r16, 0x20	; 32
     f56:	40 e2       	ldi	r20, 0x20	; 32
     f58:	ce 01       	movw	r24, r28
     f5a:	8f 5b       	subi	r24, 0xBF	; 191
     f5c:	9f 4f       	sbci	r25, 0xFF	; 255
     f5e:	71 df       	rcall	.-286    	; 0xe42 <bigMultiplyVariableSizeNoModulo>
	// However, since n < 2 ^ 256, the estimate will always be an
	// underestimate. That's okay, because the algorithm can be applied
	// repeatedly, until the upper 256 bits of r are zero.
	// remaining denotes the maximum number of possible non-zero bytes left in
	// the result.
	remaining = 64;
     f60:	10 e4       	ldi	r17, 0x40	; 64
	while (remaining > 32)
	{
		memset(temp, 0, 64);
     f62:	68 94       	set
     f64:	77 24       	eor	r7, r7
     f66:	76 f8       	bld	r7, 6
     f68:	ce 01       	movw	r24, r28
     f6a:	01 96       	adiw	r24, 0x01	; 1
     f6c:	6c 01       	movw	r12, r24
		// n should be equal to 2 ^ 256 - complement_n. Therefore, subtracting
		// off (upper 256 bits of r) * n is equivalent to setting the
		// upper 256 bits of r to 0 and
		// adding (upper 256 bits of r) * complement_n.
		bigMultiplyVariableSizeNoModulo(\
     f6e:	0f 2e       	mov	r0, r31
     f70:	f1 e4       	ldi	r31, 0x41	; 65
     f72:	af 2e       	mov	r10, r31
     f74:	b1 2c       	mov	r11, r1
     f76:	f0 2d       	mov	r31, r0
     f78:	ac 0e       	add	r10, r28
     f7a:	bd 1e       	adc	r11, r29
     f7c:	90 e2       	ldi	r25, 0x20	; 32
     f7e:	a9 0e       	add	r10, r25
     f80:	b1 1c       	adc	r11, r1
			temp,
			complement_n, size_complement_n,
			&(full_r[32]), (uint8_t)(remaining - 32));
		memset(&(full_r[32]), 0, 32);
     f82:	68 94       	set
     f84:	ee 24       	eor	r14, r14
     f86:	e5 f8       	bld	r14, 5
	// remaining denotes the maximum number of possible non-zero bytes left in
	// the result.
	remaining = 64;
	while (remaining > 32)
	{
		memset(temp, 0, 64);
     f88:	f6 01       	movw	r30, r12
     f8a:	87 2d       	mov	r24, r7
     f8c:	11 92       	st	Z+, r1
     f8e:	8a 95       	dec	r24
     f90:	e9 f7       	brne	.-6      	; 0xf8c <bigMultiply+0x68>
		// n should be equal to 2 ^ 256 - complement_n. Therefore, subtracting
		// off (upper 256 bits of r) * n is equivalent to setting the
		// upper 256 bits of r to 0 and
		// adding (upper 256 bits of r) * complement_n.
		bigMultiplyVariableSizeNoModulo(\
     f92:	f0 90 c0 07 	lds	r15, 0x07C0	; 0x8007c0 <__data_end>
     f96:	00 ee       	ldi	r16, 0xE0	; 224
     f98:	01 0f       	add	r16, r17
     f9a:	60 91 c1 07 	lds	r22, 0x07C1	; 0x8007c1 <complement_n>
     f9e:	70 91 c2 07 	lds	r23, 0x07C2	; 0x8007c2 <complement_n+0x1>
     fa2:	95 01       	movw	r18, r10
     fa4:	4f 2d       	mov	r20, r15
     fa6:	c6 01       	movw	r24, r12
     fa8:	4c df       	rcall	.-360    	; 0xe42 <bigMultiplyVariableSizeNoModulo>
			temp,
			complement_n, size_complement_n,
			&(full_r[32]), (uint8_t)(remaining - 32));
		memset(&(full_r[32]), 0, 32);
     faa:	f5 01       	movw	r30, r10
     fac:	8e 2d       	mov	r24, r14
     fae:	11 92       	st	Z+, r1
     fb0:	8a 95       	dec	r24
     fb2:	e9 f7       	brne	.-6      	; 0xfae <bigMultiply+0x8a>
		bigAddVariableSizeNoModulo(full_r, full_r, temp, remaining);
     fb4:	21 2f       	mov	r18, r17
     fb6:	a6 01       	movw	r20, r12
     fb8:	be 01       	movw	r22, r28
     fba:	6f 5b       	subi	r22, 0xBF	; 191
     fbc:	7f 4f       	sbci	r23, 0xFF	; 255
     fbe:	cb 01       	movw	r24, r22
     fc0:	1b de       	rcall	.-970    	; 0xbf8 <bigAddVariableSizeNoModulo>
		// This update of the bound is only valid for remaining > 32.
		remaining = (uint8_t)(remaining - 32 + size_complement_n);
     fc2:	80 ee       	ldi	r24, 0xE0	; 224
     fc4:	8f 0d       	add	r24, r15
     fc6:	18 0f       	add	r17, r24
	// underestimate. That's okay, because the algorithm can be applied
	// repeatedly, until the upper 256 bits of r are zero.
	// remaining denotes the maximum number of possible non-zero bytes left in
	// the result.
	remaining = 64;
	while (remaining > 32)
     fc8:	11 32       	cpi	r17, 0x21	; 33
     fca:	f0 f6       	brcc	.-68     	; 0xf88 <bigMultiply+0x64>
		remaining = (uint8_t)(remaining - 32 + size_complement_n);
	}
	// The upper 256 bits of r should now be 0. But r could still be >= n.
	// As long as n > 2 ^ 255, at most one subtraction is
	// required to ensure that r < n.
	bigModulo(full_r, full_r);
     fcc:	be 01       	movw	r22, r28
     fce:	6f 5b       	subi	r22, 0xBF	; 191
     fd0:	7f 4f       	sbci	r23, 0xFF	; 255
     fd2:	cb 01       	movw	r24, r22
     fd4:	59 de       	rcall	.-846    	; 0xc88 <bigModulo>
	bigAssign(r, full_r);
     fd6:	be 01       	movw	r22, r28
     fd8:	6f 5b       	subi	r22, 0xBF	; 191
     fda:	7f 4f       	sbci	r23, 0xFF	; 255
     fdc:	c4 01       	movw	r24, r8
     fde:	eb dd       	rcall	.-1066   	; 0xbb6 <bigAssign>
}
     fe0:	c0 58       	subi	r28, 0x80	; 128
     fe2:	df 4f       	sbci	r29, 0xFF	; 255
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	f8 94       	cli
     fe8:	de bf       	out	0x3e, r29	; 62
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	cd bf       	out	0x3d, r28	; 61
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	1f 91       	pop	r17
     ff4:	0f 91       	pop	r16
     ff6:	ff 90       	pop	r15
     ff8:	ef 90       	pop	r14
     ffa:	df 90       	pop	r13
     ffc:	cf 90       	pop	r12
     ffe:	bf 90       	pop	r11
    1000:	af 90       	pop	r10
    1002:	9f 90       	pop	r9
    1004:	8f 90       	pop	r8
    1006:	7f 90       	pop	r7
    1008:	08 95       	ret

0000100a <bigInvert>:
  * (r x op1) modulo #n = 1).
  * \param r The 32 byte result will be written into here.
  * \param op1 The 32 byte operand to find the inverse of. This may alias r.
  */
void bigInvert(BigNum256 r, BigNum256 op1)
{
    100a:	3f 92       	push	r3
    100c:	4f 92       	push	r4
    100e:	5f 92       	push	r5
    1010:	6f 92       	push	r6
    1012:	7f 92       	push	r7
    1014:	8f 92       	push	r8
    1016:	9f 92       	push	r9
    1018:	af 92       	push	r10
    101a:	bf 92       	push	r11
    101c:	cf 92       	push	r12
    101e:	df 92       	push	r13
    1020:	ef 92       	push	r14
    1022:	ff 92       	push	r15
    1024:	0f 93       	push	r16
    1026:	1f 93       	push	r17
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	a4 97       	sbiw	r28, 0x24	; 36
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	5c 01       	movw	r10, r24
	uint8_t *lookup[2];

	// This uses Fermat's Little Theorem, of which an immediate corollary is:
	// a ^ (p - 2) = a ^ (-1) modulo n.
	// The Montgomery ladder method is used to perform the exponentiation.
	bigAssign(temp, op1);
    103e:	8e 01       	movw	r16, r28
    1040:	0f 5f       	subi	r16, 0xFF	; 255
    1042:	1f 4f       	sbci	r17, 0xFF	; 255
    1044:	c8 01       	movw	r24, r16
    1046:	b7 dd       	rcall	.-1170   	; 0xbb6 <bigAssign>
	bigSetZero(r);
    1048:	c5 01       	movw	r24, r10
    104a:	af dd       	rcall	.-1186   	; 0xbaa <bigSetZero>
	r[0] = 1;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	f5 01       	movw	r30, r10
    1050:	80 83       	st	Z, r24
	lookup[0] = r;
    1052:	ba a2       	std	Y+34, r11	; 0x22
    1054:	a9 a2       	std	Y+33, r10	; 0x21
	lookup[1] = temp;
    1056:	1c a3       	std	Y+36, r17	; 0x24
    1058:	0b a3       	std	Y+35, r16	; 0x23
	for (i = 31; i < 32; i--)
	{
		byte_of_n_minus_2 = n[i];
    105a:	80 90 c3 07 	lds	r8, 0x07C3	; 0x8007c3 <n>
    105e:	90 90 c4 07 	lds	r9, 0x07C4	; 0x8007c4 <n+0x1>
    1062:	f4 01       	movw	r30, r8
    1064:	f7 8c       	ldd	r15, Z+31	; 0x1f
	bigAssign(temp, op1);
	bigSetZero(r);
	r[0] = 1;
	lookup[0] = r;
	lookup[1] = temp;
	for (i = 31; i < 32; i--)
    1066:	0f 2e       	mov	r0, r31
    1068:	ff e1       	ldi	r31, 0x1F	; 31
    106a:	3f 2e       	mov	r3, r31
    106c:	f0 2d       	mov	r31, r0
			// else
			// {
			//     bigMultiply(temp, r, temp);
			//     bigMultiply(r, r, r);
			// }
			bigMultiply(lookup[1 - bit_of_n_minus_2], r, temp);
    106e:	66 24       	eor	r6, r6
    1070:	63 94       	inc	r6
    1072:	71 2c       	mov	r7, r1
    1074:	68 01       	movw	r12, r16
    1076:	40 2e       	mov	r4, r16
    1078:	5d 2c       	mov	r5, r13
    107a:	2e c0       	rjmp	.+92     	; 0x10d8 <bigInvert+0xce>
	r[0] = 1;
	lookup[0] = r;
	lookup[1] = temp;
	for (i = 31; i < 32; i--)
	{
		byte_of_n_minus_2 = n[i];
    107c:	f4 01       	movw	r30, r8
    107e:	e3 0d       	add	r30, r3
    1080:	f1 1d       	adc	r31, r1
    1082:	f0 80       	ld	r15, Z
		if (i == 0)
    1084:	31 10       	cpse	r3, r1
    1086:	28 c0       	rjmp	.+80     	; 0x10d8 <bigInvert+0xce>
		{
			byte_of_n_minus_2 = (uint8_t)(byte_of_n_minus_2 - 2);
    1088:	fa 94       	dec	r15
    108a:	fa 94       	dec	r15
    108c:	25 c0       	rjmp	.+74     	; 0x10d8 <bigInvert+0xce>
			// else
			// {
			//     bigMultiply(temp, r, temp);
			//     bigMultiply(r, r, r);
			// }
			bigMultiply(lookup[1 - bit_of_n_minus_2], r, temp);
    108e:	0f 2d       	mov	r16, r15
    1090:	00 1f       	adc	r16, r16
    1092:	00 27       	eor	r16, r16
    1094:	00 1f       	adc	r16, r16
    1096:	10 e0       	ldi	r17, 0x00	; 0
    1098:	ff 0c       	add	r15, r15
    109a:	f3 01       	movw	r30, r6
    109c:	e0 1b       	sub	r30, r16
    109e:	f1 0b       	sbc	r31, r17
    10a0:	ee 0f       	add	r30, r30
    10a2:	ff 1f       	adc	r31, r31
    10a4:	ec 0d       	add	r30, r12
    10a6:	fd 1d       	adc	r31, r13
    10a8:	44 2d       	mov	r20, r4
    10aa:	55 2d       	mov	r21, r5
    10ac:	b5 01       	movw	r22, r10
    10ae:	80 a1       	ldd	r24, Z+32	; 0x20
    10b0:	91 a1       	ldd	r25, Z+33	; 0x21
    10b2:	38 df       	rcall	.-400    	; 0xf24 <bigMultiply>
			bigMultiply(lookup[bit_of_n_minus_2], lookup[bit_of_n_minus_2], lookup[bit_of_n_minus_2]);
    10b4:	00 0f       	add	r16, r16
    10b6:	11 1f       	adc	r17, r17
    10b8:	f6 01       	movw	r30, r12
    10ba:	e0 0f       	add	r30, r16
    10bc:	f1 1f       	adc	r31, r17
    10be:	80 a1       	ldd	r24, Z+32	; 0x20
    10c0:	91 a1       	ldd	r25, Z+33	; 0x21
    10c2:	ac 01       	movw	r20, r24
    10c4:	bc 01       	movw	r22, r24
    10c6:	2e df       	rcall	.-420    	; 0xf24 <bigMultiply>
    10c8:	ea 94       	dec	r14
		byte_of_n_minus_2 = n[i];
		if (i == 0)
		{
			byte_of_n_minus_2 = (uint8_t)(byte_of_n_minus_2 - 2);
		}
		for (j = 0; j < 8; j++)
    10ca:	e1 10       	cpse	r14, r1
    10cc:	e0 cf       	rjmp	.-64     	; 0x108e <bigInvert+0x84>
	bigAssign(temp, op1);
	bigSetZero(r);
	r[0] = 1;
	lookup[0] = r;
	lookup[1] = temp;
	for (i = 31; i < 32; i--)
    10ce:	3a 94       	dec	r3
    10d0:	9f ef       	ldi	r25, 0xFF	; 255
    10d2:	39 12       	cpse	r3, r25
    10d4:	d3 cf       	rjmp	.-90     	; 0x107c <bigInvert+0x72>
    10d6:	04 c0       	rjmp	.+8      	; 0x10e0 <bigInvert+0xd6>
  * (r x op1) modulo #n = 1).
  * \param r The 32 byte result will be written into here.
  * \param op1 The 32 byte operand to find the inverse of. This may alias r.
  */
void bigInvert(BigNum256 r, BigNum256 op1)
{
    10d8:	68 94       	set
    10da:	ee 24       	eor	r14, r14
    10dc:	e3 f8       	bld	r14, 3
    10de:	d7 cf       	rjmp	.-82     	; 0x108e <bigInvert+0x84>
			// }
			bigMultiply(lookup[1 - bit_of_n_minus_2], r, temp);
			bigMultiply(lookup[bit_of_n_minus_2], lookup[bit_of_n_minus_2], lookup[bit_of_n_minus_2]);
		}
	}
}
    10e0:	a4 96       	adiw	r28, 0x24	; 36
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	f8 94       	cli
    10e6:	de bf       	out	0x3e, r29	; 62
    10e8:	0f be       	out	0x3f, r0	; 63
    10ea:	cd bf       	out	0x3d, r28	; 61
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	1f 91       	pop	r17
    10f2:	0f 91       	pop	r16
    10f4:	ff 90       	pop	r15
    10f6:	ef 90       	pop	r14
    10f8:	df 90       	pop	r13
    10fa:	cf 90       	pop	r12
    10fc:	bf 90       	pop	r11
    10fe:	af 90       	pop	r10
    1100:	9f 90       	pop	r9
    1102:	8f 90       	pop	r8
    1104:	7f 90       	pop	r7
    1106:	6f 90       	pop	r6
    1108:	5f 90       	pop	r5
    110a:	4f 90       	pop	r4
    110c:	3f 90       	pop	r3
    110e:	08 95       	ret

00001110 <pointDouble>:
		{
			bigSubtractNoModulo(s, (BigNum256)secp256k1_n, s);
		}
		break;
	}
}
    1110:	cf 92       	push	r12
    1112:	df 92       	push	r13
    1114:	ef 92       	push	r14
    1116:	ff 92       	push	r15
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	c0 54       	subi	r28, 0x40	; 64
    1126:	d1 09       	sbc	r29, r1
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	cd bf       	out	0x3d, r28	; 61
    1132:	7c 01       	movw	r14, r24
    1134:	8c 01       	movw	r16, r24
    1136:	00 5e       	subi	r16, 0xE0	; 224
    1138:	1f 4f       	sbci	r17, 0xFF	; 255
    113a:	c8 01       	movw	r24, r16
    113c:	33 dd       	rcall	.-1434   	; 0xba4 <bigIsZero>
    113e:	f7 01       	movw	r30, r14
    1140:	e0 5a       	subi	r30, 0xA0	; 160
    1142:	ff 4f       	sbci	r31, 0xFF	; 255
    1144:	90 81       	ld	r25, Z
    1146:	89 2b       	or	r24, r25
    1148:	80 83       	st	Z, r24
    114a:	67 01       	movw	r12, r14
    114c:	80 e4       	ldi	r24, 0x40	; 64
    114e:	c8 0e       	add	r12, r24
    1150:	d1 1c       	adc	r13, r1
    1152:	a8 01       	movw	r20, r16
    1154:	b6 01       	movw	r22, r12
    1156:	c6 01       	movw	r24, r12
    1158:	e5 de       	rcall	.-566    	; 0xf24 <bigMultiply>
    115a:	a6 01       	movw	r20, r12
    115c:	b6 01       	movw	r22, r12
    115e:	c6 01       	movw	r24, r12
    1160:	db dd       	rcall	.-1098   	; 0xd18 <bigAdd>
    1162:	a8 01       	movw	r20, r16
    1164:	b8 01       	movw	r22, r16
    1166:	c8 01       	movw	r24, r16
    1168:	dd de       	rcall	.-582    	; 0xf24 <bigMultiply>
    116a:	a7 01       	movw	r20, r14
    116c:	b8 01       	movw	r22, r16
    116e:	ce 01       	movw	r24, r28
    1170:	01 96       	adiw	r24, 0x01	; 1
    1172:	d8 de       	rcall	.-592    	; 0xf24 <bigMultiply>
    1174:	ae 01       	movw	r20, r28
    1176:	4f 5f       	subi	r20, 0xFF	; 255
    1178:	5f 4f       	sbci	r21, 0xFF	; 255
    117a:	ba 01       	movw	r22, r20
    117c:	ca 01       	movw	r24, r20
    117e:	cc dd       	rcall	.-1128   	; 0xd18 <bigAdd>
    1180:	ae 01       	movw	r20, r28
    1182:	4f 5f       	subi	r20, 0xFF	; 255
    1184:	5f 4f       	sbci	r21, 0xFF	; 255
    1186:	ba 01       	movw	r22, r20
    1188:	ca 01       	movw	r24, r20
    118a:	c6 dd       	rcall	.-1140   	; 0xd18 <bigAdd>
    118c:	a7 01       	movw	r20, r14
    118e:	b7 01       	movw	r22, r14
    1190:	c7 01       	movw	r24, r14
    1192:	c8 de       	rcall	.-624    	; 0xf24 <bigMultiply>
    1194:	b7 01       	movw	r22, r14
    1196:	ce 01       	movw	r24, r28
    1198:	81 96       	adiw	r24, 0x21	; 33
    119a:	0d dd       	rcall	.-1510   	; 0xbb6 <bigAssign>
    119c:	ae 01       	movw	r20, r28
    119e:	4f 5d       	subi	r20, 0xDF	; 223
    11a0:	5f 4f       	sbci	r21, 0xFF	; 255
    11a2:	ba 01       	movw	r22, r20
    11a4:	ca 01       	movw	r24, r20
    11a6:	b8 dd       	rcall	.-1168   	; 0xd18 <bigAdd>
    11a8:	a7 01       	movw	r20, r14
    11aa:	be 01       	movw	r22, r28
    11ac:	6f 5d       	subi	r22, 0xDF	; 223
    11ae:	7f 4f       	sbci	r23, 0xFF	; 255
    11b0:	cb 01       	movw	r24, r22
    11b2:	b2 dd       	rcall	.-1180   	; 0xd18 <bigAdd>
    11b4:	ae 01       	movw	r20, r28
    11b6:	4f 5d       	subi	r20, 0xDF	; 223
    11b8:	5f 4f       	sbci	r21, 0xFF	; 255
    11ba:	ba 01       	movw	r22, r20
    11bc:	c7 01       	movw	r24, r14
    11be:	b2 de       	rcall	.-668    	; 0xf24 <bigMultiply>
    11c0:	ae 01       	movw	r20, r28
    11c2:	4f 5f       	subi	r20, 0xFF	; 255
    11c4:	5f 4f       	sbci	r21, 0xFF	; 255
    11c6:	b7 01       	movw	r22, r14
    11c8:	c7 01       	movw	r24, r14
    11ca:	f7 dd       	rcall	.-1042   	; 0xdba <bigSubtract>
    11cc:	ae 01       	movw	r20, r28
    11ce:	4f 5f       	subi	r20, 0xFF	; 255
    11d0:	5f 4f       	sbci	r21, 0xFF	; 255
    11d2:	b7 01       	movw	r22, r14
    11d4:	c7 01       	movw	r24, r14
    11d6:	f1 dd       	rcall	.-1054   	; 0xdba <bigSubtract>
    11d8:	a7 01       	movw	r20, r14
    11da:	be 01       	movw	r22, r28
    11dc:	6f 5f       	subi	r22, 0xFF	; 255
    11de:	7f 4f       	sbci	r23, 0xFF	; 255
    11e0:	cb 01       	movw	r24, r22
    11e2:	eb dd       	rcall	.-1066   	; 0xdba <bigSubtract>
    11e4:	ae 01       	movw	r20, r28
    11e6:	4f 5d       	subi	r20, 0xDF	; 223
    11e8:	5f 4f       	sbci	r21, 0xFF	; 255
    11ea:	be 01       	movw	r22, r28
    11ec:	6f 5f       	subi	r22, 0xFF	; 255
    11ee:	7f 4f       	sbci	r23, 0xFF	; 255
    11f0:	cb 01       	movw	r24, r22
    11f2:	98 de       	rcall	.-720    	; 0xf24 <bigMultiply>
    11f4:	a8 01       	movw	r20, r16
    11f6:	b8 01       	movw	r22, r16
    11f8:	c8 01       	movw	r24, r16
    11fa:	94 de       	rcall	.-728    	; 0xf24 <bigMultiply>
    11fc:	a8 01       	movw	r20, r16
    11fe:	b8 01       	movw	r22, r16
    1200:	c8 01       	movw	r24, r16
    1202:	8a dd       	rcall	.-1260   	; 0xd18 <bigAdd>
    1204:	a8 01       	movw	r20, r16
    1206:	b8 01       	movw	r22, r16
    1208:	c8 01       	movw	r24, r16
    120a:	86 dd       	rcall	.-1268   	; 0xd18 <bigAdd>
    120c:	a8 01       	movw	r20, r16
    120e:	b8 01       	movw	r22, r16
    1210:	c8 01       	movw	r24, r16
    1212:	82 dd       	rcall	.-1276   	; 0xd18 <bigAdd>
    1214:	a8 01       	movw	r20, r16
    1216:	be 01       	movw	r22, r28
    1218:	6f 5f       	subi	r22, 0xFF	; 255
    121a:	7f 4f       	sbci	r23, 0xFF	; 255
    121c:	c8 01       	movw	r24, r16
    121e:	cd dd       	rcall	.-1126   	; 0xdba <bigSubtract>
    1220:	c0 5c       	subi	r28, 0xC0	; 192
    1222:	df 4f       	sbci	r29, 0xFF	; 255
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	1f 91       	pop	r17
    1234:	0f 91       	pop	r16
    1236:	ff 90       	pop	r15
    1238:	ef 90       	pop	r14
    123a:	df 90       	pop	r13
    123c:	cf 90       	pop	r12
    123e:	08 95       	ret

00001240 <pointAdd>:
    1240:	4f 92       	push	r4
    1242:	5f 92       	push	r5
    1244:	6f 92       	push	r6
    1246:	7f 92       	push	r7
    1248:	8f 92       	push	r8
    124a:	9f 92       	push	r9
    124c:	af 92       	push	r10
    124e:	bf 92       	push	r11
    1250:	cf 92       	push	r12
    1252:	df 92       	push	r13
    1254:	ef 92       	push	r14
    1256:	ff 92       	push	r15
    1258:	0f 93       	push	r16
    125a:	1f 93       	push	r17
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
    1264:	c4 58       	subi	r28, 0x84	; 132
    1266:	d1 09       	sbc	r29, r1
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	f8 94       	cli
    126c:	de bf       	out	0x3e, r29	; 62
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	cd bf       	out	0x3d, r28	; 61
    1272:	6a 01       	movw	r12, r20
    1274:	cf 57       	subi	r28, 0x7F	; 127
    1276:	df 4f       	sbci	r29, 0xFF	; 255
    1278:	99 83       	std	Y+1, r25	; 0x01
    127a:	88 83       	st	Y, r24
    127c:	c1 58       	subi	r28, 0x81	; 129
    127e:	d0 40       	sbci	r29, 0x00	; 0
    1280:	cd 57       	subi	r28, 0x7D	; 125
    1282:	df 4f       	sbci	r29, 0xFF	; 255
    1284:	79 83       	std	Y+1, r23	; 0x01
    1286:	68 83       	st	Y, r22
    1288:	c3 58       	subi	r28, 0x83	; 131
    128a:	d0 40       	sbci	r29, 0x00	; 0
    128c:	fc 01       	movw	r30, r24
    128e:	e0 5a       	subi	r30, 0xA0	; 160
    1290:	ff 4f       	sbci	r31, 0xFF	; 255
    1292:	60 80       	ld	r6, Z
    1294:	71 2c       	mov	r7, r1
    1296:	71 94       	neg	r7
    1298:	61 94       	neg	r6
    129a:	71 08       	sbc	r7, r1
    129c:	07 2d       	mov	r16, r7
    129e:	01 70       	andi	r16, 0x01	; 1
    12a0:	10 e0       	ldi	r17, 0x00	; 0
    12a2:	e1 e0       	ldi	r30, 0x01	; 1
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	e0 1b       	sub	r30, r16
    12a8:	f1 0b       	sbc	r31, r17
    12aa:	ee 0f       	add	r30, r30
    12ac:	ff 1f       	adc	r31, r31
    12ae:	81 e8       	ldi	r24, 0x81	; 129
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	8c 0f       	add	r24, r28
    12b4:	9d 1f       	adc	r25, r29
    12b6:	e8 0f       	add	r30, r24
    12b8:	f9 1f       	adc	r31, r25
    12ba:	e0 80       	ld	r14, Z
    12bc:	f1 80       	ldd	r15, Z+1	; 0x01
    12be:	4a 01       	movw	r8, r20
    12c0:	90 e4       	ldi	r25, 0x40	; 64
    12c2:	89 0e       	add	r8, r25
    12c4:	91 1c       	adc	r9, r1
    12c6:	f4 01       	movw	r30, r8
    12c8:	80 81       	ld	r24, Z
    12ca:	f7 01       	movw	r30, r14
    12cc:	e0 5a       	subi	r30, 0xA0	; 160
    12ce:	ff 4f       	sbci	r31, 0xFF	; 255
    12d0:	80 83       	st	Z, r24
    12d2:	ba 01       	movw	r22, r20
    12d4:	c7 01       	movw	r24, r14
    12d6:	6f dc       	rcall	.-1826   	; 0xbb6 <bigAssign>
    12d8:	56 01       	movw	r10, r12
    12da:	f0 e2       	ldi	r31, 0x20	; 32
    12dc:	af 0e       	add	r10, r31
    12de:	b1 1c       	adc	r11, r1
    12e0:	b5 01       	movw	r22, r10
    12e2:	c7 01       	movw	r24, r14
    12e4:	80 96       	adiw	r24, 0x20	; 32
    12e6:	67 dc       	rcall	.-1842   	; 0xbb6 <bigAssign>
    12e8:	80 e4       	ldi	r24, 0x40	; 64
    12ea:	e8 0e       	add	r14, r24
    12ec:	f1 1c       	adc	r15, r1
    12ee:	c7 01       	movw	r24, r14
    12f0:	5c dc       	rcall	.-1864   	; 0xbaa <bigSetZero>
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	f7 01       	movw	r30, r14
    12f6:	80 83       	st	Z, r24
    12f8:	00 0f       	add	r16, r16
    12fa:	11 1f       	adc	r17, r17
    12fc:	e1 e8       	ldi	r30, 0x81	; 129
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	ec 0f       	add	r30, r28
    1302:	fd 1f       	adc	r31, r29
    1304:	e0 0f       	add	r30, r16
    1306:	f1 1f       	adc	r31, r17
    1308:	80 81       	ld	r24, Z
    130a:	91 81       	ldd	r25, Z+1	; 0x01
    130c:	cf 57       	subi	r28, 0x7F	; 127
    130e:	df 4f       	sbci	r29, 0xFF	; 255
    1310:	99 83       	std	Y+1, r25	; 0x01
    1312:	88 83       	st	Y, r24
    1314:	c1 58       	subi	r28, 0x81	; 129
    1316:	d0 40       	sbci	r29, 0x00	; 0
    1318:	f4 01       	movw	r30, r8
    131a:	e0 80       	ld	r14, Z
    131c:	f1 2c       	mov	r15, r1
    131e:	f1 94       	neg	r15
    1320:	e1 94       	neg	r14
    1322:	f1 08       	sbc	r15, r1
    1324:	f0 fa       	bst	r15, 0
    1326:	44 24       	eor	r4, r4
    1328:	40 f8       	bld	r4, 0
    132a:	51 2c       	mov	r5, r1
    132c:	44 0c       	add	r4, r4
    132e:	55 1c       	adc	r5, r5
    1330:	e1 e8       	ldi	r30, 0x81	; 129
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	ec 0f       	add	r30, r28
    1336:	fd 1f       	adc	r31, r29
    1338:	e4 0d       	add	r30, r4
    133a:	f5 1d       	adc	r31, r5
    133c:	00 81       	ld	r16, Z
    133e:	11 81       	ldd	r17, Z+1	; 0x01
    1340:	48 01       	movw	r8, r16
    1342:	f0 e4       	ldi	r31, 0x40	; 64
    1344:	8f 0e       	add	r8, r31
    1346:	91 1c       	adc	r9, r1
    1348:	a4 01       	movw	r20, r8
    134a:	b4 01       	movw	r22, r8
    134c:	ce 01       	movw	r24, r28
    134e:	01 96       	adiw	r24, 0x01	; 1
    1350:	e9 dd       	rcall	.-1070   	; 0xf24 <bigMultiply>
    1352:	a4 01       	movw	r20, r8
    1354:	be 01       	movw	r22, r28
    1356:	6f 5f       	subi	r22, 0xFF	; 255
    1358:	7f 4f       	sbci	r23, 0xFF	; 255
    135a:	ce 01       	movw	r24, r28
    135c:	81 96       	adiw	r24, 0x21	; 33
    135e:	e2 dd       	rcall	.-1084   	; 0xf24 <bigMultiply>
    1360:	a5 01       	movw	r20, r10
    1362:	be 01       	movw	r22, r28
    1364:	6f 5d       	subi	r22, 0xDF	; 223
    1366:	7f 4f       	sbci	r23, 0xFF	; 255
    1368:	cb 01       	movw	r24, r22
    136a:	dc dd       	rcall	.-1096   	; 0xf24 <bigMultiply>
    136c:	a6 01       	movw	r20, r12
    136e:	be 01       	movw	r22, r28
    1370:	6f 5f       	subi	r22, 0xFF	; 255
    1372:	7f 4f       	sbci	r23, 0xFF	; 255
    1374:	cb 01       	movw	r24, r22
    1376:	d6 dd       	rcall	.-1108   	; 0xf24 <bigMultiply>
    1378:	be 01       	movw	r22, r28
    137a:	6f 5f       	subi	r22, 0xFF	; 255
    137c:	7f 4f       	sbci	r23, 0xFF	; 255
    137e:	c8 01       	movw	r24, r16
    1380:	f4 db       	rcall	.-2072   	; 0xb6a <bigCompare>
    1382:	c8 2e       	mov	r12, r24
    1384:	d1 2c       	mov	r13, r1
    1386:	d1 94       	neg	r13
    1388:	c1 94       	neg	r12
    138a:	d1 08       	sbc	r13, r1
    138c:	58 01       	movw	r10, r16
    138e:	80 e2       	ldi	r24, 0x20	; 32
    1390:	a8 0e       	add	r10, r24
    1392:	b1 1c       	adc	r11, r1
    1394:	be 01       	movw	r22, r28
    1396:	6f 5d       	subi	r22, 0xDF	; 223
    1398:	7f 4f       	sbci	r23, 0xFF	; 255
    139a:	c5 01       	movw	r24, r10
    139c:	e6 db       	rcall	.-2100   	; 0xb6a <bigCompare>
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	91 95       	neg	r25
    13a2:	81 95       	neg	r24
    13a4:	91 09       	sbc	r25, r1
    13a6:	2f 2d       	mov	r18, r15
    13a8:	27 29       	or	r18, r7
    13aa:	21 70       	andi	r18, 0x01	; 1
    13ac:	39 2f       	mov	r19, r25
    13ae:	3d 29       	or	r19, r13
    13b0:	23 2b       	or	r18, r19
    13b2:	19 f4       	brne	.+6      	; 0x13ba <pointAdd+0x17a>
    13b4:	c8 01       	movw	r24, r16
    13b6:	ac de       	rcall	.-680    	; 0x1110 <pointDouble>
    13b8:	68 c0       	rjmp	.+208    	; 0x148a <pointAdd+0x24a>
    13ba:	f8 01       	movw	r30, r16
    13bc:	e0 5a       	subi	r30, 0xA0	; 160
    13be:	ff 4f       	sbci	r31, 0xFF	; 255
    13c0:	91 70       	andi	r25, 0x01	; 1
    13c2:	8d 2d       	mov	r24, r13
    13c4:	80 95       	com	r24
    13c6:	89 23       	and	r24, r25
    13c8:	90 81       	ld	r25, Z
    13ca:	89 2b       	or	r24, r25
    13cc:	80 83       	st	Z, r24
    13ce:	a8 01       	movw	r20, r16
    13d0:	be 01       	movw	r22, r28
    13d2:	6f 5f       	subi	r22, 0xFF	; 255
    13d4:	7f 4f       	sbci	r23, 0xFF	; 255
    13d6:	cb 01       	movw	r24, r22
    13d8:	f0 dc       	rcall	.-1568   	; 0xdba <bigSubtract>
    13da:	a5 01       	movw	r20, r10
    13dc:	be 01       	movw	r22, r28
    13de:	6f 5d       	subi	r22, 0xDF	; 223
    13e0:	7f 4f       	sbci	r23, 0xFF	; 255
    13e2:	cb 01       	movw	r24, r22
    13e4:	ea dc       	rcall	.-1580   	; 0xdba <bigSubtract>
    13e6:	ae 01       	movw	r20, r28
    13e8:	4f 5f       	subi	r20, 0xFF	; 255
    13ea:	5f 4f       	sbci	r21, 0xFF	; 255
    13ec:	b4 01       	movw	r22, r8
    13ee:	c4 01       	movw	r24, r8
    13f0:	99 dd       	rcall	.-1230   	; 0xf24 <bigMultiply>
    13f2:	ae 01       	movw	r20, r28
    13f4:	4f 5f       	subi	r20, 0xFF	; 255
    13f6:	5f 4f       	sbci	r21, 0xFF	; 255
    13f8:	ba 01       	movw	r22, r20
    13fa:	ce 01       	movw	r24, r28
    13fc:	8f 59       	subi	r24, 0x9F	; 159
    13fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1400:	91 dd       	rcall	.-1246   	; 0xf24 <bigMultiply>
    1402:	a8 01       	movw	r20, r16
    1404:	be 01       	movw	r22, r28
    1406:	6f 59       	subi	r22, 0x9F	; 159
    1408:	7f 4f       	sbci	r23, 0xFF	; 255
    140a:	ce 01       	movw	r24, r28
    140c:	8f 5b       	subi	r24, 0xBF	; 191
    140e:	9f 4f       	sbci	r25, 0xFF	; 255
    1410:	89 dd       	rcall	.-1262   	; 0xf24 <bigMultiply>
    1412:	ae 01       	movw	r20, r28
    1414:	4f 5d       	subi	r20, 0xDF	; 223
    1416:	5f 4f       	sbci	r21, 0xFF	; 255
    1418:	ba 01       	movw	r22, r20
    141a:	c8 01       	movw	r24, r16
    141c:	83 dd       	rcall	.-1274   	; 0xf24 <bigMultiply>
    141e:	ae 01       	movw	r20, r28
    1420:	4f 59       	subi	r20, 0x9F	; 159
    1422:	5f 4f       	sbci	r21, 0xFF	; 255
    1424:	be 01       	movw	r22, r28
    1426:	6f 5f       	subi	r22, 0xFF	; 255
    1428:	7f 4f       	sbci	r23, 0xFF	; 255
    142a:	cb 01       	movw	r24, r22
    142c:	7b dd       	rcall	.-1290   	; 0xf24 <bigMultiply>
    142e:	ae 01       	movw	r20, r28
    1430:	4f 5f       	subi	r20, 0xFF	; 255
    1432:	5f 4f       	sbci	r21, 0xFF	; 255
    1434:	b8 01       	movw	r22, r16
    1436:	c8 01       	movw	r24, r16
    1438:	c0 dc       	rcall	.-1664   	; 0xdba <bigSubtract>
    143a:	ae 01       	movw	r20, r28
    143c:	4f 5b       	subi	r20, 0xBF	; 191
    143e:	5f 4f       	sbci	r21, 0xFF	; 255
    1440:	b8 01       	movw	r22, r16
    1442:	c8 01       	movw	r24, r16
    1444:	ba dc       	rcall	.-1676   	; 0xdba <bigSubtract>
    1446:	ae 01       	movw	r20, r28
    1448:	4f 5b       	subi	r20, 0xBF	; 191
    144a:	5f 4f       	sbci	r21, 0xFF	; 255
    144c:	b8 01       	movw	r22, r16
    144e:	c8 01       	movw	r24, r16
    1450:	b4 dc       	rcall	.-1688   	; 0xdba <bigSubtract>
    1452:	a8 01       	movw	r20, r16
    1454:	be 01       	movw	r22, r28
    1456:	6f 5b       	subi	r22, 0xBF	; 191
    1458:	7f 4f       	sbci	r23, 0xFF	; 255
    145a:	cb 01       	movw	r24, r22
    145c:	ae dc       	rcall	.-1700   	; 0xdba <bigSubtract>
    145e:	ae 01       	movw	r20, r28
    1460:	4f 5d       	subi	r20, 0xDF	; 223
    1462:	5f 4f       	sbci	r21, 0xFF	; 255
    1464:	be 01       	movw	r22, r28
    1466:	6f 5b       	subi	r22, 0xBF	; 191
    1468:	7f 4f       	sbci	r23, 0xFF	; 255
    146a:	cb 01       	movw	r24, r22
    146c:	5b dd       	rcall	.-1354   	; 0xf24 <bigMultiply>
    146e:	a5 01       	movw	r20, r10
    1470:	be 01       	movw	r22, r28
    1472:	6f 5f       	subi	r22, 0xFF	; 255
    1474:	7f 4f       	sbci	r23, 0xFF	; 255
    1476:	cb 01       	movw	r24, r22
    1478:	55 dd       	rcall	.-1366   	; 0xf24 <bigMultiply>
    147a:	ae 01       	movw	r20, r28
    147c:	4f 5f       	subi	r20, 0xFF	; 255
    147e:	5f 4f       	sbci	r21, 0xFF	; 255
    1480:	be 01       	movw	r22, r28
    1482:	6f 5b       	subi	r22, 0xBF	; 191
    1484:	7f 4f       	sbci	r23, 0xFF	; 255
    1486:	c5 01       	movw	r24, r10
    1488:	98 dc       	rcall	.-1744   	; 0xdba <bigSubtract>
    148a:	cc 57       	subi	r28, 0x7C	; 124
    148c:	df 4f       	sbci	r29, 0xFF	; 255
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
    1498:	df 91       	pop	r29
    149a:	cf 91       	pop	r28
    149c:	1f 91       	pop	r17
    149e:	0f 91       	pop	r16
    14a0:	ff 90       	pop	r15
    14a2:	ef 90       	pop	r14
    14a4:	df 90       	pop	r13
    14a6:	cf 90       	pop	r12
    14a8:	bf 90       	pop	r11
    14aa:	af 90       	pop	r10
    14ac:	9f 90       	pop	r9
    14ae:	8f 90       	pop	r8
    14b0:	7f 90       	pop	r7
    14b2:	6f 90       	pop	r6
    14b4:	5f 90       	pop	r5
    14b6:	4f 90       	pop	r4
    14b8:	08 95       	ret

000014ba <jacobianToAffine>:
    14ba:	cf 92       	push	r12
    14bc:	df 92       	push	r13
    14be:	ef 92       	push	r14
    14c0:	ff 92       	push	r15
    14c2:	0f 93       	push	r16
    14c4:	1f 93       	push	r17
    14c6:	cf 93       	push	r28
    14c8:	df 93       	push	r29
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	c0 54       	subi	r28, 0x40	; 64
    14d0:	d1 09       	sbc	r29, r1
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	f8 94       	cli
    14d6:	de bf       	out	0x3e, r29	; 62
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	cd bf       	out	0x3d, r28	; 61
    14dc:	7c 01       	movw	r14, r24
    14de:	8b 01       	movw	r16, r22
    14e0:	fb 01       	movw	r30, r22
    14e2:	e0 5a       	subi	r30, 0xA0	; 160
    14e4:	ff 4f       	sbci	r31, 0xFF	; 255
    14e6:	80 81       	ld	r24, Z
    14e8:	f7 01       	movw	r30, r14
    14ea:	e0 5c       	subi	r30, 0xC0	; 192
    14ec:	ff 4f       	sbci	r31, 0xFF	; 255
    14ee:	80 83       	st	Z, r24
    14f0:	6b 01       	movw	r12, r22
    14f2:	80 e4       	ldi	r24, 0x40	; 64
    14f4:	c8 0e       	add	r12, r24
    14f6:	d1 1c       	adc	r13, r1
    14f8:	a6 01       	movw	r20, r12
    14fa:	b6 01       	movw	r22, r12
    14fc:	ce 01       	movw	r24, r28
    14fe:	01 96       	adiw	r24, 0x01	; 1
    1500:	11 dd       	rcall	.-1502   	; 0xf24 <bigMultiply>
    1502:	a6 01       	movw	r20, r12
    1504:	be 01       	movw	r22, r28
    1506:	6f 5f       	subi	r22, 0xFF	; 255
    1508:	7f 4f       	sbci	r23, 0xFF	; 255
    150a:	ce 01       	movw	r24, r28
    150c:	81 96       	adiw	r24, 0x21	; 33
    150e:	0a dd       	rcall	.-1516   	; 0xf24 <bigMultiply>
    1510:	be 01       	movw	r22, r28
    1512:	6f 5f       	subi	r22, 0xFF	; 255
    1514:	7f 4f       	sbci	r23, 0xFF	; 255
    1516:	cb 01       	movw	r24, r22
    1518:	78 dd       	rcall	.-1296   	; 0x100a <bigInvert>
    151a:	be 01       	movw	r22, r28
    151c:	6f 5d       	subi	r22, 0xDF	; 223
    151e:	7f 4f       	sbci	r23, 0xFF	; 255
    1520:	cb 01       	movw	r24, r22
    1522:	73 dd       	rcall	.-1306   	; 0x100a <bigInvert>
    1524:	ae 01       	movw	r20, r28
    1526:	4f 5f       	subi	r20, 0xFF	; 255
    1528:	5f 4f       	sbci	r21, 0xFF	; 255
    152a:	b8 01       	movw	r22, r16
    152c:	c7 01       	movw	r24, r14
    152e:	fa dc       	rcall	.-1548   	; 0xf24 <bigMultiply>
    1530:	b8 01       	movw	r22, r16
    1532:	60 5e       	subi	r22, 0xE0	; 224
    1534:	7f 4f       	sbci	r23, 0xFF	; 255
    1536:	ae 01       	movw	r20, r28
    1538:	4f 5d       	subi	r20, 0xDF	; 223
    153a:	5f 4f       	sbci	r21, 0xFF	; 255
    153c:	c7 01       	movw	r24, r14
    153e:	80 96       	adiw	r24, 0x20	; 32
    1540:	f1 dc       	rcall	.-1566   	; 0xf24 <bigMultiply>
    1542:	c0 5c       	subi	r28, 0xC0	; 192
    1544:	df 4f       	sbci	r29, 0xFF	; 255
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	f8 94       	cli
    154a:	de bf       	out	0x3e, r29	; 62
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	cd bf       	out	0x3d, r28	; 61
    1550:	df 91       	pop	r29
    1552:	cf 91       	pop	r28
    1554:	1f 91       	pop	r17
    1556:	0f 91       	pop	r16
    1558:	ff 90       	pop	r15
    155a:	ef 90       	pop	r14
    155c:	df 90       	pop	r13
    155e:	cf 90       	pop	r12
    1560:	08 95       	ret

00001562 <setFieldToN>:
    1562:	41 e1       	ldi	r20, 0x11	; 17
    1564:	65 e1       	ldi	r22, 0x15	; 21
    1566:	71 e0       	ldi	r23, 0x01	; 1
    1568:	86 e2       	ldi	r24, 0x26	; 38
    156a:	91 e0       	ldi	r25, 0x01	; 1
    156c:	3a cb       	rjmp	.-2444   	; 0xbe2 <bigSetField>
    156e:	08 95       	ret

00001570 <pointMultiply>:
    1570:	bf 92       	push	r11
    1572:	cf 92       	push	r12
    1574:	df 92       	push	r13
    1576:	ef 92       	push	r14
    1578:	ff 92       	push	r15
    157a:	0f 93       	push	r16
    157c:	1f 93       	push	r17
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	c7 50       	subi	r28, 0x07	; 7
    1588:	d1 40       	sbci	r29, 0x01	; 1
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	f8 94       	cli
    158e:	de bf       	out	0x3e, r29	; 62
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	cd bf       	out	0x3d, r28	; 61
    1594:	7c 01       	movw	r14, r24
    1596:	8b 01       	movw	r16, r22
    1598:	81 e6       	ldi	r24, 0x61	; 97
    159a:	fe 01       	movw	r30, r28
    159c:	31 96       	adiw	r30, 0x01	; 1
    159e:	df 01       	movw	r26, r30
    15a0:	98 2f       	mov	r25, r24
    15a2:	1d 92       	st	X+, r1
    15a4:	9a 95       	dec	r25
    15a6:	e9 f7       	brne	.-6      	; 0x15a2 <pointMultiply+0x32>
    15a8:	ef 59       	subi	r30, 0x9F	; 159
    15aa:	ff 4f       	sbci	r31, 0xFF	; 255
    15ac:	df 01       	movw	r26, r30
    15ae:	1d 92       	st	X+, r1
    15b0:	8a 95       	dec	r24
    15b2:	e9 f7       	brne	.-6      	; 0x15ae <pointMultiply+0x3e>
    15b4:	6e 01       	movw	r12, r28
    15b6:	b3 ec       	ldi	r27, 0xC3	; 195
    15b8:	cb 0e       	add	r12, r27
    15ba:	d1 1c       	adc	r13, r1
    15bc:	81 e4       	ldi	r24, 0x41	; 65
    15be:	f6 01       	movw	r30, r12
    15c0:	11 92       	st	Z+, r1
    15c2:	8a 95       	dec	r24
    15c4:	e9 f7       	brne	.-6      	; 0x15c0 <pointMultiply+0x50>
    15c6:	45 e0       	ldi	r20, 0x05	; 5
    15c8:	66 e4       	ldi	r22, 0x46	; 70
    15ca:	71 e0       	ldi	r23, 0x01	; 1
    15cc:	8b e4       	ldi	r24, 0x4B	; 75
    15ce:	91 e0       	ldi	r25, 0x01	; 1
    15d0:	08 db       	rcall	.-2544   	; 0xbe2 <bigSetField>
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	a2 96       	adiw	r28, 0x22	; 34
    15d6:	8f af       	std	Y+63, r24	; 0x3f
    15d8:	a2 97       	sbiw	r28, 0x22	; 34
    15da:	cd 5f       	subi	r28, 0xFD	; 253
    15dc:	de 4f       	sbci	r29, 0xFE	; 254
    15de:	88 83       	st	Y, r24
    15e0:	c3 50       	subi	r28, 0x03	; 3
    15e2:	d1 40       	sbci	r29, 0x01	; 1
    15e4:	ca 5f       	subi	r28, 0xFA	; 250
    15e6:	de 4f       	sbci	r29, 0xFE	; 254
    15e8:	f9 82       	std	Y+1, r15	; 0x01
    15ea:	e8 82       	st	Y, r14
    15ec:	c6 50       	subi	r28, 0x06	; 6
    15ee:	d1 40       	sbci	r29, 0x01	; 1
    15f0:	cc 5f       	subi	r28, 0xFC	; 252
    15f2:	de 4f       	sbci	r29, 0xFE	; 254
    15f4:	d9 82       	std	Y+1, r13	; 0x01
    15f6:	c8 82       	st	Y, r12
    15f8:	c4 50       	subi	r28, 0x04	; 4
    15fa:	d1 40       	sbci	r29, 0x01	; 1
    15fc:	0f 2e       	mov	r0, r31
    15fe:	ff e1       	ldi	r31, 0x1F	; 31
    1600:	bf 2e       	mov	r11, r31
    1602:	f0 2d       	mov	r31, r0
    1604:	f8 01       	movw	r30, r16
    1606:	eb 0d       	add	r30, r11
    1608:	f1 1d       	adc	r31, r1
    160a:	c0 80       	ld	r12, Z
    160c:	68 94       	set
    160e:	dd 24       	eor	r13, r13
    1610:	d3 f8       	bld	r13, 3
    1612:	ce 01       	movw	r24, r28
    1614:	01 96       	adiw	r24, 0x01	; 1
    1616:	7c dd       	rcall	.-1288   	; 0x1110 <pointDouble>
    1618:	ec 2d       	mov	r30, r12
    161a:	ee 1f       	adc	r30, r30
    161c:	ee 27       	eor	r30, r30
    161e:	ee 1f       	adc	r30, r30
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	ee 0f       	add	r30, r30
    1624:	ff 1f       	adc	r31, r31
    1626:	84 e0       	ldi	r24, 0x04	; 4
    1628:	91 e0       	ldi	r25, 0x01	; 1
    162a:	8c 0f       	add	r24, r28
    162c:	9d 1f       	adc	r25, r29
    162e:	e8 0f       	add	r30, r24
    1630:	f9 1f       	adc	r31, r25
    1632:	40 81       	ld	r20, Z
    1634:	51 81       	ldd	r21, Z+1	; 0x01
    1636:	be 01       	movw	r22, r28
    1638:	6e 59       	subi	r22, 0x9E	; 158
    163a:	7f 4f       	sbci	r23, 0xFF	; 255
    163c:	83 50       	subi	r24, 0x03	; 3
    163e:	91 40       	sbci	r25, 0x01	; 1
    1640:	ff dd       	rcall	.-1026   	; 0x1240 <pointAdd>
    1642:	cc 0c       	add	r12, r12
    1644:	da 94       	dec	r13
    1646:	d1 10       	cpse	r13, r1
    1648:	e4 cf       	rjmp	.-56     	; 0x1612 <pointMultiply+0xa2>
    164a:	ba 94       	dec	r11
    164c:	9f ef       	ldi	r25, 0xFF	; 255
    164e:	b9 12       	cpse	r11, r25
    1650:	d9 cf       	rjmp	.-78     	; 0x1604 <pointMultiply+0x94>
    1652:	be 01       	movw	r22, r28
    1654:	6f 5f       	subi	r22, 0xFF	; 255
    1656:	7f 4f       	sbci	r23, 0xFF	; 255
    1658:	c7 01       	movw	r24, r14
    165a:	2f df       	rcall	.-418    	; 0x14ba <jacobianToAffine>
    165c:	c9 5f       	subi	r28, 0xF9	; 249
    165e:	de 4f       	sbci	r29, 0xFE	; 254
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	cd bf       	out	0x3d, r28	; 61
    166a:	df 91       	pop	r29
    166c:	cf 91       	pop	r28
    166e:	1f 91       	pop	r17
    1670:	0f 91       	pop	r16
    1672:	ff 90       	pop	r15
    1674:	ef 90       	pop	r14
    1676:	df 90       	pop	r13
    1678:	cf 90       	pop	r12
    167a:	bf 90       	pop	r11
    167c:	08 95       	ret

0000167e <setToG>:
    167e:	cf 92       	push	r12
    1680:	df 92       	push	r13
    1682:	ef 92       	push	r14
    1684:	ff 92       	push	r15
    1686:	0f 93       	push	r16
    1688:	1f 93       	push	r17
    168a:	cf 93       	push	r28
    168c:	df 93       	push	r29
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
    1692:	a0 97       	sbiw	r28, 0x20	; 32
    1694:	0f b6       	in	r0, 0x3f	; 63
    1696:	f8 94       	cli
    1698:	de bf       	out	0x3e, r29	; 62
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	cd bf       	out	0x3d, r28	; 61
    169e:	6c 01       	movw	r12, r24
    16a0:	fc 01       	movw	r30, r24
    16a2:	e0 5c       	subi	r30, 0xC0	; 192
    16a4:	ff 4f       	sbci	r31, 0xFF	; 255
    16a6:	10 82       	st	Z, r1
    16a8:	ec ea       	ldi	r30, 0xAC	; 172
    16aa:	f2 e0       	ldi	r31, 0x02	; 2
    16ac:	8e 01       	movw	r16, r28
    16ae:	0f 5f       	subi	r16, 0xFF	; 255
    16b0:	1f 4f       	sbci	r17, 0xFF	; 255
    16b2:	7e 01       	movw	r14, r28
    16b4:	81 e2       	ldi	r24, 0x21	; 33
    16b6:	e8 0e       	add	r14, r24
    16b8:	f1 1c       	adc	r15, r1
    16ba:	d8 01       	movw	r26, r16
    16bc:	84 91       	lpm	r24, Z
    16be:	8d 93       	st	X+, r24
    16c0:	31 96       	adiw	r30, 0x01	; 1
    16c2:	ae 15       	cp	r26, r14
    16c4:	bf 05       	cpc	r27, r15
    16c6:	d1 f7       	brne	.-12     	; 0x16bc <setToG+0x3e>
    16c8:	be 01       	movw	r22, r28
    16ca:	6f 5f       	subi	r22, 0xFF	; 255
    16cc:	7f 4f       	sbci	r23, 0xFF	; 255
    16ce:	c6 01       	movw	r24, r12
    16d0:	72 da       	rcall	.-2844   	; 0xbb6 <bigAssign>
    16d2:	ec e8       	ldi	r30, 0x8C	; 140
    16d4:	f2 e0       	ldi	r31, 0x02	; 2
    16d6:	84 91       	lpm	r24, Z
    16d8:	d8 01       	movw	r26, r16
    16da:	8d 93       	st	X+, r24
    16dc:	8d 01       	movw	r16, r26
    16de:	31 96       	adiw	r30, 0x01	; 1
    16e0:	ae 15       	cp	r26, r14
    16e2:	bf 05       	cpc	r27, r15
    16e4:	c1 f7       	brne	.-16     	; 0x16d6 <setToG+0x58>
    16e6:	be 01       	movw	r22, r28
    16e8:	6f 5f       	subi	r22, 0xFF	; 255
    16ea:	7f 4f       	sbci	r23, 0xFF	; 255
    16ec:	c6 01       	movw	r24, r12
    16ee:	80 96       	adiw	r24, 0x20	; 32
    16f0:	62 da       	rcall	.-2876   	; 0xbb6 <bigAssign>
    16f2:	a0 96       	adiw	r28, 0x20	; 32
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	f8 94       	cli
    16f8:	de bf       	out	0x3e, r29	; 62
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	cd bf       	out	0x3d, r28	; 61
    16fe:	df 91       	pop	r29
    1700:	cf 91       	pop	r28
    1702:	1f 91       	pop	r17
    1704:	0f 91       	pop	r16
    1706:	ff 90       	pop	r15
    1708:	ef 90       	pop	r14
    170a:	df 90       	pop	r13
    170c:	cf 90       	pop	r12
    170e:	08 95       	ret

00001710 <ecdsaSerialise>:
  *                    decompress points, so it should be safe to always
  *                    compress points.
  * \return The number of bytes written to out.
  */
uint8_t ecdsaSerialise(uint8_t *out, const PointAffine *point, const bool do_compress)
{
    1710:	0f 93       	push	r16
    1712:	1f 93       	push	r17
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
    171c:	c1 54       	subi	r28, 0x41	; 65
    171e:	d1 09       	sbc	r29, r1
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	f8 94       	cli
    1724:	de bf       	out	0x3e, r29	; 62
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	cd bf       	out	0x3d, r28	; 61
    172a:	8c 01       	movw	r16, r24
	PointAffine temp;

	memcpy(&temp, point, sizeof(temp)); // need temp for endian reversing
    172c:	91 e4       	ldi	r25, 0x41	; 65
    172e:	fb 01       	movw	r30, r22
    1730:	de 01       	movw	r26, r28
    1732:	11 96       	adiw	r26, 0x01	; 1
    1734:	01 90       	ld	r0, Z+
    1736:	0d 92       	st	X+, r0
    1738:	9a 95       	dec	r25
    173a:	e1 f7       	brne	.-8      	; 0x1734 <ecdsaSerialise+0x24>
	if (temp.is_point_at_infinity)
    173c:	22 96       	adiw	r28, 0x02	; 2
    173e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1740:	22 97       	sbiw	r28, 0x02	; 2
    1742:	88 23       	and	r24, r24
    1744:	21 f0       	breq	.+8      	; 0x174e <ecdsaSerialise+0x3e>
	{
		// Special case for point at infinity.
		out[0] = 0x00;
    1746:	f8 01       	movw	r30, r16
    1748:	10 82       	st	Z, r1
		return 1;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	36 c0       	rjmp	.+108    	; 0x17ba <ecdsaSerialise+0xaa>
	}
	else if (!do_compress)
    174e:	41 11       	cpse	r20, r1
    1750:	1d c0       	rjmp	.+58     	; 0x178c <ecdsaSerialise+0x7c>
	{
		// Uncompressed point.
		out[0] = 0x04;
    1752:	84 e0       	ldi	r24, 0x04	; 4
    1754:	f8 01       	movw	r30, r16
    1756:	80 83       	st	Z, r24
		swapEndian256(temp.x);
    1758:	ce 01       	movw	r24, r28
    175a:	01 96       	adiw	r24, 0x01	; 1
    175c:	34 da       	rcall	.-2968   	; 0xbc6 <swapEndian256>
		swapEndian256(temp.y);
    175e:	ce 01       	movw	r24, r28
    1760:	81 96       	adiw	r24, 0x21	; 33
    1762:	31 da       	rcall	.-2974   	; 0xbc6 <swapEndian256>
		memcpy(&(out[1]), temp.x, 32);
    1764:	80 e2       	ldi	r24, 0x20	; 32
    1766:	fe 01       	movw	r30, r28
    1768:	31 96       	adiw	r30, 0x01	; 1
    176a:	d8 01       	movw	r26, r16
    176c:	11 96       	adiw	r26, 0x01	; 1
    176e:	01 90       	ld	r0, Z+
    1770:	0d 92       	st	X+, r0
    1772:	8a 95       	dec	r24
    1774:	e1 f7       	brne	.-8      	; 0x176e <ecdsaSerialise+0x5e>
		memcpy(&(out[33]), temp.y, 32);
    1776:	80 e2       	ldi	r24, 0x20	; 32
    1778:	fe 01       	movw	r30, r28
    177a:	b1 96       	adiw	r30, 0x21	; 33
    177c:	d8 01       	movw	r26, r16
    177e:	91 96       	adiw	r26, 0x21	; 33
    1780:	01 90       	ld	r0, Z+
    1782:	0d 92       	st	X+, r0
    1784:	8a 95       	dec	r24
    1786:	e1 f7       	brne	.-8      	; 0x1780 <ecdsaSerialise+0x70>
		return 65;
    1788:	81 e4       	ldi	r24, 0x41	; 65
    178a:	17 c0       	rjmp	.+46     	; 0x17ba <ecdsaSerialise+0xaa>
	}
	else
	{
		// Compressed point.
		if ((temp.y[0] & 1) != 0)
    178c:	89 a1       	ldd	r24, Y+33	; 0x21
    178e:	80 ff       	sbrs	r24, 0
    1790:	04 c0       	rjmp	.+8      	; 0x179a <ecdsaSerialise+0x8a>
		{
			out[0] = 0x03; // is odd
    1792:	83 e0       	ldi	r24, 0x03	; 3
    1794:	f8 01       	movw	r30, r16
    1796:	80 83       	st	Z, r24
    1798:	03 c0       	rjmp	.+6      	; 0x17a0 <ecdsaSerialise+0x90>
		}
		else
		{
			out[0] = 0x02; // is not odd
    179a:	82 e0       	ldi	r24, 0x02	; 2
    179c:	f8 01       	movw	r30, r16
    179e:	80 83       	st	Z, r24
		}
		swapEndian256(temp.x);
    17a0:	ce 01       	movw	r24, r28
    17a2:	01 96       	adiw	r24, 0x01	; 1
    17a4:	10 da       	rcall	.-3040   	; 0xbc6 <swapEndian256>
		memcpy(&(out[1]), temp.x, 32);
    17a6:	80 e2       	ldi	r24, 0x20	; 32
    17a8:	fe 01       	movw	r30, r28
    17aa:	31 96       	adiw	r30, 0x01	; 1
    17ac:	d8 01       	movw	r26, r16
    17ae:	11 96       	adiw	r26, 0x01	; 1
    17b0:	01 90       	ld	r0, Z+
    17b2:	0d 92       	st	X+, r0
    17b4:	8a 95       	dec	r24
    17b6:	e1 f7       	brne	.-8      	; 0x17b0 <ecdsaSerialise+0xa0>
		return 33;
    17b8:	81 e2       	ldi	r24, 0x21	; 33
	}
}
    17ba:	cf 5b       	subi	r28, 0xBF	; 191
    17bc:	df 4f       	sbci	r29, 0xFF	; 255
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	f8 94       	cli
    17c2:	de bf       	out	0x3e, r29	; 62
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	cd bf       	out	0x3d, r28	; 61
    17c8:	df 91       	pop	r29
    17ca:	cf 91       	pop	r28
    17cc:	1f 91       	pop	r17
    17ce:	0f 91       	pop	r16
    17d0:	08 95       	ret

000017d2 <writeU32BigEndian>:
{
	return ((uint32_t)in[0])
		| ((uint32_t)in[1] << 8)
		| ((uint32_t)in[2] << 16)
		| ((uint32_t)in[3] << 24);
}
    17d2:	fc 01       	movw	r30, r24
    17d4:	70 83       	st	Z, r23
    17d6:	61 83       	std	Z+1, r22	; 0x01
    17d8:	52 83       	std	Z+2, r21	; 0x02
    17da:	43 83       	std	Z+3, r20	; 0x03
    17dc:	08 95       	ret

000017de <writeU32LittleEndian>:
    17de:	fc 01       	movw	r30, r24
    17e0:	40 83       	st	Z, r20
    17e2:	51 83       	std	Z+1, r21	; 0x01
    17e4:	62 83       	std	Z+2, r22	; 0x02
    17e6:	73 83       	std	Z+3, r23	; 0x03
    17e8:	08 95       	ret

000017ea <swapEndian>:

/** Swap endianness of a 32 bit unsigned integer.
  * \param v The integer to modify.
  */
void swapEndian(uint32_t *v)
{
    17ea:	fc 01       	movw	r30, r24
	uint8_t t;
	uint8_t *r;

	r = (uint8_t *)v;
	t = r[0];
    17ec:	80 81       	ld	r24, Z
	r[0] = r[3];
    17ee:	93 81       	ldd	r25, Z+3	; 0x03
    17f0:	90 83       	st	Z, r25
	r[3] = t;
    17f2:	83 83       	std	Z+3, r24	; 0x03
	t = r[1];
    17f4:	81 81       	ldd	r24, Z+1	; 0x01
	r[1] = r[2];
    17f6:	92 81       	ldd	r25, Z+2	; 0x02
    17f8:	91 83       	std	Z+1, r25	; 0x01
	r[2] = t;
    17fa:	82 83       	std	Z+2, r24	; 0x02
    17fc:	08 95       	ret

000017fe <clearM>:
/** Clear the message buffer.
  * \param hs The hash state to act on.
  */
void clearM(HashState *hs)
{
	hs->index_m = 0;
    17fe:	dc 01       	movw	r26, r24
    1800:	90 96       	adiw	r26, 0x20	; 32
    1802:	1c 92       	st	X, r1
    1804:	90 97       	sbiw	r26, 0x20	; 32
	hs->byte_position_m = 0;
    1806:	91 96       	adiw	r26, 0x21	; 33
    1808:	1c 92       	st	X, r1
	memset(hs->m, 0, sizeof(hs->m));
    180a:	fc 01       	movw	r30, r24
    180c:	b3 96       	adiw	r30, 0x23	; 35
    180e:	20 e4       	ldi	r18, 0x40	; 64
    1810:	df 01       	movw	r26, r30
    1812:	1d 92       	st	X+, r1
    1814:	2a 95       	dec	r18
    1816:	e9 f7       	brne	.-6      	; 0x1812 <clearM+0x14>
    1818:	08 95       	ret

0000181a <hashWriteByte>:
  * if the message buffer is full.
  * \param hs The hash state to act on.
  * \param byte The byte to add.
  */
void hashWriteByte(HashState *hs, uint8_t byte)
{
    181a:	cf 93       	push	r28
    181c:	df 93       	push	r29
    181e:	fc 01       	movw	r30, r24
	uint8_t pos; // corrected for endianness

	hs->message_length++;
    1820:	ec 01       	movw	r28, r24
    1822:	cd 59       	subi	r28, 0x9D	; 157
    1824:	df 4f       	sbci	r29, 0xFF	; 255
    1826:	88 81       	ld	r24, Y
    1828:	99 81       	ldd	r25, Y+1	; 0x01
    182a:	aa 81       	ldd	r26, Y+2	; 0x02
    182c:	bb 81       	ldd	r27, Y+3	; 0x03
    182e:	01 96       	adiw	r24, 0x01	; 1
    1830:	a1 1d       	adc	r26, r1
    1832:	b1 1d       	adc	r27, r1
    1834:	88 83       	st	Y, r24
    1836:	99 83       	std	Y+1, r25	; 0x01
    1838:	aa 83       	std	Y+2, r26	; 0x02
    183a:	bb 83       	std	Y+3, r27	; 0x03
	if (hs->is_big_endian)
    183c:	82 a1       	ldd	r24, Z+34	; 0x22
    183e:	88 23       	and	r24, r24
    1840:	11 f0       	breq	.+4      	; 0x1846 <hashWriteByte+0x2c>
	{
		pos = hs->byte_position_m;
    1842:	81 a1       	ldd	r24, Z+33	; 0x21
    1844:	03 c0       	rjmp	.+6      	; 0x184c <hashWriteByte+0x32>
	}
	else
	{
		pos = (uint8_t)(3 - hs->byte_position_m);
    1846:	91 a1       	ldd	r25, Z+33	; 0x21
    1848:	83 e0       	ldi	r24, 0x03	; 3
    184a:	89 1b       	sub	r24, r25
	}
	switch (pos)
    184c:	81 30       	cpi	r24, 0x01	; 1
    184e:	a9 f0       	breq	.+42     	; 0x187a <hashWriteByte+0x60>
    1850:	18 f0       	brcs	.+6      	; 0x1858 <hashWriteByte+0x3e>
    1852:	82 30       	cpi	r24, 0x02	; 2
    1854:	19 f1       	breq	.+70     	; 0x189c <hashWriteByte+0x82>
    1856:	33 c0       	rjmp	.+102    	; 0x18be <hashWriteByte+0xa4>
	{
	case 0:
		hs->m[hs->index_m] |= ((uint32_t)byte << 24);
    1858:	80 a1       	ldd	r24, Z+32	; 0x20
    185a:	ef 01       	movw	r28, r30
    185c:	94 e0       	ldi	r25, 0x04	; 4
    185e:	89 9f       	mul	r24, r25
    1860:	c0 0d       	add	r28, r0
    1862:	d1 1d       	adc	r29, r1
    1864:	11 24       	eor	r1, r1
    1866:	8b a1       	ldd	r24, Y+35	; 0x23
    1868:	9c a1       	ldd	r25, Y+36	; 0x24
    186a:	ad a1       	ldd	r26, Y+37	; 0x25
    186c:	be a1       	ldd	r27, Y+38	; 0x26
    186e:	b6 2b       	or	r27, r22
    1870:	8b a3       	std	Y+35, r24	; 0x23
    1872:	9c a3       	std	Y+36, r25	; 0x24
    1874:	ad a3       	std	Y+37, r26	; 0x25
    1876:	be a3       	std	Y+38, r27	; 0x26
		break;
    1878:	32 c0       	rjmp	.+100    	; 0x18de <hashWriteByte+0xc4>
	case 1:
		hs->m[hs->index_m] |= ((uint32_t)byte << 16);
    187a:	80 a1       	ldd	r24, Z+32	; 0x20
    187c:	ef 01       	movw	r28, r30
    187e:	94 e0       	ldi	r25, 0x04	; 4
    1880:	89 9f       	mul	r24, r25
    1882:	c0 0d       	add	r28, r0
    1884:	d1 1d       	adc	r29, r1
    1886:	11 24       	eor	r1, r1
    1888:	8b a1       	ldd	r24, Y+35	; 0x23
    188a:	9c a1       	ldd	r25, Y+36	; 0x24
    188c:	ad a1       	ldd	r26, Y+37	; 0x25
    188e:	be a1       	ldd	r27, Y+38	; 0x26
    1890:	a6 2b       	or	r26, r22
    1892:	8b a3       	std	Y+35, r24	; 0x23
    1894:	9c a3       	std	Y+36, r25	; 0x24
    1896:	ad a3       	std	Y+37, r26	; 0x25
    1898:	be a3       	std	Y+38, r27	; 0x26
		break;
    189a:	21 c0       	rjmp	.+66     	; 0x18de <hashWriteByte+0xc4>
	case 2:
		hs->m[hs->index_m] |= ((uint32_t)byte << 8);
    189c:	80 a1       	ldd	r24, Z+32	; 0x20
    189e:	ef 01       	movw	r28, r30
    18a0:	94 e0       	ldi	r25, 0x04	; 4
    18a2:	89 9f       	mul	r24, r25
    18a4:	c0 0d       	add	r28, r0
    18a6:	d1 1d       	adc	r29, r1
    18a8:	11 24       	eor	r1, r1
    18aa:	8b a1       	ldd	r24, Y+35	; 0x23
    18ac:	9c a1       	ldd	r25, Y+36	; 0x24
    18ae:	ad a1       	ldd	r26, Y+37	; 0x25
    18b0:	be a1       	ldd	r27, Y+38	; 0x26
    18b2:	96 2b       	or	r25, r22
    18b4:	8b a3       	std	Y+35, r24	; 0x23
    18b6:	9c a3       	std	Y+36, r25	; 0x24
    18b8:	ad a3       	std	Y+37, r26	; 0x25
    18ba:	be a3       	std	Y+38, r27	; 0x26
		break;
    18bc:	10 c0       	rjmp	.+32     	; 0x18de <hashWriteByte+0xc4>
	case 3:
	default:
		hs->m[hs->index_m] |= ((uint32_t)byte);
    18be:	80 a1       	ldd	r24, Z+32	; 0x20
    18c0:	ef 01       	movw	r28, r30
    18c2:	94 e0       	ldi	r25, 0x04	; 4
    18c4:	89 9f       	mul	r24, r25
    18c6:	c0 0d       	add	r28, r0
    18c8:	d1 1d       	adc	r29, r1
    18ca:	11 24       	eor	r1, r1
    18cc:	8b a1       	ldd	r24, Y+35	; 0x23
    18ce:	9c a1       	ldd	r25, Y+36	; 0x24
    18d0:	ad a1       	ldd	r26, Y+37	; 0x25
    18d2:	be a1       	ldd	r27, Y+38	; 0x26
    18d4:	86 2b       	or	r24, r22
    18d6:	8b a3       	std	Y+35, r24	; 0x23
    18d8:	9c a3       	std	Y+36, r25	; 0x24
    18da:	ad a3       	std	Y+37, r26	; 0x25
    18dc:	be a3       	std	Y+38, r27	; 0x26
		break;
	}
	if (hs->byte_position_m == 3)
    18de:	81 a1       	ldd	r24, Z+33	; 0x21
    18e0:	83 30       	cpi	r24, 0x03	; 3
    18e2:	19 f4       	brne	.+6      	; 0x18ea <hashWriteByte+0xd0>
	{
		hs->index_m++;
    18e4:	90 a1       	ldd	r25, Z+32	; 0x20
    18e6:	9f 5f       	subi	r25, 0xFF	; 255
    18e8:	90 a3       	std	Z+32, r25	; 0x20
	}
	hs->byte_position_m = (uint8_t)((hs->byte_position_m + 1) & 3);
    18ea:	8f 5f       	subi	r24, 0xFF	; 255
    18ec:	83 70       	andi	r24, 0x03	; 3
    18ee:	81 a3       	std	Z+33, r24	; 0x21
	if (hs->index_m == 16)
    18f0:	80 a1       	ldd	r24, Z+32	; 0x20
    18f2:	80 31       	cpi	r24, 0x10	; 16
    18f4:	51 f4       	brne	.+20     	; 0x190a <hashWriteByte+0xf0>
    18f6:	ef 01       	movw	r28, r30
	{
		hs->hashBlock(hs);
    18f8:	e9 59       	subi	r30, 0x99	; 153
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
    18fc:	01 90       	ld	r0, Z+
    18fe:	f0 81       	ld	r31, Z
    1900:	e0 2d       	mov	r30, r0
    1902:	ce 01       	movw	r24, r28
    1904:	09 95       	icall
		clearM(hs);
    1906:	ce 01       	movw	r24, r28
    1908:	7a df       	rcall	.-268    	; 0x17fe <clearM>
	}
}
    190a:	df 91       	pop	r29
    190c:	cf 91       	pop	r28
    190e:	08 95       	ret

00001910 <hashFinish>:
/** Finalise the hashing of a message by writing appropriate padding and
  * length bytes.
  * \param hs The hash state to act on.
  */
void hashFinish(HashState *hs)
{
    1910:	cf 92       	push	r12
    1912:	df 92       	push	r13
    1914:	ef 92       	push	r14
    1916:	ff 92       	push	r15
    1918:	0f 93       	push	r16
    191a:	1f 93       	push	r17
    191c:	cf 93       	push	r28
    191e:	df 93       	push	r29
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	28 97       	sbiw	r28, 0x08	; 8
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	f8 94       	cli
    192a:	de bf       	out	0x3e, r29	; 62
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	cd bf       	out	0x3d, r28	; 61
    1930:	8c 01       	movw	r16, r24
	uint8_t buffer[8];

	// Subsequent calls to hashWriteByte() will keep incrementing
	// message_length, so the calculation of length (in bits) must be
	// done before padding.
	length_bits = hs->message_length << 3;
    1932:	fc 01       	movw	r30, r24
    1934:	ed 59       	subi	r30, 0x9D	; 157
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	40 81       	ld	r20, Z
    193a:	51 81       	ldd	r21, Z+1	; 0x01
    193c:	62 81       	ldd	r22, Z+2	; 0x02
    193e:	73 81       	ldd	r23, Z+3	; 0x03
    1940:	44 0f       	add	r20, r20
    1942:	55 1f       	adc	r21, r21
    1944:	66 1f       	adc	r22, r22
    1946:	77 1f       	adc	r23, r23
    1948:	44 0f       	add	r20, r20
    194a:	55 1f       	adc	r21, r21
    194c:	66 1f       	adc	r22, r22
    194e:	77 1f       	adc	r23, r23
    1950:	6a 01       	movw	r12, r20
    1952:	7b 01       	movw	r14, r22
    1954:	cc 0c       	add	r12, r12
    1956:	dd 1c       	adc	r13, r13
    1958:	ee 1c       	adc	r14, r14
    195a:	ff 1c       	adc	r15, r15

	// Pad using a 1 bit followed by enough 0 bits to get the message buffer
	// to exactly 448 bits full.
	hashWriteByte(hs, (uint8_t)0x80);
    195c:	60 e8       	ldi	r22, 0x80	; 128
    195e:	5d df       	rcall	.-326    	; 0x181a <hashWriteByte>
	while ((hs->index_m != 14) || (hs->byte_position_m != 0))
    1960:	03 c0       	rjmp	.+6      	; 0x1968 <hashFinish+0x58>
	{
		hashWriteByte(hs, 0);
    1962:	60 e0       	ldi	r22, 0x00	; 0
    1964:	c8 01       	movw	r24, r16
    1966:	59 df       	rcall	.-334    	; 0x181a <hashWriteByte>
	length_bits = hs->message_length << 3;

	// Pad using a 1 bit followed by enough 0 bits to get the message buffer
	// to exactly 448 bits full.
	hashWriteByte(hs, (uint8_t)0x80);
	while ((hs->index_m != 14) || (hs->byte_position_m != 0))
    1968:	d8 01       	movw	r26, r16
    196a:	90 96       	adiw	r26, 0x20	; 32
    196c:	8c 91       	ld	r24, X
    196e:	90 97       	sbiw	r26, 0x20	; 32
    1970:	8e 30       	cpi	r24, 0x0E	; 14
    1972:	b9 f7       	brne	.-18     	; 0x1962 <hashFinish+0x52>
    1974:	91 96       	adiw	r26, 0x21	; 33
    1976:	8c 91       	ld	r24, X
    1978:	81 11       	cpse	r24, r1
    197a:	f3 cf       	rjmp	.-26     	; 0x1962 <hashFinish+0x52>
	{
		hashWriteByte(hs, 0);
	}
	// Write 64 bit length (in bits).
	memset(buffer, 0, 8);
    197c:	fe 01       	movw	r30, r28
    197e:	31 96       	adiw	r30, 0x01	; 1
    1980:	88 e0       	ldi	r24, 0x08	; 8
    1982:	df 01       	movw	r26, r30
    1984:	1d 92       	st	X+, r1
    1986:	8a 95       	dec	r24
    1988:	e9 f7       	brne	.-6      	; 0x1984 <hashFinish+0x74>
	if (hs->is_big_endian)
    198a:	f8 01       	movw	r30, r16
    198c:	82 a1       	ldd	r24, Z+34	; 0x22
    198e:	88 23       	and	r24, r24
    1990:	31 f0       	breq	.+12     	; 0x199e <hashFinish+0x8e>
	{
		writeU32BigEndian(&(buffer[4]), length_bits);
    1992:	b7 01       	movw	r22, r14
    1994:	a6 01       	movw	r20, r12
    1996:	ce 01       	movw	r24, r28
    1998:	05 96       	adiw	r24, 0x05	; 5
    199a:	1b df       	rcall	.-458    	; 0x17d2 <writeU32BigEndian>
    199c:	1e c0       	rjmp	.+60     	; 0x19da <hashFinish+0xca>
	}
	else
	{
		writeU32LittleEndian(&(buffer[0]), length_bits);
    199e:	b7 01       	movw	r22, r14
    19a0:	a6 01       	movw	r20, r12
    19a2:	ce 01       	movw	r24, r28
    19a4:	01 96       	adiw	r24, 0x01	; 1
    19a6:	1b df       	rcall	.-458    	; 0x17de <writeU32LittleEndian>
    19a8:	18 c0       	rjmp	.+48     	; 0x19da <hashFinish+0xca>
	}
	for (i = 0; i < 8; i++)
	{
		hashWriteByte(hs, buffer[i]);
    19aa:	d7 01       	movw	r26, r14
    19ac:	6d 91       	ld	r22, X+
    19ae:	7d 01       	movw	r14, r26
    19b0:	c8 01       	movw	r24, r16
    19b2:	33 df       	rcall	.-410    	; 0x181a <hashWriteByte>
	}
	else
	{
		writeU32LittleEndian(&(buffer[0]), length_bits);
	}
	for (i = 0; i < 8; i++)
    19b4:	ce 14       	cp	r12, r14
    19b6:	df 04       	cpc	r13, r15
    19b8:	c1 f7       	brne	.-16     	; 0x19aa <hashFinish+0x9a>
	{
		hashWriteByte(hs, buffer[i]);
	}
	// Swap endianness if necessary.
	if (!hs->is_big_endian)
    19ba:	f8 01       	movw	r30, r16
    19bc:	82 a1       	ldd	r24, Z+34	; 0x22
    19be:	81 11       	cpse	r24, r1
    19c0:	14 c0       	rjmp	.+40     	; 0x19ea <hashFinish+0xda>
    19c2:	78 01       	movw	r14, r16
    19c4:	00 5e       	subi	r16, 0xE0	; 224
	{
		for	(i = 0; i < 8; i++)
		{
			swapEndian(&(hs->h[i]));
    19c6:	1f 4f       	sbci	r17, 0xFF	; 255
    19c8:	c7 01       	movw	r24, r14
    19ca:	0f df       	rcall	.-482    	; 0x17ea <swapEndian>
    19cc:	f4 e0       	ldi	r31, 0x04	; 4
    19ce:	ef 0e       	add	r14, r31
    19d0:	f1 1c       	adc	r15, r1
		hashWriteByte(hs, buffer[i]);
	}
	// Swap endianness if necessary.
	if (!hs->is_big_endian)
	{
		for	(i = 0; i < 8; i++)
    19d2:	0e 15       	cp	r16, r14
    19d4:	1f 05       	cpc	r17, r15
    19d6:	c1 f7       	brne	.-16     	; 0x19c8 <hashFinish+0xb8>
    19d8:	08 c0       	rjmp	.+16     	; 0x19ea <hashFinish+0xda>
    19da:	ce 01       	movw	r24, r28
    19dc:	01 96       	adiw	r24, 0x01	; 1
    19de:	7c 01       	movw	r14, r24
    19e0:	6e 01       	movw	r12, r28
    19e2:	99 e0       	ldi	r25, 0x09	; 9
    19e4:	c9 0e       	add	r12, r25
    19e6:	d1 1c       	adc	r13, r1
    19e8:	e0 cf       	rjmp	.-64     	; 0x19aa <hashFinish+0x9a>
		{
			swapEndian(&(hs->h[i]));
		}
	}
}
    19ea:	28 96       	adiw	r28, 0x08	; 8
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	de bf       	out	0x3e, r29	; 62
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	cd bf       	out	0x3d, r28	; 61
    19f6:	df 91       	pop	r29
    19f8:	cf 91       	pop	r28
    19fa:	1f 91       	pop	r17
    19fc:	0f 91       	pop	r16
    19fe:	ff 90       	pop	r15
    1a00:	ef 90       	pop	r14
    1a02:	df 90       	pop	r13
    1a04:	cf 90       	pop	r12
    1a06:	08 95       	ret

00001a08 <writeHashToByteArray>:
  *                            signing function).
  * \warning hashFinish() (or the appropriate hash-specific finish function)
  *          must be called before this function.
  */
void writeHashToByteArray(uint8_t *out, HashState *hs, bool do_write_big_endian)
{
    1a08:	ef 92       	push	r14
    1a0a:	ff 92       	push	r15
    1a0c:	0f 93       	push	r16
    1a0e:	1f 93       	push	r17
    1a10:	cf 93       	push	r28
    1a12:	df 93       	push	r29
	uint8_t i;

	if (do_write_big_endian)
    1a14:	44 23       	and	r20, r20
    1a16:	a1 f0       	breq	.+40     	; 0x1a40 <writeHashToByteArray+0x38>
    1a18:	8b 01       	movw	r16, r22
    1a1a:	c8 2f       	mov	r28, r24
    1a1c:	d9 2f       	mov	r29, r25
    1a1e:	7b 01       	movw	r14, r22
    1a20:	80 e2       	ldi	r24, 0x20	; 32
    1a22:	e8 0e       	add	r14, r24
    1a24:	f1 1c       	adc	r15, r1
	{
		for (i = 0; i < 8; i++)
		{
			writeU32BigEndian(&(out[i * 4]), hs->h[i]);
    1a26:	f8 01       	movw	r30, r16
    1a28:	41 91       	ld	r20, Z+
    1a2a:	51 91       	ld	r21, Z+
    1a2c:	61 91       	ld	r22, Z+
    1a2e:	71 91       	ld	r23, Z+
    1a30:	8f 01       	movw	r16, r30
    1a32:	ce 01       	movw	r24, r28
    1a34:	ce de       	rcall	.-612    	; 0x17d2 <writeU32BigEndian>
    1a36:	24 96       	adiw	r28, 0x04	; 4
{
	uint8_t i;

	if (do_write_big_endian)
	{
		for (i = 0; i < 8; i++)
    1a38:	0e 15       	cp	r16, r14
    1a3a:	1f 05       	cpc	r17, r15
    1a3c:	a1 f7       	brne	.-24     	; 0x1a26 <writeHashToByteArray+0x1e>
    1a3e:	12 c0       	rjmp	.+36     	; 0x1a64 <writeHashToByteArray+0x5c>
    1a40:	8b 01       	movw	r16, r22
    1a42:	00 5e       	subi	r16, 0xE0	; 224
    1a44:	1f 4f       	sbci	r17, 0xFF	; 255
    1a46:	c8 2f       	mov	r28, r24
    1a48:	d9 2f       	mov	r29, r25
    1a4a:	7b 01       	movw	r14, r22
	}
	else
	{
		for (i = 0; i < 8; i++)
		{
			writeU32LittleEndian(&(out[i * 4]), hs->h[7 - i]);
    1a4c:	f8 01       	movw	r30, r16
    1a4e:	72 91       	ld	r23, -Z
    1a50:	62 91       	ld	r22, -Z
    1a52:	52 91       	ld	r21, -Z
    1a54:	42 91       	ld	r20, -Z
    1a56:	8f 01       	movw	r16, r30
    1a58:	ce 01       	movw	r24, r28
    1a5a:	c1 de       	rcall	.-638    	; 0x17de <writeU32LittleEndian>
    1a5c:	24 96       	adiw	r28, 0x04	; 4
			writeU32BigEndian(&(out[i * 4]), hs->h[i]);
		}
	}
	else
	{
		for (i = 0; i < 8; i++)
    1a5e:	0e 15       	cp	r16, r14
    1a60:	1f 05       	cpc	r17, r15
    1a62:	a1 f7       	brne	.-24     	; 0x1a4c <writeHashToByteArray+0x44>
		{
			writeU32LittleEndian(&(out[i * 4]), hs->h[7 - i]);
		}
	}
}
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	1f 91       	pop	r17
    1a6a:	0f 91       	pop	r16
    1a6c:	ff 90       	pop	r15
    1a6e:	ef 90       	pop	r14
    1a70:	08 95       	ret

00001a72 <sha512Block>:
/** Update hash value based on the contents of a full message buffer.
  * This implements the pseudo-code in section 6.4.2 of FIPS PUB 180-4.
  * \param hs64 The 64 bit hash state to update.
  */
static void sha512Block(HashState64 *hs64)
{
    1a72:	2f 92       	push	r2
    1a74:	3f 92       	push	r3
    1a76:	4f 92       	push	r4
    1a78:	5f 92       	push	r5
    1a7a:	6f 92       	push	r6
    1a7c:	7f 92       	push	r7
    1a7e:	8f 92       	push	r8
    1a80:	9f 92       	push	r9
    1a82:	af 92       	push	r10
    1a84:	bf 92       	push	r11
    1a86:	cf 92       	push	r12
    1a88:	df 92       	push	r13
    1a8a:	ef 92       	push	r14
    1a8c:	ff 92       	push	r15
    1a8e:	0f 93       	push	r16
    1a90:	1f 93       	push	r17
    1a92:	cf 93       	push	r28
    1a94:	df 93       	push	r29
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
    1a9a:	c3 51       	subi	r28, 0x13	; 19
    1a9c:	d3 40       	sbci	r29, 0x03	; 3
    1a9e:	0f b6       	in	r0, 0x3f	; 63
    1aa0:	f8 94       	cli
    1aa2:	de bf       	out	0x3e, r29	; 62
    1aa4:	0f be       	out	0x3f, r0	; 63
    1aa6:	cd bf       	out	0x3d, r28	; 61
    1aa8:	ce 52       	subi	r28, 0x2E	; 46
    1aaa:	dd 4f       	sbci	r29, 0xFD	; 253
    1aac:	99 83       	std	Y+1, r25	; 0x01
    1aae:	88 83       	st	Y, r24
    1ab0:	c2 5d       	subi	r28, 0xD2	; 210
    1ab2:	d2 40       	sbci	r29, 0x02	; 2
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	ae 5b       	subi	r26, 0xBE	; 190
    1ab8:	bf 4f       	sbci	r27, 0xFF	; 255
    1aba:	fe 01       	movw	r30, r28
    1abc:	31 96       	adiw	r30, 0x01	; 1
    1abe:	c4 55       	subi	r28, 0x54	; 84
    1ac0:	dd 4f       	sbci	r29, 0xFD	; 253
    1ac2:	f9 83       	std	Y+1, r31	; 0x01
    1ac4:	e8 83       	st	Y, r30
    1ac6:	cc 5a       	subi	r28, 0xAC	; 172
    1ac8:	d2 40       	sbci	r29, 0x02	; 2
    1aca:	8e 01       	movw	r16, r28
    1acc:	0f 57       	subi	r16, 0x7F	; 127
    1ace:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t t;
	uint64_t w[80];

	for (t = 0; t < 16; t++)
	{
		w[t] = hs64->m[t];
    1ad0:	7c 91       	ld	r23, X
    1ad2:	11 96       	adiw	r26, 0x01	; 1
    1ad4:	6c 91       	ld	r22, X
    1ad6:	11 97       	sbiw	r26, 0x01	; 1
    1ad8:	12 96       	adiw	r26, 0x02	; 2
    1ada:	5c 91       	ld	r21, X
    1adc:	12 97       	sbiw	r26, 0x02	; 2
    1ade:	13 96       	adiw	r26, 0x03	; 3
    1ae0:	4c 91       	ld	r20, X
    1ae2:	13 97       	sbiw	r26, 0x03	; 3
    1ae4:	14 96       	adiw	r26, 0x04	; 4
    1ae6:	3c 91       	ld	r19, X
    1ae8:	14 97       	sbiw	r26, 0x04	; 4
    1aea:	15 96       	adiw	r26, 0x05	; 5
    1aec:	2c 91       	ld	r18, X
    1aee:	15 97       	sbiw	r26, 0x05	; 5
    1af0:	16 96       	adiw	r26, 0x06	; 6
    1af2:	9c 91       	ld	r25, X
    1af4:	16 97       	sbiw	r26, 0x06	; 6
    1af6:	17 96       	adiw	r26, 0x07	; 7
    1af8:	8c 91       	ld	r24, X
    1afa:	17 97       	sbiw	r26, 0x07	; 7
    1afc:	18 96       	adiw	r26, 0x08	; 8
    1afe:	70 83       	st	Z, r23
    1b00:	61 83       	std	Z+1, r22	; 0x01
    1b02:	52 83       	std	Z+2, r21	; 0x02
    1b04:	43 83       	std	Z+3, r20	; 0x03
    1b06:	34 83       	std	Z+4, r19	; 0x04
    1b08:	25 83       	std	Z+5, r18	; 0x05
    1b0a:	96 83       	std	Z+6, r25	; 0x06
    1b0c:	87 83       	std	Z+7, r24	; 0x07
    1b0e:	38 96       	adiw	r30, 0x08	; 8
	uint64_t a, b, c, d, e, f, g, h;
	uint64_t t1, t2;
	uint8_t t;
	uint64_t w[80];

	for (t = 0; t < 16; t++)
    1b10:	e0 17       	cp	r30, r16
    1b12:	f1 07       	cpc	r31, r17
    1b14:	e9 f6       	brne	.-70     	; 0x1ad0 <sha512Block+0x5e>
    1b16:	de 01       	movw	r26, r28
    1b18:	a7 5b       	subi	r26, 0xB7	; 183
    1b1a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b1c:	fe 01       	movw	r30, r28
    1b1e:	e7 5b       	subi	r30, 0xB7	; 183
    1b20:	fd 4f       	sbci	r31, 0xFD	; 253
    1b22:	cf 57       	subi	r28, 0x7F	; 127
    1b24:	dd 4f       	sbci	r29, 0xFD	; 253
    1b26:	f9 83       	std	Y+1, r31	; 0x01
    1b28:	e8 83       	st	Y, r30
    1b2a:	c1 58       	subi	r28, 0x81	; 129
    1b2c:	d2 40       	sbci	r29, 0x02	; 2
    1b2e:	c4 55       	subi	r28, 0x54	; 84
    1b30:	dd 4f       	sbci	r29, 0xFD	; 253
    1b32:	28 80       	ld	r2, Y
    1b34:	39 80       	ldd	r3, Y+1	; 0x01
    1b36:	cc 5a       	subi	r28, 0xAC	; 172
    1b38:	d2 40       	sbci	r29, 0x02	; 2
    1b3a:	7d 01       	movw	r14, r26
	{
		w[t] = hs64->m[t];
	}
	for (t = 16; t < 80; t++)
	{
		w[t] = littleSigma1(w[t - 2]) + w[t - 7] + littleSigma0(w[t - 15]) + w[t - 16];
    1b3c:	98 96       	adiw	r26, 0x28	; 40
    1b3e:	fc 91       	ld	r31, X
    1b40:	98 97       	sbiw	r26, 0x28	; 40
    1b42:	cd 57       	subi	r28, 0x7D	; 125
    1b44:	dd 4f       	sbci	r29, 0xFD	; 253
    1b46:	f8 83       	st	Y, r31
    1b48:	c3 58       	subi	r28, 0x83	; 131
    1b4a:	d2 40       	sbci	r29, 0x02	; 2
    1b4c:	99 96       	adiw	r26, 0x29	; 41
    1b4e:	ec 91       	ld	r30, X
    1b50:	99 97       	sbiw	r26, 0x29	; 41
    1b52:	cc 57       	subi	r28, 0x7C	; 124
    1b54:	dd 4f       	sbci	r29, 0xFD	; 253
    1b56:	e8 83       	st	Y, r30
    1b58:	c4 58       	subi	r28, 0x84	; 132
    1b5a:	d2 40       	sbci	r29, 0x02	; 2
    1b5c:	9a 96       	adiw	r26, 0x2a	; 42
    1b5e:	4c 90       	ld	r4, X
    1b60:	9a 97       	sbiw	r26, 0x2a	; 42
    1b62:	9b 96       	adiw	r26, 0x2b	; 43
    1b64:	5c 90       	ld	r5, X
    1b66:	9b 97       	sbiw	r26, 0x2b	; 43
    1b68:	9c 96       	adiw	r26, 0x2c	; 44
    1b6a:	6c 90       	ld	r6, X
    1b6c:	9c 97       	sbiw	r26, 0x2c	; 44
    1b6e:	9d 96       	adiw	r26, 0x2d	; 45
    1b70:	7c 90       	ld	r7, X
    1b72:	9d 97       	sbiw	r26, 0x2d	; 45
    1b74:	9e 96       	adiw	r26, 0x2e	; 46
    1b76:	8c 90       	ld	r8, X
    1b78:	9e 97       	sbiw	r26, 0x2e	; 46
    1b7a:	9f 96       	adiw	r26, 0x2f	; 47
    1b7c:	9c 90       	ld	r9, X
    1b7e:	9f 97       	sbiw	r26, 0x2f	; 47
    1b80:	18 96       	adiw	r26, 0x08	; 8
    1b82:	f1 01       	movw	r30, r2
    1b84:	f0 85       	ldd	r31, Z+8	; 0x08
    1b86:	cb 57       	subi	r28, 0x7B	; 123
    1b88:	dd 4f       	sbci	r29, 0xFD	; 253
    1b8a:	f8 83       	st	Y, r31
    1b8c:	c5 58       	subi	r28, 0x85	; 133
    1b8e:	d2 40       	sbci	r29, 0x02	; 2
    1b90:	f1 01       	movw	r30, r2
    1b92:	f1 85       	ldd	r31, Z+9	; 0x09
    1b94:	ca 57       	subi	r28, 0x7A	; 122
    1b96:	dd 4f       	sbci	r29, 0xFD	; 253
    1b98:	f8 83       	st	Y, r31
    1b9a:	c6 58       	subi	r28, 0x86	; 134
    1b9c:	d2 40       	sbci	r29, 0x02	; 2
    1b9e:	f1 01       	movw	r30, r2
    1ba0:	f2 85       	ldd	r31, Z+10	; 0x0a
    1ba2:	c5 57       	subi	r28, 0x75	; 117
    1ba4:	dd 4f       	sbci	r29, 0xFD	; 253
    1ba6:	f8 83       	st	Y, r31
    1ba8:	cb 58       	subi	r28, 0x8B	; 139
    1baa:	d2 40       	sbci	r29, 0x02	; 2
    1bac:	f1 01       	movw	r30, r2
    1bae:	f3 85       	ldd	r31, Z+11	; 0x0b
    1bb0:	c4 57       	subi	r28, 0x74	; 116
    1bb2:	dd 4f       	sbci	r29, 0xFD	; 253
    1bb4:	f8 83       	st	Y, r31
    1bb6:	cc 58       	subi	r28, 0x8C	; 140
    1bb8:	d2 40       	sbci	r29, 0x02	; 2
    1bba:	f1 01       	movw	r30, r2
    1bbc:	f4 85       	ldd	r31, Z+12	; 0x0c
    1bbe:	c3 57       	subi	r28, 0x73	; 115
    1bc0:	dd 4f       	sbci	r29, 0xFD	; 253
    1bc2:	f8 83       	st	Y, r31
    1bc4:	cd 58       	subi	r28, 0x8D	; 141
    1bc6:	d2 40       	sbci	r29, 0x02	; 2
    1bc8:	f1 01       	movw	r30, r2
    1bca:	f5 85       	ldd	r31, Z+13	; 0x0d
    1bcc:	c2 57       	subi	r28, 0x72	; 114
    1bce:	dd 4f       	sbci	r29, 0xFD	; 253
    1bd0:	f8 83       	st	Y, r31
    1bd2:	ce 58       	subi	r28, 0x8E	; 142
    1bd4:	d2 40       	sbci	r29, 0x02	; 2
    1bd6:	f1 01       	movw	r30, r2
    1bd8:	f6 85       	ldd	r31, Z+14	; 0x0e
    1bda:	c1 57       	subi	r28, 0x71	; 113
    1bdc:	dd 4f       	sbci	r29, 0xFD	; 253
    1bde:	f8 83       	st	Y, r31
    1be0:	cf 58       	subi	r28, 0x8F	; 143
    1be2:	d2 40       	sbci	r29, 0x02	; 2
    1be4:	f1 01       	movw	r30, r2
    1be6:	f7 85       	ldd	r31, Z+15	; 0x0f
    1be8:	c0 57       	subi	r28, 0x70	; 112
    1bea:	dd 4f       	sbci	r29, 0xFD	; 253
    1bec:	f8 83       	st	Y, r31
    1bee:	c0 59       	subi	r28, 0x90	; 144
    1bf0:	d2 40       	sbci	r29, 0x02	; 2
    1bf2:	f7 01       	movw	r30, r14
    1bf4:	20 81       	ld	r18, Z
    1bf6:	31 81       	ldd	r19, Z+1	; 0x01
    1bf8:	42 81       	ldd	r20, Z+2	; 0x02
    1bfa:	53 81       	ldd	r21, Z+3	; 0x03
    1bfc:	64 81       	ldd	r22, Z+4	; 0x04
    1bfe:	75 81       	ldd	r23, Z+5	; 0x05
    1c00:	86 81       	ldd	r24, Z+6	; 0x06
    1c02:	97 81       	ldd	r25, Z+7	; 0x07
    1c04:	f1 01       	movw	r30, r2
    1c06:	a0 80       	ld	r10, Z
    1c08:	18 e0       	ldi	r17, 0x08	; 8
    1c0a:	21 0e       	add	r2, r17
    1c0c:	31 1c       	adc	r3, r1
    1c0e:	b1 80       	ldd	r11, Z+1	; 0x01
    1c10:	c2 80       	ldd	r12, Z+2	; 0x02
    1c12:	d3 80       	ldd	r13, Z+3	; 0x03
    1c14:	e4 80       	ldd	r14, Z+4	; 0x04
    1c16:	f5 80       	ldd	r15, Z+5	; 0x05
    1c18:	06 81       	ldd	r16, Z+6	; 0x06
    1c1a:	17 81       	ldd	r17, Z+7	; 0x07
    1c1c:	0e 94 05 3e 	call	0x7c0a	; 0x7c0a <__adddi3>
    1c20:	c5 56       	subi	r28, 0x65	; 101
    1c22:	dd 4f       	sbci	r29, 0xFD	; 253
    1c24:	28 83       	st	Y, r18
    1c26:	cb 59       	subi	r28, 0x9B	; 155
    1c28:	d2 40       	sbci	r29, 0x02	; 2
    1c2a:	f3 2f       	mov	r31, r19
    1c2c:	c4 56       	subi	r28, 0x64	; 100
    1c2e:	dd 4f       	sbci	r29, 0xFD	; 253
    1c30:	48 83       	st	Y, r20
    1c32:	cc 59       	subi	r28, 0x9C	; 156
    1c34:	d2 40       	sbci	r29, 0x02	; 2
    1c36:	c3 56       	subi	r28, 0x63	; 99
    1c38:	dd 4f       	sbci	r29, 0xFD	; 253
    1c3a:	58 83       	st	Y, r21
    1c3c:	cd 59       	subi	r28, 0x9D	; 157
    1c3e:	d2 40       	sbci	r29, 0x02	; 2
    1c40:	ce 55       	subi	r28, 0x5E	; 94
    1c42:	dd 4f       	sbci	r29, 0xFD	; 253
    1c44:	68 83       	st	Y, r22
    1c46:	c2 5a       	subi	r28, 0xA2	; 162
    1c48:	d2 40       	sbci	r29, 0x02	; 2
    1c4a:	cd 55       	subi	r28, 0x5D	; 93
    1c4c:	dd 4f       	sbci	r29, 0xFD	; 253
    1c4e:	78 83       	st	Y, r23
    1c50:	c3 5a       	subi	r28, 0xA3	; 163
    1c52:	d2 40       	sbci	r29, 0x02	; 2
    1c54:	cc 55       	subi	r28, 0x5C	; 92
    1c56:	dd 4f       	sbci	r29, 0xFD	; 253
    1c58:	88 83       	st	Y, r24
    1c5a:	c4 5a       	subi	r28, 0xA4	; 164
    1c5c:	d2 40       	sbci	r29, 0x02	; 2
    1c5e:	cb 55       	subi	r28, 0x5B	; 91
    1c60:	dd 4f       	sbci	r29, 0xFD	; 253
    1c62:	98 83       	st	Y, r25
    1c64:	c5 5a       	subi	r28, 0xA5	; 165
    1c66:	d2 40       	sbci	r29, 0x02	; 2
    1c68:	cd 57       	subi	r28, 0x7D	; 125
    1c6a:	dd 4f       	sbci	r29, 0xFD	; 253
    1c6c:	28 81       	ld	r18, Y
    1c6e:	c3 58       	subi	r28, 0x83	; 131
    1c70:	d2 40       	sbci	r29, 0x02	; 2
    1c72:	cc 57       	subi	r28, 0x7C	; 124
    1c74:	dd 4f       	sbci	r29, 0xFD	; 253
    1c76:	38 81       	ld	r19, Y
    1c78:	c4 58       	subi	r28, 0x84	; 132
    1c7a:	d2 40       	sbci	r29, 0x02	; 2
    1c7c:	44 2d       	mov	r20, r4
    1c7e:	55 2d       	mov	r21, r5
    1c80:	66 2d       	mov	r22, r6
    1c82:	77 2d       	mov	r23, r7
    1c84:	88 2d       	mov	r24, r8
    1c86:	99 2d       	mov	r25, r9
    1c88:	03 e0       	ldi	r16, 0x03	; 3
    1c8a:	0e 94 ea 3d 	call	0x7bd4	; 0x7bd4 <__rotldi3>
    1c8e:	a2 2e       	mov	r10, r18
    1c90:	b3 2e       	mov	r11, r19
    1c92:	c4 2e       	mov	r12, r20
    1c94:	d5 2e       	mov	r13, r21
    1c96:	e6 2e       	mov	r14, r22
    1c98:	f7 2e       	mov	r15, r23
    1c9a:	e8 2f       	mov	r30, r24
    1c9c:	19 2f       	mov	r17, r25
    1c9e:	cd 57       	subi	r28, 0x7D	; 125
    1ca0:	dd 4f       	sbci	r29, 0xFD	; 253
    1ca2:	28 81       	ld	r18, Y
    1ca4:	c3 58       	subi	r28, 0x83	; 131
    1ca6:	d2 40       	sbci	r29, 0x02	; 2
    1ca8:	cc 57       	subi	r28, 0x7C	; 124
    1caa:	dd 4f       	sbci	r29, 0xFD	; 253
    1cac:	38 81       	ld	r19, Y
    1cae:	c4 58       	subi	r28, 0x84	; 132
    1cb0:	d2 40       	sbci	r29, 0x02	; 2
    1cb2:	44 2d       	mov	r20, r4
    1cb4:	55 2d       	mov	r21, r5
    1cb6:	66 2d       	mov	r22, r6
    1cb8:	77 2d       	mov	r23, r7
    1cba:	88 2d       	mov	r24, r8
    1cbc:	99 2d       	mov	r25, r9
    1cbe:	0d e2       	ldi	r16, 0x2D	; 45
    1cc0:	0e 94 ea 3d 	call	0x7bd4	; 0x7bd4 <__rotldi3>
    1cc4:	a2 26       	eor	r10, r18
    1cc6:	b3 26       	eor	r11, r19
    1cc8:	c4 26       	eor	r12, r20
    1cca:	d5 26       	eor	r13, r21
    1ccc:	e6 26       	eor	r14, r22
    1cce:	f7 26       	eor	r15, r23
    1cd0:	e8 27       	eor	r30, r24
    1cd2:	19 27       	eor	r17, r25
    1cd4:	cd 57       	subi	r28, 0x7D	; 125
    1cd6:	dd 4f       	sbci	r29, 0xFD	; 253
    1cd8:	28 81       	ld	r18, Y
    1cda:	c3 58       	subi	r28, 0x83	; 131
    1cdc:	d2 40       	sbci	r29, 0x02	; 2
    1cde:	cc 57       	subi	r28, 0x7C	; 124
    1ce0:	dd 4f       	sbci	r29, 0xFD	; 253
    1ce2:	38 81       	ld	r19, Y
    1ce4:	c4 58       	subi	r28, 0x84	; 132
    1ce6:	d2 40       	sbci	r29, 0x02	; 2
    1ce8:	44 2d       	mov	r20, r4
    1cea:	55 2d       	mov	r21, r5
    1cec:	66 2d       	mov	r22, r6
    1cee:	77 2d       	mov	r23, r7
    1cf0:	88 2d       	mov	r24, r8
    1cf2:	99 2d       	mov	r25, r9
    1cf4:	06 e0       	ldi	r16, 0x06	; 6
    1cf6:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <__lshrdi3>
    1cfa:	a2 26       	eor	r10, r18
    1cfc:	b3 26       	eor	r11, r19
    1cfe:	c4 26       	eor	r12, r20
    1d00:	d5 26       	eor	r13, r21
    1d02:	e6 26       	eor	r14, r22
    1d04:	f7 26       	eor	r15, r23
    1d06:	0e 2f       	mov	r16, r30
    1d08:	08 27       	eor	r16, r24
    1d0a:	19 27       	eor	r17, r25
    1d0c:	c5 56       	subi	r28, 0x65	; 101
    1d0e:	dd 4f       	sbci	r29, 0xFD	; 253
    1d10:	28 81       	ld	r18, Y
    1d12:	cb 59       	subi	r28, 0x9B	; 155
    1d14:	d2 40       	sbci	r29, 0x02	; 2
    1d16:	3f 2f       	mov	r19, r31
    1d18:	c4 56       	subi	r28, 0x64	; 100
    1d1a:	dd 4f       	sbci	r29, 0xFD	; 253
    1d1c:	48 81       	ld	r20, Y
    1d1e:	cc 59       	subi	r28, 0x9C	; 156
    1d20:	d2 40       	sbci	r29, 0x02	; 2
    1d22:	c3 56       	subi	r28, 0x63	; 99
    1d24:	dd 4f       	sbci	r29, 0xFD	; 253
    1d26:	58 81       	ld	r21, Y
    1d28:	cd 59       	subi	r28, 0x9D	; 157
    1d2a:	d2 40       	sbci	r29, 0x02	; 2
    1d2c:	ce 55       	subi	r28, 0x5E	; 94
    1d2e:	dd 4f       	sbci	r29, 0xFD	; 253
    1d30:	68 81       	ld	r22, Y
    1d32:	c2 5a       	subi	r28, 0xA2	; 162
    1d34:	d2 40       	sbci	r29, 0x02	; 2
    1d36:	cd 55       	subi	r28, 0x5D	; 93
    1d38:	dd 4f       	sbci	r29, 0xFD	; 253
    1d3a:	78 81       	ld	r23, Y
    1d3c:	c3 5a       	subi	r28, 0xA3	; 163
    1d3e:	d2 40       	sbci	r29, 0x02	; 2
    1d40:	cc 55       	subi	r28, 0x5C	; 92
    1d42:	dd 4f       	sbci	r29, 0xFD	; 253
    1d44:	88 81       	ld	r24, Y
    1d46:	c4 5a       	subi	r28, 0xA4	; 164
    1d48:	d2 40       	sbci	r29, 0x02	; 2
    1d4a:	cb 55       	subi	r28, 0x5B	; 91
    1d4c:	dd 4f       	sbci	r29, 0xFD	; 253
    1d4e:	98 81       	ld	r25, Y
    1d50:	c5 5a       	subi	r28, 0xA5	; 165
    1d52:	d2 40       	sbci	r29, 0x02	; 2
    1d54:	0e 94 05 3e 	call	0x7c0a	; 0x7c0a <__adddi3>
    1d58:	cd 57       	subi	r28, 0x7D	; 125
    1d5a:	dd 4f       	sbci	r29, 0xFD	; 253
    1d5c:	28 83       	st	Y, r18
    1d5e:	c3 58       	subi	r28, 0x83	; 131
    1d60:	d2 40       	sbci	r29, 0x02	; 2
    1d62:	43 2e       	mov	r4, r19
    1d64:	54 2e       	mov	r5, r20
    1d66:	65 2e       	mov	r6, r21
    1d68:	76 2e       	mov	r7, r22
    1d6a:	87 2e       	mov	r8, r23
    1d6c:	98 2e       	mov	r9, r24
    1d6e:	f9 2f       	mov	r31, r25
    1d70:	cb 57       	subi	r28, 0x7B	; 123
    1d72:	dd 4f       	sbci	r29, 0xFD	; 253
    1d74:	28 81       	ld	r18, Y
    1d76:	c5 58       	subi	r28, 0x85	; 133
    1d78:	d2 40       	sbci	r29, 0x02	; 2
    1d7a:	ca 57       	subi	r28, 0x7A	; 122
    1d7c:	dd 4f       	sbci	r29, 0xFD	; 253
    1d7e:	38 81       	ld	r19, Y
    1d80:	c6 58       	subi	r28, 0x86	; 134
    1d82:	d2 40       	sbci	r29, 0x02	; 2
    1d84:	c5 57       	subi	r28, 0x75	; 117
    1d86:	dd 4f       	sbci	r29, 0xFD	; 253
    1d88:	48 81       	ld	r20, Y
    1d8a:	cb 58       	subi	r28, 0x8B	; 139
    1d8c:	d2 40       	sbci	r29, 0x02	; 2
    1d8e:	c4 57       	subi	r28, 0x74	; 116
    1d90:	dd 4f       	sbci	r29, 0xFD	; 253
    1d92:	58 81       	ld	r21, Y
    1d94:	cc 58       	subi	r28, 0x8C	; 140
    1d96:	d2 40       	sbci	r29, 0x02	; 2
    1d98:	c3 57       	subi	r28, 0x73	; 115
    1d9a:	dd 4f       	sbci	r29, 0xFD	; 253
    1d9c:	68 81       	ld	r22, Y
    1d9e:	cd 58       	subi	r28, 0x8D	; 141
    1da0:	d2 40       	sbci	r29, 0x02	; 2
    1da2:	c2 57       	subi	r28, 0x72	; 114
    1da4:	dd 4f       	sbci	r29, 0xFD	; 253
    1da6:	78 81       	ld	r23, Y
    1da8:	ce 58       	subi	r28, 0x8E	; 142
    1daa:	d2 40       	sbci	r29, 0x02	; 2
    1dac:	c1 57       	subi	r28, 0x71	; 113
    1dae:	dd 4f       	sbci	r29, 0xFD	; 253
    1db0:	88 81       	ld	r24, Y
    1db2:	cf 58       	subi	r28, 0x8F	; 143
    1db4:	d2 40       	sbci	r29, 0x02	; 2
    1db6:	c0 57       	subi	r28, 0x70	; 112
    1db8:	dd 4f       	sbci	r29, 0xFD	; 253
    1dba:	98 81       	ld	r25, Y
    1dbc:	c0 59       	subi	r28, 0x90	; 144
    1dbe:	d2 40       	sbci	r29, 0x02	; 2
    1dc0:	08 e3       	ldi	r16, 0x38	; 56
    1dc2:	0e 94 ea 3d 	call	0x7bd4	; 0x7bd4 <__rotldi3>
    1dc6:	a2 2e       	mov	r10, r18
    1dc8:	b3 2e       	mov	r11, r19
    1dca:	c4 2e       	mov	r12, r20
    1dcc:	d5 2e       	mov	r13, r21
    1dce:	e6 2e       	mov	r14, r22
    1dd0:	f7 2e       	mov	r15, r23
    1dd2:	e8 2f       	mov	r30, r24
    1dd4:	19 2f       	mov	r17, r25
    1dd6:	cb 57       	subi	r28, 0x7B	; 123
    1dd8:	dd 4f       	sbci	r29, 0xFD	; 253
    1dda:	28 81       	ld	r18, Y
    1ddc:	c5 58       	subi	r28, 0x85	; 133
    1dde:	d2 40       	sbci	r29, 0x02	; 2
    1de0:	ca 57       	subi	r28, 0x7A	; 122
    1de2:	dd 4f       	sbci	r29, 0xFD	; 253
    1de4:	38 81       	ld	r19, Y
    1de6:	c6 58       	subi	r28, 0x86	; 134
    1de8:	d2 40       	sbci	r29, 0x02	; 2
    1dea:	c5 57       	subi	r28, 0x75	; 117
    1dec:	dd 4f       	sbci	r29, 0xFD	; 253
    1dee:	48 81       	ld	r20, Y
    1df0:	cb 58       	subi	r28, 0x8B	; 139
    1df2:	d2 40       	sbci	r29, 0x02	; 2
    1df4:	c4 57       	subi	r28, 0x74	; 116
    1df6:	dd 4f       	sbci	r29, 0xFD	; 253
    1df8:	58 81       	ld	r21, Y
    1dfa:	cc 58       	subi	r28, 0x8C	; 140
    1dfc:	d2 40       	sbci	r29, 0x02	; 2
    1dfe:	c3 57       	subi	r28, 0x73	; 115
    1e00:	dd 4f       	sbci	r29, 0xFD	; 253
    1e02:	68 81       	ld	r22, Y
    1e04:	cd 58       	subi	r28, 0x8D	; 141
    1e06:	d2 40       	sbci	r29, 0x02	; 2
    1e08:	c2 57       	subi	r28, 0x72	; 114
    1e0a:	dd 4f       	sbci	r29, 0xFD	; 253
    1e0c:	78 81       	ld	r23, Y
    1e0e:	ce 58       	subi	r28, 0x8E	; 142
    1e10:	d2 40       	sbci	r29, 0x02	; 2
    1e12:	c1 57       	subi	r28, 0x71	; 113
    1e14:	dd 4f       	sbci	r29, 0xFD	; 253
    1e16:	88 81       	ld	r24, Y
    1e18:	cf 58       	subi	r28, 0x8F	; 143
    1e1a:	d2 40       	sbci	r29, 0x02	; 2
    1e1c:	c0 57       	subi	r28, 0x70	; 112
    1e1e:	dd 4f       	sbci	r29, 0xFD	; 253
    1e20:	98 81       	ld	r25, Y
    1e22:	c0 59       	subi	r28, 0x90	; 144
    1e24:	d2 40       	sbci	r29, 0x02	; 2
    1e26:	0f e3       	ldi	r16, 0x3F	; 63
    1e28:	0e 94 ea 3d 	call	0x7bd4	; 0x7bd4 <__rotldi3>
    1e2c:	a2 26       	eor	r10, r18
    1e2e:	b3 26       	eor	r11, r19
    1e30:	c4 26       	eor	r12, r20
    1e32:	d5 26       	eor	r13, r21
    1e34:	e6 26       	eor	r14, r22
    1e36:	f7 26       	eor	r15, r23
    1e38:	e8 27       	eor	r30, r24
    1e3a:	19 27       	eor	r17, r25
    1e3c:	cb 57       	subi	r28, 0x7B	; 123
    1e3e:	dd 4f       	sbci	r29, 0xFD	; 253
    1e40:	28 81       	ld	r18, Y
    1e42:	c5 58       	subi	r28, 0x85	; 133
    1e44:	d2 40       	sbci	r29, 0x02	; 2
    1e46:	ca 57       	subi	r28, 0x7A	; 122
    1e48:	dd 4f       	sbci	r29, 0xFD	; 253
    1e4a:	38 81       	ld	r19, Y
    1e4c:	c6 58       	subi	r28, 0x86	; 134
    1e4e:	d2 40       	sbci	r29, 0x02	; 2
    1e50:	c5 57       	subi	r28, 0x75	; 117
    1e52:	dd 4f       	sbci	r29, 0xFD	; 253
    1e54:	48 81       	ld	r20, Y
    1e56:	cb 58       	subi	r28, 0x8B	; 139
    1e58:	d2 40       	sbci	r29, 0x02	; 2
    1e5a:	c4 57       	subi	r28, 0x74	; 116
    1e5c:	dd 4f       	sbci	r29, 0xFD	; 253
    1e5e:	58 81       	ld	r21, Y
    1e60:	cc 58       	subi	r28, 0x8C	; 140
    1e62:	d2 40       	sbci	r29, 0x02	; 2
    1e64:	c3 57       	subi	r28, 0x73	; 115
    1e66:	dd 4f       	sbci	r29, 0xFD	; 253
    1e68:	68 81       	ld	r22, Y
    1e6a:	cd 58       	subi	r28, 0x8D	; 141
    1e6c:	d2 40       	sbci	r29, 0x02	; 2
    1e6e:	c2 57       	subi	r28, 0x72	; 114
    1e70:	dd 4f       	sbci	r29, 0xFD	; 253
    1e72:	78 81       	ld	r23, Y
    1e74:	ce 58       	subi	r28, 0x8E	; 142
    1e76:	d2 40       	sbci	r29, 0x02	; 2
    1e78:	c1 57       	subi	r28, 0x71	; 113
    1e7a:	dd 4f       	sbci	r29, 0xFD	; 253
    1e7c:	88 81       	ld	r24, Y
    1e7e:	cf 58       	subi	r28, 0x8F	; 143
    1e80:	d2 40       	sbci	r29, 0x02	; 2
    1e82:	c0 57       	subi	r28, 0x70	; 112
    1e84:	dd 4f       	sbci	r29, 0xFD	; 253
    1e86:	98 81       	ld	r25, Y
    1e88:	c0 59       	subi	r28, 0x90	; 144
    1e8a:	d2 40       	sbci	r29, 0x02	; 2
    1e8c:	07 e0       	ldi	r16, 0x07	; 7
    1e8e:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <__lshrdi3>
    1e92:	a2 26       	eor	r10, r18
    1e94:	b3 26       	eor	r11, r19
    1e96:	c4 26       	eor	r12, r20
    1e98:	d5 26       	eor	r13, r21
    1e9a:	e6 26       	eor	r14, r22
    1e9c:	f7 26       	eor	r15, r23
    1e9e:	0e 2f       	mov	r16, r30
    1ea0:	08 27       	eor	r16, r24
    1ea2:	19 27       	eor	r17, r25
    1ea4:	cd 57       	subi	r28, 0x7D	; 125
    1ea6:	dd 4f       	sbci	r29, 0xFD	; 253
    1ea8:	28 81       	ld	r18, Y
    1eaa:	c3 58       	subi	r28, 0x83	; 131
    1eac:	d2 40       	sbci	r29, 0x02	; 2
    1eae:	34 2d       	mov	r19, r4
    1eb0:	45 2d       	mov	r20, r5
    1eb2:	56 2d       	mov	r21, r6
    1eb4:	67 2d       	mov	r22, r7
    1eb6:	78 2d       	mov	r23, r8
    1eb8:	89 2d       	mov	r24, r9
    1eba:	9f 2f       	mov	r25, r31
    1ebc:	0e 94 05 3e 	call	0x7c0a	; 0x7c0a <__adddi3>
    1ec0:	d0 96       	adiw	r26, 0x30	; 48
    1ec2:	2c 93       	st	X, r18
    1ec4:	d0 97       	sbiw	r26, 0x30	; 48
    1ec6:	d1 96       	adiw	r26, 0x31	; 49
    1ec8:	3c 93       	st	X, r19
    1eca:	d1 97       	sbiw	r26, 0x31	; 49
    1ecc:	d2 96       	adiw	r26, 0x32	; 50
    1ece:	4c 93       	st	X, r20
    1ed0:	d2 97       	sbiw	r26, 0x32	; 50
    1ed2:	d3 96       	adiw	r26, 0x33	; 51
    1ed4:	5c 93       	st	X, r21
    1ed6:	d3 97       	sbiw	r26, 0x33	; 51
    1ed8:	d4 96       	adiw	r26, 0x34	; 52
    1eda:	6c 93       	st	X, r22
    1edc:	d4 97       	sbiw	r26, 0x34	; 52
    1ede:	d5 96       	adiw	r26, 0x35	; 53
    1ee0:	7c 93       	st	X, r23
    1ee2:	d5 97       	sbiw	r26, 0x35	; 53
    1ee4:	d6 96       	adiw	r26, 0x36	; 54
    1ee6:	8c 93       	st	X, r24
    1ee8:	d6 97       	sbiw	r26, 0x36	; 54
    1eea:	d7 96       	adiw	r26, 0x37	; 55
    1eec:	9c 93       	st	X, r25
    1eee:	d7 97       	sbiw	r26, 0x37	; 55

	for (t = 0; t < 16; t++)
	{
		w[t] = hs64->m[t];
	}
	for (t = 16; t < 80; t++)
    1ef0:	cf 57       	subi	r28, 0x7F	; 127
    1ef2:	dd 4f       	sbci	r29, 0xFD	; 253
    1ef4:	e8 81       	ld	r30, Y
    1ef6:	f9 81       	ldd	r31, Y+1	; 0x01
    1ef8:	c1 58       	subi	r28, 0x81	; 129
    1efa:	d2 40       	sbci	r29, 0x02	; 2
    1efc:	ae 17       	cp	r26, r30
    1efe:	bf 07       	cpc	r27, r31
    1f00:	09 f0       	breq	.+2      	; 0x1f04 <sha512Block+0x492>
    1f02:	1b ce       	rjmp	.-970    	; 0x1b3a <sha512Block+0xc8>
	{
		w[t] = littleSigma1(w[t - 2]) + w[t - 7] + littleSigma0(w[t - 15]) + w[t - 16];
	}
	a = hs64->h[0];
    1f04:	ce 52       	subi	r28, 0x2E	; 46
    1f06:	dd 4f       	sbci	r29, 0xFD	; 253
    1f08:	a8 81       	ld	r26, Y
    1f0a:	b9 81       	ldd	r27, Y+1	; 0x01
    1f0c:	c2 5d       	subi	r28, 0xD2	; 210
    1f0e:	d2 40       	sbci	r29, 0x02	; 2
    1f10:	bc 91       	ld	r27, X
    1f12:	cc 52       	subi	r28, 0x2C	; 44
    1f14:	dd 4f       	sbci	r29, 0xFD	; 253
    1f16:	b8 83       	st	Y, r27
    1f18:	c4 5d       	subi	r28, 0xD4	; 212
    1f1a:	d2 40       	sbci	r29, 0x02	; 2
    1f1c:	ce 52       	subi	r28, 0x2E	; 46
    1f1e:	dd 4f       	sbci	r29, 0xFD	; 253
    1f20:	a8 81       	ld	r26, Y
    1f22:	b9 81       	ldd	r27, Y+1	; 0x01
    1f24:	c2 5d       	subi	r28, 0xD2	; 210
    1f26:	d2 40       	sbci	r29, 0x02	; 2
    1f28:	11 96       	adiw	r26, 0x01	; 1
    1f2a:	bc 91       	ld	r27, X
    1f2c:	cb 52       	subi	r28, 0x2B	; 43
    1f2e:	dd 4f       	sbci	r29, 0xFD	; 253
    1f30:	b8 83       	st	Y, r27
    1f32:	c5 5d       	subi	r28, 0xD5	; 213
    1f34:	d2 40       	sbci	r29, 0x02	; 2
    1f36:	ce 52       	subi	r28, 0x2E	; 46
    1f38:	dd 4f       	sbci	r29, 0xFD	; 253
    1f3a:	a8 81       	ld	r26, Y
    1f3c:	b9 81       	ldd	r27, Y+1	; 0x01
    1f3e:	c2 5d       	subi	r28, 0xD2	; 210
    1f40:	d2 40       	sbci	r29, 0x02	; 2
    1f42:	12 96       	adiw	r26, 0x02	; 2
    1f44:	bc 91       	ld	r27, X
    1f46:	ca 52       	subi	r28, 0x2A	; 42
    1f48:	dd 4f       	sbci	r29, 0xFD	; 253
    1f4a:	b8 83       	st	Y, r27
    1f4c:	c6 5d       	subi	r28, 0xD6	; 214
    1f4e:	d2 40       	sbci	r29, 0x02	; 2
    1f50:	ce 52       	subi	r28, 0x2E	; 46
    1f52:	dd 4f       	sbci	r29, 0xFD	; 253
    1f54:	a8 81       	ld	r26, Y
    1f56:	b9 81       	ldd	r27, Y+1	; 0x01
    1f58:	c2 5d       	subi	r28, 0xD2	; 210
    1f5a:	d2 40       	sbci	r29, 0x02	; 2
    1f5c:	13 96       	adiw	r26, 0x03	; 3
    1f5e:	bc 91       	ld	r27, X
    1f60:	c9 52       	subi	r28, 0x29	; 41
    1f62:	dd 4f       	sbci	r29, 0xFD	; 253
    1f64:	b8 83       	st	Y, r27
    1f66:	c7 5d       	subi	r28, 0xD7	; 215
    1f68:	d2 40       	sbci	r29, 0x02	; 2
    1f6a:	ce 52       	subi	r28, 0x2E	; 46
    1f6c:	dd 4f       	sbci	r29, 0xFD	; 253
    1f6e:	a8 81       	ld	r26, Y
    1f70:	b9 81       	ldd	r27, Y+1	; 0x01
    1f72:	c2 5d       	subi	r28, 0xD2	; 210
    1f74:	d2 40       	sbci	r29, 0x02	; 2
    1f76:	14 96       	adiw	r26, 0x04	; 4
    1f78:	bc 91       	ld	r27, X
    1f7a:	c8 52       	subi	r28, 0x28	; 40
    1f7c:	dd 4f       	sbci	r29, 0xFD	; 253
    1f7e:	b8 83       	st	Y, r27
    1f80:	c8 5d       	subi	r28, 0xD8	; 216
    1f82:	d2 40       	sbci	r29, 0x02	; 2
    1f84:	ce 52       	subi	r28, 0x2E	; 46
    1f86:	dd 4f       	sbci	r29, 0xFD	; 253
    1f88:	a8 81       	ld	r26, Y
    1f8a:	b9 81       	ldd	r27, Y+1	; 0x01
    1f8c:	c2 5d       	subi	r28, 0xD2	; 210
    1f8e:	d2 40       	sbci	r29, 0x02	; 2
    1f90:	15 96       	adiw	r26, 0x05	; 5
    1f92:	bc 91       	ld	r27, X
    1f94:	c7 52       	subi	r28, 0x27	; 39
    1f96:	dd 4f       	sbci	r29, 0xFD	; 253
    1f98:	b8 83       	st	Y, r27
    1f9a:	c9 5d       	subi	r28, 0xD9	; 217
    1f9c:	d2 40       	sbci	r29, 0x02	; 2
    1f9e:	ce 52       	subi	r28, 0x2E	; 46
    1fa0:	dd 4f       	sbci	r29, 0xFD	; 253
    1fa2:	a8 81       	ld	r26, Y
    1fa4:	b9 81       	ldd	r27, Y+1	; 0x01
    1fa6:	c2 5d       	subi	r28, 0xD2	; 210
    1fa8:	d2 40       	sbci	r29, 0x02	; 2
    1faa:	16 96       	adiw	r26, 0x06	; 6
    1fac:	bc 91       	ld	r27, X
    1fae:	c6 52       	subi	r28, 0x26	; 38
    1fb0:	dd 4f       	sbci	r29, 0xFD	; 253
    1fb2:	b8 83       	st	Y, r27
    1fb4:	ca 5d       	subi	r28, 0xDA	; 218
    1fb6:	d2 40       	sbci	r29, 0x02	; 2
    1fb8:	ce 52       	subi	r28, 0x2E	; 46
    1fba:	dd 4f       	sbci	r29, 0xFD	; 253
    1fbc:	a8 81       	ld	r26, Y
    1fbe:	b9 81       	ldd	r27, Y+1	; 0x01
    1fc0:	c2 5d       	subi	r28, 0xD2	; 210
    1fc2:	d2 40       	sbci	r29, 0x02	; 2
    1fc4:	17 96       	adiw	r26, 0x07	; 7
    1fc6:	bc 91       	ld	r27, X
    1fc8:	c5 52       	subi	r28, 0x25	; 37
    1fca:	dd 4f       	sbci	r29, 0xFD	; 253
    1fcc:	b8 83       	st	Y, r27
    1fce:	cb 5d       	subi	r28, 0xDB	; 219
    1fd0:	d2 40       	sbci	r29, 0x02	; 2
	b = hs64->h[1];
    1fd2:	ce 52       	subi	r28, 0x2E	; 46
    1fd4:	dd 4f       	sbci	r29, 0xFD	; 253
    1fd6:	a8 81       	ld	r26, Y
    1fd8:	b9 81       	ldd	r27, Y+1	; 0x01
    1fda:	c2 5d       	subi	r28, 0xD2	; 210
    1fdc:	d2 40       	sbci	r29, 0x02	; 2
    1fde:	18 96       	adiw	r26, 0x08	; 8
    1fe0:	bc 91       	ld	r27, X
    1fe2:	c4 52       	subi	r28, 0x24	; 36
    1fe4:	dd 4f       	sbci	r29, 0xFD	; 253
    1fe6:	b8 83       	st	Y, r27
    1fe8:	cc 5d       	subi	r28, 0xDC	; 220
    1fea:	d2 40       	sbci	r29, 0x02	; 2
    1fec:	ce 52       	subi	r28, 0x2E	; 46
    1fee:	dd 4f       	sbci	r29, 0xFD	; 253
    1ff0:	a8 81       	ld	r26, Y
    1ff2:	b9 81       	ldd	r27, Y+1	; 0x01
    1ff4:	c2 5d       	subi	r28, 0xD2	; 210
    1ff6:	d2 40       	sbci	r29, 0x02	; 2
    1ff8:	19 96       	adiw	r26, 0x09	; 9
    1ffa:	bc 91       	ld	r27, X
    1ffc:	c3 52       	subi	r28, 0x23	; 35
    1ffe:	dd 4f       	sbci	r29, 0xFD	; 253
    2000:	b8 83       	st	Y, r27
    2002:	cd 5d       	subi	r28, 0xDD	; 221
    2004:	d2 40       	sbci	r29, 0x02	; 2
    2006:	ce 52       	subi	r28, 0x2E	; 46
    2008:	dd 4f       	sbci	r29, 0xFD	; 253
    200a:	a8 81       	ld	r26, Y
    200c:	b9 81       	ldd	r27, Y+1	; 0x01
    200e:	c2 5d       	subi	r28, 0xD2	; 210
    2010:	d2 40       	sbci	r29, 0x02	; 2
    2012:	1a 96       	adiw	r26, 0x0a	; 10
    2014:	bc 91       	ld	r27, X
    2016:	c2 52       	subi	r28, 0x22	; 34
    2018:	dd 4f       	sbci	r29, 0xFD	; 253
    201a:	b8 83       	st	Y, r27
    201c:	ce 5d       	subi	r28, 0xDE	; 222
    201e:	d2 40       	sbci	r29, 0x02	; 2
    2020:	ce 52       	subi	r28, 0x2E	; 46
    2022:	dd 4f       	sbci	r29, 0xFD	; 253
    2024:	a8 81       	ld	r26, Y
    2026:	b9 81       	ldd	r27, Y+1	; 0x01
    2028:	c2 5d       	subi	r28, 0xD2	; 210
    202a:	d2 40       	sbci	r29, 0x02	; 2
    202c:	1b 96       	adiw	r26, 0x0b	; 11
    202e:	bc 91       	ld	r27, X
    2030:	c1 52       	subi	r28, 0x21	; 33
    2032:	dd 4f       	sbci	r29, 0xFD	; 253
    2034:	b8 83       	st	Y, r27
    2036:	cf 5d       	subi	r28, 0xDF	; 223
    2038:	d2 40       	sbci	r29, 0x02	; 2
    203a:	ce 52       	subi	r28, 0x2E	; 46
    203c:	dd 4f       	sbci	r29, 0xFD	; 253
    203e:	a8 81       	ld	r26, Y
    2040:	b9 81       	ldd	r27, Y+1	; 0x01
    2042:	c2 5d       	subi	r28, 0xD2	; 210
    2044:	d2 40       	sbci	r29, 0x02	; 2
    2046:	1c 96       	adiw	r26, 0x0c	; 12
    2048:	bc 91       	ld	r27, X
    204a:	c0 52       	subi	r28, 0x20	; 32
    204c:	dd 4f       	sbci	r29, 0xFD	; 253
    204e:	b8 83       	st	Y, r27
    2050:	c0 5e       	subi	r28, 0xE0	; 224
    2052:	d2 40       	sbci	r29, 0x02	; 2
    2054:	ce 52       	subi	r28, 0x2E	; 46
    2056:	dd 4f       	sbci	r29, 0xFD	; 253
    2058:	a8 81       	ld	r26, Y
    205a:	b9 81       	ldd	r27, Y+1	; 0x01
    205c:	c2 5d       	subi	r28, 0xD2	; 210
    205e:	d2 40       	sbci	r29, 0x02	; 2
    2060:	1d 96       	adiw	r26, 0x0d	; 13
    2062:	bc 91       	ld	r27, X
    2064:	cf 51       	subi	r28, 0x1F	; 31
    2066:	dd 4f       	sbci	r29, 0xFD	; 253
    2068:	b8 83       	st	Y, r27
    206a:	c1 5e       	subi	r28, 0xE1	; 225
    206c:	d2 40       	sbci	r29, 0x02	; 2
    206e:	ce 52       	subi	r28, 0x2E	; 46
    2070:	dd 4f       	sbci	r29, 0xFD	; 253
    2072:	a8 81       	ld	r26, Y
    2074:	b9 81       	ldd	r27, Y+1	; 0x01
    2076:	c2 5d       	subi	r28, 0xD2	; 210
    2078:	d2 40       	sbci	r29, 0x02	; 2
    207a:	1e 96       	adiw	r26, 0x0e	; 14
    207c:	bc 91       	ld	r27, X
    207e:	ce 51       	subi	r28, 0x1E	; 30
    2080:	dd 4f       	sbci	r29, 0xFD	; 253
    2082:	b8 83       	st	Y, r27
    2084:	c2 5e       	subi	r28, 0xE2	; 226
    2086:	d2 40       	sbci	r29, 0x02	; 2
    2088:	ce 52       	subi	r28, 0x2E	; 46
    208a:	dd 4f       	sbci	r29, 0xFD	; 253
    208c:	a8 81       	ld	r26, Y
    208e:	b9 81       	ldd	r27, Y+1	; 0x01
    2090:	c2 5d       	subi	r28, 0xD2	; 210
    2092:	d2 40       	sbci	r29, 0x02	; 2
    2094:	1f 96       	adiw	r26, 0x0f	; 15
    2096:	bc 91       	ld	r27, X
    2098:	cd 51       	subi	r28, 0x1D	; 29
    209a:	dd 4f       	sbci	r29, 0xFD	; 253
    209c:	b8 83       	st	Y, r27
    209e:	c3 5e       	subi	r28, 0xE3	; 227
    20a0:	d2 40       	sbci	r29, 0x02	; 2
	c = hs64->h[2];
    20a2:	ce 52       	subi	r28, 0x2E	; 46
    20a4:	dd 4f       	sbci	r29, 0xFD	; 253
    20a6:	a8 81       	ld	r26, Y
    20a8:	b9 81       	ldd	r27, Y+1	; 0x01
    20aa:	c2 5d       	subi	r28, 0xD2	; 210
    20ac:	d2 40       	sbci	r29, 0x02	; 2
    20ae:	50 96       	adiw	r26, 0x10	; 16
    20b0:	bc 91       	ld	r27, X
    20b2:	cc 51       	subi	r28, 0x1C	; 28
    20b4:	dd 4f       	sbci	r29, 0xFD	; 253
    20b6:	b8 83       	st	Y, r27
    20b8:	c4 5e       	subi	r28, 0xE4	; 228
    20ba:	d2 40       	sbci	r29, 0x02	; 2
    20bc:	ce 52       	subi	r28, 0x2E	; 46
    20be:	dd 4f       	sbci	r29, 0xFD	; 253
    20c0:	a8 81       	ld	r26, Y
    20c2:	b9 81       	ldd	r27, Y+1	; 0x01
    20c4:	c2 5d       	subi	r28, 0xD2	; 210
    20c6:	d2 40       	sbci	r29, 0x02	; 2
    20c8:	51 96       	adiw	r26, 0x11	; 17
    20ca:	bc 91       	ld	r27, X
    20cc:	cb 51       	subi	r28, 0x1B	; 27
    20ce:	dd 4f       	sbci	r29, 0xFD	; 253
    20d0:	b8 83       	st	Y, r27
    20d2:	c5 5e       	subi	r28, 0xE5	; 229
    20d4:	d2 40       	sbci	r29, 0x02	; 2
    20d6:	ce 52       	subi	r28, 0x2E	; 46
    20d8:	dd 4f       	sbci	r29, 0xFD	; 253
    20da:	a8 81       	ld	r26, Y
    20dc:	b9 81       	ldd	r27, Y+1	; 0x01
    20de:	c2 5d       	subi	r28, 0xD2	; 210
    20e0:	d2 40       	sbci	r29, 0x02	; 2
    20e2:	52 96       	adiw	r26, 0x12	; 18
    20e4:	bc 91       	ld	r27, X
    20e6:	ca 51       	subi	r28, 0x1A	; 26
    20e8:	dd 4f       	sbci	r29, 0xFD	; 253
    20ea:	b8 83       	st	Y, r27
    20ec:	c6 5e       	subi	r28, 0xE6	; 230
    20ee:	d2 40       	sbci	r29, 0x02	; 2
    20f0:	ce 52       	subi	r28, 0x2E	; 46
    20f2:	dd 4f       	sbci	r29, 0xFD	; 253
    20f4:	a8 81       	ld	r26, Y
    20f6:	b9 81       	ldd	r27, Y+1	; 0x01
    20f8:	c2 5d       	subi	r28, 0xD2	; 210
    20fa:	d2 40       	sbci	r29, 0x02	; 2
    20fc:	53 96       	adiw	r26, 0x13	; 19
    20fe:	bc 91       	ld	r27, X
    2100:	c9 51       	subi	r28, 0x19	; 25
    2102:	dd 4f       	sbci	r29, 0xFD	; 253
    2104:	b8 83       	st	Y, r27
    2106:	c7 5e       	subi	r28, 0xE7	; 231
    2108:	d2 40       	sbci	r29, 0x02	; 2
    210a:	ce 52       	subi	r28, 0x2E	; 46
    210c:	dd 4f       	sbci	r29, 0xFD	; 253
    210e:	a8 81       	ld	r26, Y
    2110:	b9 81       	ldd	r27, Y+1	; 0x01
    2112:	c2 5d       	subi	r28, 0xD2	; 210
    2114:	d2 40       	sbci	r29, 0x02	; 2
    2116:	54 96       	adiw	r26, 0x14	; 20
    2118:	bc 91       	ld	r27, X
    211a:	c8 51       	subi	r28, 0x18	; 24
    211c:	dd 4f       	sbci	r29, 0xFD	; 253
    211e:	b8 83       	st	Y, r27
    2120:	c8 5e       	subi	r28, 0xE8	; 232
    2122:	d2 40       	sbci	r29, 0x02	; 2
    2124:	ce 52       	subi	r28, 0x2E	; 46
    2126:	dd 4f       	sbci	r29, 0xFD	; 253
    2128:	a8 81       	ld	r26, Y
    212a:	b9 81       	ldd	r27, Y+1	; 0x01
    212c:	c2 5d       	subi	r28, 0xD2	; 210
    212e:	d2 40       	sbci	r29, 0x02	; 2
    2130:	55 96       	adiw	r26, 0x15	; 21
    2132:	bc 91       	ld	r27, X
    2134:	c7 51       	subi	r28, 0x17	; 23
    2136:	dd 4f       	sbci	r29, 0xFD	; 253
    2138:	b8 83       	st	Y, r27
    213a:	c9 5e       	subi	r28, 0xE9	; 233
    213c:	d2 40       	sbci	r29, 0x02	; 2
    213e:	ce 52       	subi	r28, 0x2E	; 46
    2140:	dd 4f       	sbci	r29, 0xFD	; 253
    2142:	a8 81       	ld	r26, Y
    2144:	b9 81       	ldd	r27, Y+1	; 0x01
    2146:	c2 5d       	subi	r28, 0xD2	; 210
    2148:	d2 40       	sbci	r29, 0x02	; 2
    214a:	56 96       	adiw	r26, 0x16	; 22
    214c:	bc 91       	ld	r27, X
    214e:	c6 51       	subi	r28, 0x16	; 22
    2150:	dd 4f       	sbci	r29, 0xFD	; 253
    2152:	b8 83       	st	Y, r27
    2154:	ca 5e       	subi	r28, 0xEA	; 234
    2156:	d2 40       	sbci	r29, 0x02	; 2
    2158:	ce 52       	subi	r28, 0x2E	; 46
    215a:	dd 4f       	sbci	r29, 0xFD	; 253
    215c:	a8 81       	ld	r26, Y
    215e:	b9 81       	ldd	r27, Y+1	; 0x01
    2160:	c2 5d       	subi	r28, 0xD2	; 210
    2162:	d2 40       	sbci	r29, 0x02	; 2
    2164:	57 96       	adiw	r26, 0x17	; 23
    2166:	bc 91       	ld	r27, X
    2168:	c5 51       	subi	r28, 0x15	; 21
    216a:	dd 4f       	sbci	r29, 0xFD	; 253
    216c:	b8 83       	st	Y, r27
    216e:	cb 5e       	subi	r28, 0xEB	; 235
    2170:	d2 40       	sbci	r29, 0x02	; 2
	d = hs64->h[3];
    2172:	ce 52       	subi	r28, 0x2E	; 46
    2174:	dd 4f       	sbci	r29, 0xFD	; 253
    2176:	a8 81       	ld	r26, Y
    2178:	b9 81       	ldd	r27, Y+1	; 0x01
    217a:	c2 5d       	subi	r28, 0xD2	; 210
    217c:	d2 40       	sbci	r29, 0x02	; 2
    217e:	58 96       	adiw	r26, 0x18	; 24
    2180:	bc 91       	ld	r27, X
    2182:	c4 51       	subi	r28, 0x14	; 20
    2184:	dd 4f       	sbci	r29, 0xFD	; 253
    2186:	b8 83       	st	Y, r27
    2188:	cc 5e       	subi	r28, 0xEC	; 236
    218a:	d2 40       	sbci	r29, 0x02	; 2
    218c:	ce 52       	subi	r28, 0x2E	; 46
    218e:	dd 4f       	sbci	r29, 0xFD	; 253
    2190:	a8 81       	ld	r26, Y
    2192:	b9 81       	ldd	r27, Y+1	; 0x01
    2194:	c2 5d       	subi	r28, 0xD2	; 210
    2196:	d2 40       	sbci	r29, 0x02	; 2
    2198:	59 96       	adiw	r26, 0x19	; 25
    219a:	bc 91       	ld	r27, X
    219c:	c3 51       	subi	r28, 0x13	; 19
    219e:	dd 4f       	sbci	r29, 0xFD	; 253
    21a0:	b8 83       	st	Y, r27
    21a2:	cd 5e       	subi	r28, 0xED	; 237
    21a4:	d2 40       	sbci	r29, 0x02	; 2
    21a6:	ce 52       	subi	r28, 0x2E	; 46
    21a8:	dd 4f       	sbci	r29, 0xFD	; 253
    21aa:	a8 81       	ld	r26, Y
    21ac:	b9 81       	ldd	r27, Y+1	; 0x01
    21ae:	c2 5d       	subi	r28, 0xD2	; 210
    21b0:	d2 40       	sbci	r29, 0x02	; 2
    21b2:	5a 96       	adiw	r26, 0x1a	; 26
    21b4:	bc 91       	ld	r27, X
    21b6:	c2 51       	subi	r28, 0x12	; 18
    21b8:	dd 4f       	sbci	r29, 0xFD	; 253
    21ba:	b8 83       	st	Y, r27
    21bc:	ce 5e       	subi	r28, 0xEE	; 238
    21be:	d2 40       	sbci	r29, 0x02	; 2
    21c0:	ce 52       	subi	r28, 0x2E	; 46
    21c2:	dd 4f       	sbci	r29, 0xFD	; 253
    21c4:	a8 81       	ld	r26, Y
    21c6:	b9 81       	ldd	r27, Y+1	; 0x01
    21c8:	c2 5d       	subi	r28, 0xD2	; 210
    21ca:	d2 40       	sbci	r29, 0x02	; 2
    21cc:	5b 96       	adiw	r26, 0x1b	; 27
    21ce:	bc 91       	ld	r27, X
    21d0:	c1 51       	subi	r28, 0x11	; 17
    21d2:	dd 4f       	sbci	r29, 0xFD	; 253
    21d4:	b8 83       	st	Y, r27
    21d6:	cf 5e       	subi	r28, 0xEF	; 239
    21d8:	d2 40       	sbci	r29, 0x02	; 2
    21da:	ce 52       	subi	r28, 0x2E	; 46
    21dc:	dd 4f       	sbci	r29, 0xFD	; 253
    21de:	a8 81       	ld	r26, Y
    21e0:	b9 81       	ldd	r27, Y+1	; 0x01
    21e2:	c2 5d       	subi	r28, 0xD2	; 210
    21e4:	d2 40       	sbci	r29, 0x02	; 2
    21e6:	5c 96       	adiw	r26, 0x1c	; 28
    21e8:	bc 91       	ld	r27, X
    21ea:	c0 51       	subi	r28, 0x10	; 16
    21ec:	dd 4f       	sbci	r29, 0xFD	; 253
    21ee:	b8 83       	st	Y, r27
    21f0:	c0 5f       	subi	r28, 0xF0	; 240
    21f2:	d2 40       	sbci	r29, 0x02	; 2
    21f4:	ce 52       	subi	r28, 0x2E	; 46
    21f6:	dd 4f       	sbci	r29, 0xFD	; 253
    21f8:	a8 81       	ld	r26, Y
    21fa:	b9 81       	ldd	r27, Y+1	; 0x01
    21fc:	c2 5d       	subi	r28, 0xD2	; 210
    21fe:	d2 40       	sbci	r29, 0x02	; 2
    2200:	5d 96       	adiw	r26, 0x1d	; 29
    2202:	bc 91       	ld	r27, X
    2204:	cf 50       	subi	r28, 0x0F	; 15
    2206:	dd 4f       	sbci	r29, 0xFD	; 253
    2208:	b8 83       	st	Y, r27
    220a:	c1 5f       	subi	r28, 0xF1	; 241
    220c:	d2 40       	sbci	r29, 0x02	; 2
    220e:	ce 52       	subi	r28, 0x2E	; 46
    2210:	dd 4f       	sbci	r29, 0xFD	; 253
    2212:	a8 81       	ld	r26, Y
    2214:	b9 81       	ldd	r27, Y+1	; 0x01
    2216:	c2 5d       	subi	r28, 0xD2	; 210
    2218:	d2 40       	sbci	r29, 0x02	; 2
    221a:	5e 96       	adiw	r26, 0x1e	; 30
    221c:	bc 91       	ld	r27, X
    221e:	ce 50       	subi	r28, 0x0E	; 14
    2220:	dd 4f       	sbci	r29, 0xFD	; 253
    2222:	b8 83       	st	Y, r27
    2224:	c2 5f       	subi	r28, 0xF2	; 242
    2226:	d2 40       	sbci	r29, 0x02	; 2
    2228:	ce 52       	subi	r28, 0x2E	; 46
    222a:	dd 4f       	sbci	r29, 0xFD	; 253
    222c:	a8 81       	ld	r26, Y
    222e:	b9 81       	ldd	r27, Y+1	; 0x01
    2230:	c2 5d       	subi	r28, 0xD2	; 210
    2232:	d2 40       	sbci	r29, 0x02	; 2
    2234:	5f 96       	adiw	r26, 0x1f	; 31
    2236:	bc 91       	ld	r27, X
    2238:	cd 50       	subi	r28, 0x0D	; 13
    223a:	dd 4f       	sbci	r29, 0xFD	; 253
    223c:	b8 83       	st	Y, r27
    223e:	c3 5f       	subi	r28, 0xF3	; 243
    2240:	d2 40       	sbci	r29, 0x02	; 2
	e = hs64->h[4];
    2242:	ce 52       	subi	r28, 0x2E	; 46
    2244:	dd 4f       	sbci	r29, 0xFD	; 253
    2246:	a8 81       	ld	r26, Y
    2248:	b9 81       	ldd	r27, Y+1	; 0x01
    224a:	c2 5d       	subi	r28, 0xD2	; 210
    224c:	d2 40       	sbci	r29, 0x02	; 2
    224e:	90 96       	adiw	r26, 0x20	; 32
    2250:	bc 91       	ld	r27, X
    2252:	cc 50       	subi	r28, 0x0C	; 12
    2254:	dd 4f       	sbci	r29, 0xFD	; 253
    2256:	b8 83       	st	Y, r27
    2258:	c4 5f       	subi	r28, 0xF4	; 244
    225a:	d2 40       	sbci	r29, 0x02	; 2
    225c:	ce 52       	subi	r28, 0x2E	; 46
    225e:	dd 4f       	sbci	r29, 0xFD	; 253
    2260:	a8 81       	ld	r26, Y
    2262:	b9 81       	ldd	r27, Y+1	; 0x01
    2264:	c2 5d       	subi	r28, 0xD2	; 210
    2266:	d2 40       	sbci	r29, 0x02	; 2
    2268:	91 96       	adiw	r26, 0x21	; 33
    226a:	bc 91       	ld	r27, X
    226c:	cb 50       	subi	r28, 0x0B	; 11
    226e:	dd 4f       	sbci	r29, 0xFD	; 253
    2270:	b8 83       	st	Y, r27
    2272:	c5 5f       	subi	r28, 0xF5	; 245
    2274:	d2 40       	sbci	r29, 0x02	; 2
    2276:	ce 52       	subi	r28, 0x2E	; 46
    2278:	dd 4f       	sbci	r29, 0xFD	; 253
    227a:	a8 81       	ld	r26, Y
    227c:	b9 81       	ldd	r27, Y+1	; 0x01
    227e:	c2 5d       	subi	r28, 0xD2	; 210
    2280:	d2 40       	sbci	r29, 0x02	; 2
    2282:	92 96       	adiw	r26, 0x22	; 34
    2284:	bc 91       	ld	r27, X
    2286:	ca 50       	subi	r28, 0x0A	; 10
    2288:	dd 4f       	sbci	r29, 0xFD	; 253
    228a:	b8 83       	st	Y, r27
    228c:	c6 5f       	subi	r28, 0xF6	; 246
    228e:	d2 40       	sbci	r29, 0x02	; 2
    2290:	ce 52       	subi	r28, 0x2E	; 46
    2292:	dd 4f       	sbci	r29, 0xFD	; 253
    2294:	a8 81       	ld	r26, Y
    2296:	b9 81       	ldd	r27, Y+1	; 0x01
    2298:	c2 5d       	subi	r28, 0xD2	; 210
    229a:	d2 40       	sbci	r29, 0x02	; 2
    229c:	93 96       	adiw	r26, 0x23	; 35
    229e:	bc 91       	ld	r27, X
    22a0:	c9 50       	subi	r28, 0x09	; 9
    22a2:	dd 4f       	sbci	r29, 0xFD	; 253
    22a4:	b8 83       	st	Y, r27
    22a6:	c7 5f       	subi	r28, 0xF7	; 247
    22a8:	d2 40       	sbci	r29, 0x02	; 2
    22aa:	ce 52       	subi	r28, 0x2E	; 46
    22ac:	dd 4f       	sbci	r29, 0xFD	; 253
    22ae:	a8 81       	ld	r26, Y
    22b0:	b9 81       	ldd	r27, Y+1	; 0x01
    22b2:	c2 5d       	subi	r28, 0xD2	; 210
    22b4:	d2 40       	sbci	r29, 0x02	; 2
    22b6:	94 96       	adiw	r26, 0x24	; 36
    22b8:	bc 91       	ld	r27, X
    22ba:	c8 50       	subi	r28, 0x08	; 8
    22bc:	dd 4f       	sbci	r29, 0xFD	; 253
    22be:	b8 83       	st	Y, r27
    22c0:	c8 5f       	subi	r28, 0xF8	; 248
    22c2:	d2 40       	sbci	r29, 0x02	; 2
    22c4:	ce 52       	subi	r28, 0x2E	; 46
    22c6:	dd 4f       	sbci	r29, 0xFD	; 253
    22c8:	a8 81       	ld	r26, Y
    22ca:	b9 81       	ldd	r27, Y+1	; 0x01
    22cc:	c2 5d       	subi	r28, 0xD2	; 210
    22ce:	d2 40       	sbci	r29, 0x02	; 2
    22d0:	95 96       	adiw	r26, 0x25	; 37
    22d2:	bc 91       	ld	r27, X
    22d4:	c7 50       	subi	r28, 0x07	; 7
    22d6:	dd 4f       	sbci	r29, 0xFD	; 253
    22d8:	b8 83       	st	Y, r27
    22da:	c9 5f       	subi	r28, 0xF9	; 249
    22dc:	d2 40       	sbci	r29, 0x02	; 2
    22de:	ce 52       	subi	r28, 0x2E	; 46
    22e0:	dd 4f       	sbci	r29, 0xFD	; 253
    22e2:	a8 81       	ld	r26, Y
    22e4:	b9 81       	ldd	r27, Y+1	; 0x01
    22e6:	c2 5d       	subi	r28, 0xD2	; 210
    22e8:	d2 40       	sbci	r29, 0x02	; 2
    22ea:	96 96       	adiw	r26, 0x26	; 38
    22ec:	bc 91       	ld	r27, X
    22ee:	c6 50       	subi	r28, 0x06	; 6
    22f0:	dd 4f       	sbci	r29, 0xFD	; 253
    22f2:	b8 83       	st	Y, r27
    22f4:	ca 5f       	subi	r28, 0xFA	; 250
    22f6:	d2 40       	sbci	r29, 0x02	; 2
    22f8:	ce 52       	subi	r28, 0x2E	; 46
    22fa:	dd 4f       	sbci	r29, 0xFD	; 253
    22fc:	a8 81       	ld	r26, Y
    22fe:	b9 81       	ldd	r27, Y+1	; 0x01
    2300:	c2 5d       	subi	r28, 0xD2	; 210
    2302:	d2 40       	sbci	r29, 0x02	; 2
    2304:	97 96       	adiw	r26, 0x27	; 39
    2306:	bc 91       	ld	r27, X
    2308:	c5 50       	subi	r28, 0x05	; 5
    230a:	dd 4f       	sbci	r29, 0xFD	; 253
    230c:	b8 83       	st	Y, r27
    230e:	cb 5f       	subi	r28, 0xFB	; 251
    2310:	d2 40       	sbci	r29, 0x02	; 2
	f = hs64->h[5];
    2312:	ce 52       	subi	r28, 0x2E	; 46
    2314:	dd 4f       	sbci	r29, 0xFD	; 253
    2316:	a8 81       	ld	r26, Y
    2318:	b9 81       	ldd	r27, Y+1	; 0x01
    231a:	c2 5d       	subi	r28, 0xD2	; 210
    231c:	d2 40       	sbci	r29, 0x02	; 2
    231e:	98 96       	adiw	r26, 0x28	; 40
    2320:	bc 91       	ld	r27, X
    2322:	c4 50       	subi	r28, 0x04	; 4
    2324:	dd 4f       	sbci	r29, 0xFD	; 253
    2326:	b8 83       	st	Y, r27
    2328:	cc 5f       	subi	r28, 0xFC	; 252
    232a:	d2 40       	sbci	r29, 0x02	; 2
    232c:	ce 52       	subi	r28, 0x2E	; 46
    232e:	dd 4f       	sbci	r29, 0xFD	; 253
    2330:	a8 81       	ld	r26, Y
    2332:	b9 81       	ldd	r27, Y+1	; 0x01
    2334:	c2 5d       	subi	r28, 0xD2	; 210
    2336:	d2 40       	sbci	r29, 0x02	; 2
    2338:	99 96       	adiw	r26, 0x29	; 41
    233a:	bc 91       	ld	r27, X
    233c:	c3 50       	subi	r28, 0x03	; 3
    233e:	dd 4f       	sbci	r29, 0xFD	; 253
    2340:	b8 83       	st	Y, r27
    2342:	cd 5f       	subi	r28, 0xFD	; 253
    2344:	d2 40       	sbci	r29, 0x02	; 2
    2346:	ce 52       	subi	r28, 0x2E	; 46
    2348:	dd 4f       	sbci	r29, 0xFD	; 253
    234a:	a8 81       	ld	r26, Y
    234c:	b9 81       	ldd	r27, Y+1	; 0x01
    234e:	c2 5d       	subi	r28, 0xD2	; 210
    2350:	d2 40       	sbci	r29, 0x02	; 2
    2352:	9a 96       	adiw	r26, 0x2a	; 42
    2354:	bc 91       	ld	r27, X
    2356:	c2 50       	subi	r28, 0x02	; 2
    2358:	dd 4f       	sbci	r29, 0xFD	; 253
    235a:	b8 83       	st	Y, r27
    235c:	ce 5f       	subi	r28, 0xFE	; 254
    235e:	d2 40       	sbci	r29, 0x02	; 2
    2360:	ce 52       	subi	r28, 0x2E	; 46
    2362:	dd 4f       	sbci	r29, 0xFD	; 253
    2364:	a8 81       	ld	r26, Y
    2366:	b9 81       	ldd	r27, Y+1	; 0x01
    2368:	c2 5d       	subi	r28, 0xD2	; 210
    236a:	d2 40       	sbci	r29, 0x02	; 2
    236c:	9b 96       	adiw	r26, 0x2b	; 43
    236e:	bc 91       	ld	r27, X
    2370:	c1 50       	subi	r28, 0x01	; 1
    2372:	dd 4f       	sbci	r29, 0xFD	; 253
    2374:	b8 83       	st	Y, r27
    2376:	cf 5f       	subi	r28, 0xFF	; 255
    2378:	d2 40       	sbci	r29, 0x02	; 2
    237a:	ce 52       	subi	r28, 0x2E	; 46
    237c:	dd 4f       	sbci	r29, 0xFD	; 253
    237e:	a8 81       	ld	r26, Y
    2380:	b9 81       	ldd	r27, Y+1	; 0x01
    2382:	c2 5d       	subi	r28, 0xD2	; 210
    2384:	d2 40       	sbci	r29, 0x02	; 2
    2386:	9c 96       	adiw	r26, 0x2c	; 44
    2388:	bc 91       	ld	r27, X
    238a:	c0 50       	subi	r28, 0x00	; 0
    238c:	dd 4f       	sbci	r29, 0xFD	; 253
    238e:	b8 83       	st	Y, r27
    2390:	c0 50       	subi	r28, 0x00	; 0
    2392:	d3 40       	sbci	r29, 0x03	; 3
    2394:	ce 52       	subi	r28, 0x2E	; 46
    2396:	dd 4f       	sbci	r29, 0xFD	; 253
    2398:	a8 81       	ld	r26, Y
    239a:	b9 81       	ldd	r27, Y+1	; 0x01
    239c:	c2 5d       	subi	r28, 0xD2	; 210
    239e:	d2 40       	sbci	r29, 0x02	; 2
    23a0:	9d 96       	adiw	r26, 0x2d	; 45
    23a2:	bc 91       	ld	r27, X
    23a4:	cf 5f       	subi	r28, 0xFF	; 255
    23a6:	dc 4f       	sbci	r29, 0xFC	; 252
    23a8:	b8 83       	st	Y, r27
    23aa:	c1 50       	subi	r28, 0x01	; 1
    23ac:	d3 40       	sbci	r29, 0x03	; 3
    23ae:	ce 52       	subi	r28, 0x2E	; 46
    23b0:	dd 4f       	sbci	r29, 0xFD	; 253
    23b2:	a8 81       	ld	r26, Y
    23b4:	b9 81       	ldd	r27, Y+1	; 0x01
    23b6:	c2 5d       	subi	r28, 0xD2	; 210
    23b8:	d2 40       	sbci	r29, 0x02	; 2
    23ba:	9e 96       	adiw	r26, 0x2e	; 46
    23bc:	bc 91       	ld	r27, X
    23be:	ce 5f       	subi	r28, 0xFE	; 254
    23c0:	dc 4f       	sbci	r29, 0xFC	; 252
    23c2:	b8 83       	st	Y, r27
    23c4:	c2 50       	subi	r28, 0x02	; 2
    23c6:	d3 40       	sbci	r29, 0x03	; 3
    23c8:	ce 52       	subi	r28, 0x2E	; 46
    23ca:	dd 4f       	sbci	r29, 0xFD	; 253
    23cc:	a8 81       	ld	r26, Y
    23ce:	b9 81       	ldd	r27, Y+1	; 0x01
    23d0:	c2 5d       	subi	r28, 0xD2	; 210
    23d2:	d2 40       	sbci	r29, 0x02	; 2
    23d4:	9f 96       	adiw	r26, 0x2f	; 47
    23d6:	bc 91       	ld	r27, X
    23d8:	cd 5f       	subi	r28, 0xFD	; 253
    23da:	dc 4f       	sbci	r29, 0xFC	; 252
    23dc:	b8 83       	st	Y, r27
    23de:	c3 50       	subi	r28, 0x03	; 3
    23e0:	d3 40       	sbci	r29, 0x03	; 3
	g = hs64->h[6];
    23e2:	ce 52       	subi	r28, 0x2E	; 46
    23e4:	dd 4f       	sbci	r29, 0xFD	; 253
    23e6:	a8 81       	ld	r26, Y
    23e8:	b9 81       	ldd	r27, Y+1	; 0x01
    23ea:	c2 5d       	subi	r28, 0xD2	; 210
    23ec:	d2 40       	sbci	r29, 0x02	; 2
    23ee:	d0 96       	adiw	r26, 0x30	; 48
    23f0:	bc 91       	ld	r27, X
    23f2:	cc 5f       	subi	r28, 0xFC	; 252
    23f4:	dc 4f       	sbci	r29, 0xFC	; 252
    23f6:	b8 83       	st	Y, r27
    23f8:	c4 50       	subi	r28, 0x04	; 4
    23fa:	d3 40       	sbci	r29, 0x03	; 3
    23fc:	ce 52       	subi	r28, 0x2E	; 46
    23fe:	dd 4f       	sbci	r29, 0xFD	; 253
    2400:	a8 81       	ld	r26, Y
    2402:	b9 81       	ldd	r27, Y+1	; 0x01
    2404:	c2 5d       	subi	r28, 0xD2	; 210
    2406:	d2 40       	sbci	r29, 0x02	; 2
    2408:	d1 96       	adiw	r26, 0x31	; 49
    240a:	bc 91       	ld	r27, X
    240c:	cb 5f       	subi	r28, 0xFB	; 251
    240e:	dc 4f       	sbci	r29, 0xFC	; 252
    2410:	b8 83       	st	Y, r27
    2412:	c5 50       	subi	r28, 0x05	; 5
    2414:	d3 40       	sbci	r29, 0x03	; 3
    2416:	ce 52       	subi	r28, 0x2E	; 46
    2418:	dd 4f       	sbci	r29, 0xFD	; 253
    241a:	a8 81       	ld	r26, Y
    241c:	b9 81       	ldd	r27, Y+1	; 0x01
    241e:	c2 5d       	subi	r28, 0xD2	; 210
    2420:	d2 40       	sbci	r29, 0x02	; 2
    2422:	d2 96       	adiw	r26, 0x32	; 50
    2424:	bc 91       	ld	r27, X
    2426:	ca 5f       	subi	r28, 0xFA	; 250
    2428:	dc 4f       	sbci	r29, 0xFC	; 252
    242a:	b8 83       	st	Y, r27
    242c:	c6 50       	subi	r28, 0x06	; 6
    242e:	d3 40       	sbci	r29, 0x03	; 3
    2430:	ce 52       	subi	r28, 0x2E	; 46
    2432:	dd 4f       	sbci	r29, 0xFD	; 253
    2434:	a8 81       	ld	r26, Y
    2436:	b9 81       	ldd	r27, Y+1	; 0x01
    2438:	c2 5d       	subi	r28, 0xD2	; 210
    243a:	d2 40       	sbci	r29, 0x02	; 2
    243c:	d3 96       	adiw	r26, 0x33	; 51
    243e:	bc 91       	ld	r27, X
    2440:	c9 5f       	subi	r28, 0xF9	; 249
    2442:	dc 4f       	sbci	r29, 0xFC	; 252
    2444:	b8 83       	st	Y, r27
    2446:	c7 50       	subi	r28, 0x07	; 7
    2448:	d3 40       	sbci	r29, 0x03	; 3
    244a:	ce 52       	subi	r28, 0x2E	; 46
    244c:	dd 4f       	sbci	r29, 0xFD	; 253
    244e:	a8 81       	ld	r26, Y
    2450:	b9 81       	ldd	r27, Y+1	; 0x01
    2452:	c2 5d       	subi	r28, 0xD2	; 210
    2454:	d2 40       	sbci	r29, 0x02	; 2
    2456:	d4 96       	adiw	r26, 0x34	; 52
    2458:	bc 91       	ld	r27, X
    245a:	c8 5f       	subi	r28, 0xF8	; 248
    245c:	dc 4f       	sbci	r29, 0xFC	; 252
    245e:	b8 83       	st	Y, r27
    2460:	c8 50       	subi	r28, 0x08	; 8
    2462:	d3 40       	sbci	r29, 0x03	; 3
    2464:	ce 52       	subi	r28, 0x2E	; 46
    2466:	dd 4f       	sbci	r29, 0xFD	; 253
    2468:	a8 81       	ld	r26, Y
    246a:	b9 81       	ldd	r27, Y+1	; 0x01
    246c:	c2 5d       	subi	r28, 0xD2	; 210
    246e:	d2 40       	sbci	r29, 0x02	; 2
    2470:	d5 96       	adiw	r26, 0x35	; 53
    2472:	bc 91       	ld	r27, X
    2474:	c7 5f       	subi	r28, 0xF7	; 247
    2476:	dc 4f       	sbci	r29, 0xFC	; 252
    2478:	b8 83       	st	Y, r27
    247a:	c9 50       	subi	r28, 0x09	; 9
    247c:	d3 40       	sbci	r29, 0x03	; 3
    247e:	ce 52       	subi	r28, 0x2E	; 46
    2480:	dd 4f       	sbci	r29, 0xFD	; 253
    2482:	a8 81       	ld	r26, Y
    2484:	b9 81       	ldd	r27, Y+1	; 0x01
    2486:	c2 5d       	subi	r28, 0xD2	; 210
    2488:	d2 40       	sbci	r29, 0x02	; 2
    248a:	d6 96       	adiw	r26, 0x36	; 54
    248c:	bc 91       	ld	r27, X
    248e:	c6 5f       	subi	r28, 0xF6	; 246
    2490:	dc 4f       	sbci	r29, 0xFC	; 252
    2492:	b8 83       	st	Y, r27
    2494:	ca 50       	subi	r28, 0x0A	; 10
    2496:	d3 40       	sbci	r29, 0x03	; 3
    2498:	ce 52       	subi	r28, 0x2E	; 46
    249a:	dd 4f       	sbci	r29, 0xFD	; 253
    249c:	a8 81       	ld	r26, Y
    249e:	b9 81       	ldd	r27, Y+1	; 0x01
    24a0:	c2 5d       	subi	r28, 0xD2	; 210
    24a2:	d2 40       	sbci	r29, 0x02	; 2
    24a4:	d7 96       	adiw	r26, 0x37	; 55
    24a6:	bc 91       	ld	r27, X
    24a8:	c5 5f       	subi	r28, 0xF5	; 245
    24aa:	dc 4f       	sbci	r29, 0xFC	; 252
    24ac:	b8 83       	st	Y, r27
    24ae:	cb 50       	subi	r28, 0x0B	; 11
    24b0:	d3 40       	sbci	r29, 0x03	; 3
	h = hs64->h[7];
    24b2:	ce 52       	subi	r28, 0x2E	; 46
    24b4:	dd 4f       	sbci	r29, 0xFD	; 253
    24b6:	a8 81       	ld	r26, Y
    24b8:	b9 81       	ldd	r27, Y+1	; 0x01
    24ba:	c2 5d       	subi	r28, 0xD2	; 210
    24bc:	d2 40       	sbci	r29, 0x02	; 2
    24be:	d8 96       	adiw	r26, 0x38	; 56
    24c0:	bc 91       	ld	r27, X
    24c2:	c4 5f       	subi	r28, 0xF4	; 244
    24c4:	dc 4f       	sbci	r29, 0xFC	; 252
    24c6:	b8 83       	st	Y, r27
    24c8:	cc 50       	subi	r28, 0x0C	; 12
    24ca:	d3 40       	sbci	r29, 0x03	; 3
    24cc:	ce 52       	subi	r28, 0x2E	; 46
    24ce:	dd 4f       	sbci	r29, 0xFD	; 253
    24d0:	a8 81       	ld	r26, Y
    24d2:	b9 81       	ldd	r27, Y+1	; 0x01
    24d4:	c2 5d       	subi	r28, 0xD2	; 210
    24d6:	d2 40       	sbci	r29, 0x02	; 2
    24d8:	d9 96       	adiw	r26, 0x39	; 57
    24da:	bc 91       	ld	r27, X
    24dc:	c3 5f       	subi	r28, 0xF3	; 243
    24de:	dc 4f       	sbci	r29, 0xFC	; 252
    24e0:	b8 83       	st	Y, r27
    24e2:	cd 50       	subi	r28, 0x0D	; 13
    24e4:	d3 40       	sbci	r29, 0x03	; 3
    24e6:	ce 52       	subi	r28, 0x2E	; 46
    24e8:	dd 4f       	sbci	r29, 0xFD	; 253
    24ea:	a8 81       	ld	r26, Y
    24ec:	b9 81       	ldd	r27, Y+1	; 0x01
    24ee:	c2 5d       	subi	r28, 0xD2	; 210
    24f0:	d2 40       	sbci	r29, 0x02	; 2
    24f2:	da 96       	adiw	r26, 0x3a	; 58
    24f4:	bc 91       	ld	r27, X
    24f6:	c2 5f       	subi	r28, 0xF2	; 242
    24f8:	dc 4f       	sbci	r29, 0xFC	; 252
    24fa:	b8 83       	st	Y, r27
    24fc:	ce 50       	subi	r28, 0x0E	; 14
    24fe:	d3 40       	sbci	r29, 0x03	; 3
    2500:	ce 52       	subi	r28, 0x2E	; 46
    2502:	dd 4f       	sbci	r29, 0xFD	; 253
    2504:	a8 81       	ld	r26, Y
    2506:	b9 81       	ldd	r27, Y+1	; 0x01
    2508:	c2 5d       	subi	r28, 0xD2	; 210
    250a:	d2 40       	sbci	r29, 0x02	; 2
    250c:	db 96       	adiw	r26, 0x3b	; 59
    250e:	bc 91       	ld	r27, X
    2510:	c1 5f       	subi	r28, 0xF1	; 241
    2512:	dc 4f       	sbci	r29, 0xFC	; 252
    2514:	b8 83       	st	Y, r27
    2516:	cf 50       	subi	r28, 0x0F	; 15
    2518:	d3 40       	sbci	r29, 0x03	; 3
    251a:	ce 52       	subi	r28, 0x2E	; 46
    251c:	dd 4f       	sbci	r29, 0xFD	; 253
    251e:	a8 81       	ld	r26, Y
    2520:	b9 81       	ldd	r27, Y+1	; 0x01
    2522:	c2 5d       	subi	r28, 0xD2	; 210
    2524:	d2 40       	sbci	r29, 0x02	; 2
    2526:	dc 96       	adiw	r26, 0x3c	; 60
    2528:	bc 91       	ld	r27, X
    252a:	c0 5f       	subi	r28, 0xF0	; 240
    252c:	dc 4f       	sbci	r29, 0xFC	; 252
    252e:	b8 83       	st	Y, r27
    2530:	c0 51       	subi	r28, 0x10	; 16
    2532:	d3 40       	sbci	r29, 0x03	; 3
    2534:	ce 52       	subi	r28, 0x2E	; 46
    2536:	dd 4f       	sbci	r29, 0xFD	; 253
    2538:	a8 81       	ld	r26, Y
    253a:	b9 81       	ldd	r27, Y+1	; 0x01
    253c:	c2 5d       	subi	r28, 0xD2	; 210
    253e:	d2 40       	sbci	r29, 0x02	; 2
    2540:	dd 96       	adiw	r26, 0x3d	; 61
    2542:	bc 91       	ld	r27, X
    2544:	cf 5e       	subi	r28, 0xEF	; 239
    2546:	dc 4f       	sbci	r29, 0xFC	; 252
    2548:	b8 83       	st	Y, r27
    254a:	c1 51       	subi	r28, 0x11	; 17
    254c:	d3 40       	sbci	r29, 0x03	; 3
    254e:	ce 52       	subi	r28, 0x2E	; 46
    2550:	dd 4f       	sbci	r29, 0xFD	; 253
    2552:	a8 81       	ld	r26, Y
    2554:	b9 81       	ldd	r27, Y+1	; 0x01
    2556:	c2 5d       	subi	r28, 0xD2	; 210
    2558:	d2 40       	sbci	r29, 0x02	; 2
    255a:	de 96       	adiw	r26, 0x3e	; 62
    255c:	bc 91       	ld	r27, X
    255e:	ce 5e       	subi	r28, 0xEE	; 238
    2560:	dc 4f       	sbci	r29, 0xFC	; 252
    2562:	b8 83       	st	Y, r27
    2564:	c2 51       	subi	r28, 0x12	; 18
    2566:	d3 40       	sbci	r29, 0x03	; 3
    2568:	ce 52       	subi	r28, 0x2E	; 46
    256a:	dd 4f       	sbci	r29, 0xFD	; 253
    256c:	a8 81       	ld	r26, Y
    256e:	b9 81       	ldd	r27, Y+1	; 0x01
    2570:	c2 5d       	subi	r28, 0xD2	; 210
    2572:	d2 40       	sbci	r29, 0x02	; 2
    2574:	df 96       	adiw	r26, 0x3f	; 63
    2576:	bc 91       	ld	r27, X
    2578:	cd 5e       	subi	r28, 0xED	; 237
    257a:	dc 4f       	sbci	r29, 0xFC	; 252
    257c:	b8 83       	st	Y, r27
    257e:	c3 51       	subi	r28, 0x13	; 19
    2580:	d3 40       	sbci	r29, 0x03	; 3
    2582:	ac ec       	ldi	r26, 0xCC	; 204
    2584:	b2 e0       	ldi	r27, 0x02	; 2
    2586:	c3 56       	subi	r28, 0x63	; 99
    2588:	dd 4f       	sbci	r29, 0xFD	; 253
    258a:	b9 83       	std	Y+1, r27	; 0x01
    258c:	a8 83       	st	Y, r26
    258e:	cd 59       	subi	r28, 0x9D	; 157
    2590:	d2 40       	sbci	r29, 0x02	; 2
    2592:	c4 5f       	subi	r28, 0xF4	; 244
    2594:	dc 4f       	sbci	r29, 0xFC	; 252
    2596:	b8 81       	ld	r27, Y
    2598:	cc 50       	subi	r28, 0x0C	; 12
    259a:	d3 40       	sbci	r29, 0x03	; 3
    259c:	ca 55       	subi	r28, 0x5A	; 90
    259e:	dd 4f       	sbci	r29, 0xFD	; 253
    25a0:	b8 83       	st	Y, r27
    25a2:	c6 5a       	subi	r28, 0xA6	; 166
    25a4:	d2 40       	sbci	r29, 0x02	; 2
    25a6:	c3 5f       	subi	r28, 0xF3	; 243
    25a8:	dc 4f       	sbci	r29, 0xFC	; 252
    25aa:	a8 81       	ld	r26, Y
    25ac:	cd 50       	subi	r28, 0x0D	; 13
    25ae:	d3 40       	sbci	r29, 0x03	; 3
    25b0:	c9 55       	subi	r28, 0x59	; 89
    25b2:	dd 4f       	sbci	r29, 0xFD	; 253
    25b4:	a8 83       	st	Y, r26
    25b6:	c7 5a       	subi	r28, 0xA7	; 167
    25b8:	d2 40       	sbci	r29, 0x02	; 2
    25ba:	c2 5f       	subi	r28, 0xF2	; 242
    25bc:	dc 4f       	sbci	r29, 0xFC	; 252
    25be:	b8 81       	ld	r27, Y
    25c0:	ce 50       	subi	r28, 0x0E	; 14
    25c2:	d3 40       	sbci	r29, 0x03	; 3
    25c4:	c8 55       	subi	r28, 0x58	; 88
    25c6:	dd 4f       	sbci	r29, 0xFD	; 253
    25c8:	b8 83       	st	Y, r27
    25ca:	c8 5a       	subi	r28, 0xA8	; 168
    25cc:	d2 40       	sbci	r29, 0x02	; 2
    25ce:	c1 5f       	subi	r28, 0xF1	; 241
    25d0:	dc 4f       	sbci	r29, 0xFC	; 252
    25d2:	a8 81       	ld	r26, Y
    25d4:	cf 50       	subi	r28, 0x0F	; 15
    25d6:	d3 40       	sbci	r29, 0x03	; 3
    25d8:	c7 55       	subi	r28, 0x57	; 87
    25da:	dd 4f       	sbci	r29, 0xFD	; 253
    25dc:	a8 83       	st	Y, r26
    25de:	c9 5a       	subi	r28, 0xA9	; 169
    25e0:	d2 40       	sbci	r29, 0x02	; 2
    25e2:	c0 5f       	subi	r28, 0xF0	; 240
    25e4:	dc 4f       	sbci	r29, 0xFC	; 252
    25e6:	b8 81       	ld	r27, Y
    25e8:	c0 51       	subi	r28, 0x10	; 16
    25ea:	d3 40       	sbci	r29, 0x03	; 3
    25ec:	c6 55       	subi	r28, 0x56	; 86
    25ee:	dd 4f       	sbci	r29, 0xFD	; 253
    25f0:	b8 83       	st	Y, r27
    25f2:	ca 5a       	subi	r28, 0xAA	; 170
    25f4:	d2 40       	sbci	r29, 0x02	; 2
    25f6:	cf 5e       	subi	r28, 0xEF	; 239
    25f8:	dc 4f       	sbci	r29, 0xFC	; 252
    25fa:	a8 81       	ld	r26, Y
    25fc:	c1 51       	subi	r28, 0x11	; 17
    25fe:	d3 40       	sbci	r29, 0x03	; 3
    2600:	c5 55       	subi	r28, 0x55	; 85
    2602:	dd 4f       	sbci	r29, 0xFD	; 253
    2604:	a8 83       	st	Y, r26
    2606:	cb 5a       	subi	r28, 0xAB	; 171
    2608:	d2 40       	sbci	r29, 0x02	; 2
    260a:	ce 5e       	subi	r28, 0xEE	; 238
    260c:	dc 4f       	sbci	r29, 0xFC	; 252
    260e:	b8 81       	ld	r27, Y
    2610:	c2 51       	subi	r28, 0x12	; 18
    2612:	d3 40       	sbci	r29, 0x03	; 3
    2614:	cf 56       	subi	r28, 0x6F	; 111
    2616:	dd 4f       	sbci	r29, 0xFD	; 253
    2618:	b8 83       	st	Y, r27
    261a:	c1 59       	subi	r28, 0x91	; 145
    261c:	d2 40       	sbci	r29, 0x02	; 2
    261e:	cd 5e       	subi	r28, 0xED	; 237
    2620:	dc 4f       	sbci	r29, 0xFC	; 252
    2622:	a8 81       	ld	r26, Y
    2624:	c3 51       	subi	r28, 0x13	; 19
    2626:	d3 40       	sbci	r29, 0x03	; 3
    2628:	ce 56       	subi	r28, 0x6E	; 110
    262a:	dd 4f       	sbci	r29, 0xFD	; 253
    262c:	a8 83       	st	Y, r26
    262e:	c2 59       	subi	r28, 0x92	; 146
    2630:	d2 40       	sbci	r29, 0x02	; 2
	b = hs64->h[1];
	c = hs64->h[2];
	d = hs64->h[3];
	e = hs64->h[4];
	f = hs64->h[5];
	g = hs64->h[6];
    2632:	cc 5f       	subi	r28, 0xFC	; 252
    2634:	dc 4f       	sbci	r29, 0xFC	; 252
    2636:	b8 81       	ld	r27, Y
    2638:	c4 50       	subi	r28, 0x04	; 4
    263a:	d3 40       	sbci	r29, 0x03	; 3
    263c:	c6 54       	subi	r28, 0x46	; 70
    263e:	dd 4f       	sbci	r29, 0xFD	; 253
    2640:	b8 83       	st	Y, r27
    2642:	ca 5b       	subi	r28, 0xBA	; 186
    2644:	d2 40       	sbci	r29, 0x02	; 2
    2646:	cb 5f       	subi	r28, 0xFB	; 251
    2648:	dc 4f       	sbci	r29, 0xFC	; 252
    264a:	a8 81       	ld	r26, Y
    264c:	c5 50       	subi	r28, 0x05	; 5
    264e:	d3 40       	sbci	r29, 0x03	; 3
    2650:	c5 54       	subi	r28, 0x45	; 69
    2652:	dd 4f       	sbci	r29, 0xFD	; 253
    2654:	a8 83       	st	Y, r26
    2656:	cb 5b       	subi	r28, 0xBB	; 187
    2658:	d2 40       	sbci	r29, 0x02	; 2
    265a:	ca 5f       	subi	r28, 0xFA	; 250
    265c:	dc 4f       	sbci	r29, 0xFC	; 252
    265e:	b8 81       	ld	r27, Y
    2660:	c6 50       	subi	r28, 0x06	; 6
    2662:	d3 40       	sbci	r29, 0x03	; 3
    2664:	c4 54       	subi	r28, 0x44	; 68
    2666:	dd 4f       	sbci	r29, 0xFD	; 253
    2668:	b8 83       	st	Y, r27
    266a:	cc 5b       	subi	r28, 0xBC	; 188
    266c:	d2 40       	sbci	r29, 0x02	; 2
    266e:	c9 5f       	subi	r28, 0xF9	; 249
    2670:	dc 4f       	sbci	r29, 0xFC	; 252
    2672:	a8 81       	ld	r26, Y
    2674:	c7 50       	subi	r28, 0x07	; 7
    2676:	d3 40       	sbci	r29, 0x03	; 3
    2678:	c3 54       	subi	r28, 0x43	; 67
    267a:	dd 4f       	sbci	r29, 0xFD	; 253
    267c:	a8 83       	st	Y, r26
    267e:	cd 5b       	subi	r28, 0xBD	; 189
    2680:	d2 40       	sbci	r29, 0x02	; 2
    2682:	c8 5f       	subi	r28, 0xF8	; 248
    2684:	dc 4f       	sbci	r29, 0xFC	; 252
    2686:	b8 81       	ld	r27, Y
    2688:	c8 50       	subi	r28, 0x08	; 8
    268a:	d3 40       	sbci	r29, 0x03	; 3
    268c:	c2 54       	subi	r28, 0x42	; 66
    268e:	dd 4f       	sbci	r29, 0xFD	; 253
    2690:	b8 83       	st	Y, r27
    2692:	ce 5b       	subi	r28, 0xBE	; 190
    2694:	d2 40       	sbci	r29, 0x02	; 2
    2696:	c7 5f       	subi	r28, 0xF7	; 247
    2698:	dc 4f       	sbci	r29, 0xFC	; 252
    269a:	a8 81       	ld	r26, Y
    269c:	c9 50       	subi	r28, 0x09	; 9
    269e:	d3 40       	sbci	r29, 0x03	; 3
    26a0:	c1 54       	subi	r28, 0x41	; 65
    26a2:	dd 4f       	sbci	r29, 0xFD	; 253
    26a4:	a8 83       	st	Y, r26
    26a6:	cf 5b       	subi	r28, 0xBF	; 191
    26a8:	d2 40       	sbci	r29, 0x02	; 2
    26aa:	c6 5f       	subi	r28, 0xF6	; 246
    26ac:	dc 4f       	sbci	r29, 0xFC	; 252
    26ae:	b8 81       	ld	r27, Y
    26b0:	ca 50       	subi	r28, 0x0A	; 10
    26b2:	d3 40       	sbci	r29, 0x03	; 3
    26b4:	c0 54       	subi	r28, 0x40	; 64
    26b6:	dd 4f       	sbci	r29, 0xFD	; 253
    26b8:	b8 83       	st	Y, r27
    26ba:	c0 5c       	subi	r28, 0xC0	; 192
    26bc:	d2 40       	sbci	r29, 0x02	; 2
    26be:	c5 5f       	subi	r28, 0xF5	; 245
    26c0:	dc 4f       	sbci	r29, 0xFC	; 252
    26c2:	a8 81       	ld	r26, Y
    26c4:	cb 50       	subi	r28, 0x0B	; 11
    26c6:	d3 40       	sbci	r29, 0x03	; 3
    26c8:	cf 53       	subi	r28, 0x3F	; 63
    26ca:	dd 4f       	sbci	r29, 0xFD	; 253
    26cc:	a8 83       	st	Y, r26
    26ce:	c1 5c       	subi	r28, 0xC1	; 193
    26d0:	d2 40       	sbci	r29, 0x02	; 2
	a = hs64->h[0];
	b = hs64->h[1];
	c = hs64->h[2];
	d = hs64->h[3];
	e = hs64->h[4];
	f = hs64->h[5];
    26d2:	c4 50       	subi	r28, 0x04	; 4
    26d4:	dd 4f       	sbci	r29, 0xFD	; 253
    26d6:	b8 81       	ld	r27, Y
    26d8:	cc 5f       	subi	r28, 0xFC	; 252
    26da:	d2 40       	sbci	r29, 0x02	; 2
    26dc:	ce 53       	subi	r28, 0x3E	; 62
    26de:	dd 4f       	sbci	r29, 0xFD	; 253
    26e0:	b8 83       	st	Y, r27
    26e2:	c2 5c       	subi	r28, 0xC2	; 194
    26e4:	d2 40       	sbci	r29, 0x02	; 2
    26e6:	c3 50       	subi	r28, 0x03	; 3
    26e8:	dd 4f       	sbci	r29, 0xFD	; 253
    26ea:	a8 81       	ld	r26, Y
    26ec:	cd 5f       	subi	r28, 0xFD	; 253
    26ee:	d2 40       	sbci	r29, 0x02	; 2
    26f0:	cd 53       	subi	r28, 0x3D	; 61
    26f2:	dd 4f       	sbci	r29, 0xFD	; 253
    26f4:	a8 83       	st	Y, r26
    26f6:	c3 5c       	subi	r28, 0xC3	; 195
    26f8:	d2 40       	sbci	r29, 0x02	; 2
    26fa:	c2 50       	subi	r28, 0x02	; 2
    26fc:	dd 4f       	sbci	r29, 0xFD	; 253
    26fe:	b8 81       	ld	r27, Y
    2700:	ce 5f       	subi	r28, 0xFE	; 254
    2702:	d2 40       	sbci	r29, 0x02	; 2
    2704:	cc 53       	subi	r28, 0x3C	; 60
    2706:	dd 4f       	sbci	r29, 0xFD	; 253
    2708:	b8 83       	st	Y, r27
    270a:	c4 5c       	subi	r28, 0xC4	; 196
    270c:	d2 40       	sbci	r29, 0x02	; 2
    270e:	c1 50       	subi	r28, 0x01	; 1
    2710:	dd 4f       	sbci	r29, 0xFD	; 253
    2712:	a8 81       	ld	r26, Y
    2714:	cf 5f       	subi	r28, 0xFF	; 255
    2716:	d2 40       	sbci	r29, 0x02	; 2
    2718:	cb 53       	subi	r28, 0x3B	; 59
    271a:	dd 4f       	sbci	r29, 0xFD	; 253
    271c:	a8 83       	st	Y, r26
    271e:	c5 5c       	subi	r28, 0xC5	; 197
    2720:	d2 40       	sbci	r29, 0x02	; 2
    2722:	c0 50       	subi	r28, 0x00	; 0
    2724:	dd 4f       	sbci	r29, 0xFD	; 253
    2726:	b8 81       	ld	r27, Y
    2728:	c0 50       	subi	r28, 0x00	; 0
    272a:	d3 40       	sbci	r29, 0x03	; 3
    272c:	ca 53       	subi	r28, 0x3A	; 58
    272e:	dd 4f       	sbci	r29, 0xFD	; 253
    2730:	b8 83       	st	Y, r27
    2732:	c6 5c       	subi	r28, 0xC6	; 198
    2734:	d2 40       	sbci	r29, 0x02	; 2
    2736:	cf 5f       	subi	r28, 0xFF	; 255
    2738:	dc 4f       	sbci	r29, 0xFC	; 252
    273a:	a8 81       	ld	r26, Y
    273c:	c1 50       	subi	r28, 0x01	; 1
    273e:	d3 40       	sbci	r29, 0x03	; 3
    2740:	c9 53       	subi	r28, 0x39	; 57
    2742:	dd 4f       	sbci	r29, 0xFD	; 253
    2744:	a8 83       	st	Y, r26
    2746:	c7 5c       	subi	r28, 0xC7	; 199
    2748:	d2 40       	sbci	r29, 0x02	; 2
    274a:	ce 5f       	subi	r28, 0xFE	; 254
    274c:	dc 4f       	sbci	r29, 0xFC	; 252
    274e:	b8 81       	ld	r27, Y
    2750:	c2 50       	subi	r28, 0x02	; 2
    2752:	d3 40       	sbci	r29, 0x03	; 3
    2754:	c8 53       	subi	r28, 0x38	; 56
    2756:	dd 4f       	sbci	r29, 0xFD	; 253
    2758:	b8 83       	st	Y, r27
    275a:	c8 5c       	subi	r28, 0xC8	; 200
    275c:	d2 40       	sbci	r29, 0x02	; 2
    275e:	cd 5f       	subi	r28, 0xFD	; 253
    2760:	dc 4f       	sbci	r29, 0xFC	; 252
    2762:	a8 81       	ld	r26, Y
    2764:	c3 50       	subi	r28, 0x03	; 3
    2766:	d3 40       	sbci	r29, 0x03	; 3
    2768:	c7 53       	subi	r28, 0x37	; 55
    276a:	dd 4f       	sbci	r29, 0xFD	; 253
    276c:	a8 83       	st	Y, r26
    276e:	c9 5c       	subi	r28, 0xC9	; 201
    2770:	d2 40       	sbci	r29, 0x02	; 2
	}
	a = hs64->h[0];
	b = hs64->h[1];
	c = hs64->h[2];
	d = hs64->h[3];
	e = hs64->h[4];
    2772:	cc 50       	subi	r28, 0x0C	; 12
    2774:	dd 4f       	sbci	r29, 0xFD	; 253
    2776:	68 80       	ld	r6, Y
    2778:	c4 5f       	subi	r28, 0xF4	; 244
    277a:	d2 40       	sbci	r29, 0x02	; 2
    277c:	cb 50       	subi	r28, 0x0B	; 11
    277e:	dd 4f       	sbci	r29, 0xFD	; 253
    2780:	38 80       	ld	r3, Y
    2782:	c5 5f       	subi	r28, 0xF5	; 245
    2784:	d2 40       	sbci	r29, 0x02	; 2
    2786:	ca 50       	subi	r28, 0x0A	; 10
    2788:	dd 4f       	sbci	r29, 0xFD	; 253
    278a:	b8 81       	ld	r27, Y
    278c:	c6 5f       	subi	r28, 0xF6	; 246
    278e:	d2 40       	sbci	r29, 0x02	; 2
    2790:	cd 56       	subi	r28, 0x6D	; 109
    2792:	dd 4f       	sbci	r29, 0xFD	; 253
    2794:	b8 83       	st	Y, r27
    2796:	c3 59       	subi	r28, 0x93	; 147
    2798:	d2 40       	sbci	r29, 0x02	; 2
    279a:	c9 50       	subi	r28, 0x09	; 9
    279c:	dd 4f       	sbci	r29, 0xFD	; 253
    279e:	78 80       	ld	r7, Y
    27a0:	c7 5f       	subi	r28, 0xF7	; 247
    27a2:	d2 40       	sbci	r29, 0x02	; 2
    27a4:	c8 50       	subi	r28, 0x08	; 8
    27a6:	dd 4f       	sbci	r29, 0xFD	; 253
    27a8:	a8 81       	ld	r26, Y
    27aa:	c8 5f       	subi	r28, 0xF8	; 248
    27ac:	d2 40       	sbci	r29, 0x02	; 2
    27ae:	cd 57       	subi	r28, 0x7D	; 125
    27b0:	dd 4f       	sbci	r29, 0xFD	; 253
    27b2:	a8 83       	st	Y, r26
    27b4:	c3 58       	subi	r28, 0x83	; 131
    27b6:	d2 40       	sbci	r29, 0x02	; 2
    27b8:	c7 50       	subi	r28, 0x07	; 7
    27ba:	dd 4f       	sbci	r29, 0xFD	; 253
    27bc:	b8 81       	ld	r27, Y
    27be:	c9 5f       	subi	r28, 0xF9	; 249
    27c0:	d2 40       	sbci	r29, 0x02	; 2
    27c2:	cc 57       	subi	r28, 0x7C	; 124
    27c4:	dd 4f       	sbci	r29, 0xFD	; 253
    27c6:	b8 83       	st	Y, r27
    27c8:	c4 58       	subi	r28, 0x84	; 132
    27ca:	d2 40       	sbci	r29, 0x02	; 2
    27cc:	c6 50       	subi	r28, 0x06	; 6
    27ce:	dd 4f       	sbci	r29, 0xFD	; 253
    27d0:	a8 81       	ld	r26, Y
    27d2:	ca 5f       	subi	r28, 0xFA	; 250
    27d4:	d2 40       	sbci	r29, 0x02	; 2
    27d6:	cb 57       	subi	r28, 0x7B	; 123
    27d8:	dd 4f       	sbci	r29, 0xFD	; 253
    27da:	a8 83       	st	Y, r26
    27dc:	c5 58       	subi	r28, 0x85	; 133
    27de:	d2 40       	sbci	r29, 0x02	; 2
    27e0:	c5 50       	subi	r28, 0x05	; 5
    27e2:	dd 4f       	sbci	r29, 0xFD	; 253
    27e4:	b8 81       	ld	r27, Y
    27e6:	cb 5f       	subi	r28, 0xFB	; 251
    27e8:	d2 40       	sbci	r29, 0x02	; 2
    27ea:	ca 57       	subi	r28, 0x7A	; 122
    27ec:	dd 4f       	sbci	r29, 0xFD	; 253
    27ee:	b8 83       	st	Y, r27
    27f0:	c6 58       	subi	r28, 0x86	; 134
    27f2:	d2 40       	sbci	r29, 0x02	; 2
		w[t] = littleSigma1(w[t - 2]) + w[t - 7] + littleSigma0(w[t - 15]) + w[t - 16];
	}
	a = hs64->h[0];
	b = hs64->h[1];
	c = hs64->h[2];
	d = hs64->h[3];
    27f4:	c4 51       	subi	r28, 0x14	; 20
    27f6:	dd 4f       	sbci	r29, 0xFD	; 253
    27f8:	a8 81       	ld	r26, Y
    27fa:	cc 5e       	subi	r28, 0xEC	; 236
    27fc:	d2 40       	sbci	r29, 0x02	; 2
    27fe:	c6 53       	subi	r28, 0x36	; 54
    2800:	dd 4f       	sbci	r29, 0xFD	; 253
    2802:	a8 83       	st	Y, r26
    2804:	ca 5c       	subi	r28, 0xCA	; 202
    2806:	d2 40       	sbci	r29, 0x02	; 2
    2808:	c3 51       	subi	r28, 0x13	; 19
    280a:	dd 4f       	sbci	r29, 0xFD	; 253
    280c:	b8 81       	ld	r27, Y
    280e:	cd 5e       	subi	r28, 0xED	; 237
    2810:	d2 40       	sbci	r29, 0x02	; 2
    2812:	c5 53       	subi	r28, 0x35	; 53
    2814:	dd 4f       	sbci	r29, 0xFD	; 253
    2816:	b8 83       	st	Y, r27
    2818:	cb 5c       	subi	r28, 0xCB	; 203
    281a:	d2 40       	sbci	r29, 0x02	; 2
    281c:	c2 51       	subi	r28, 0x12	; 18
    281e:	dd 4f       	sbci	r29, 0xFD	; 253
    2820:	a8 81       	ld	r26, Y
    2822:	ce 5e       	subi	r28, 0xEE	; 238
    2824:	d2 40       	sbci	r29, 0x02	; 2
    2826:	c4 53       	subi	r28, 0x34	; 52
    2828:	dd 4f       	sbci	r29, 0xFD	; 253
    282a:	a8 83       	st	Y, r26
    282c:	cc 5c       	subi	r28, 0xCC	; 204
    282e:	d2 40       	sbci	r29, 0x02	; 2
    2830:	c1 51       	subi	r28, 0x11	; 17
    2832:	dd 4f       	sbci	r29, 0xFD	; 253
    2834:	b8 81       	ld	r27, Y
    2836:	cf 5e       	subi	r28, 0xEF	; 239
    2838:	d2 40       	sbci	r29, 0x02	; 2
    283a:	c3 53       	subi	r28, 0x33	; 51
    283c:	dd 4f       	sbci	r29, 0xFD	; 253
    283e:	b8 83       	st	Y, r27
    2840:	cd 5c       	subi	r28, 0xCD	; 205
    2842:	d2 40       	sbci	r29, 0x02	; 2
    2844:	c0 51       	subi	r28, 0x10	; 16
    2846:	dd 4f       	sbci	r29, 0xFD	; 253
    2848:	a8 81       	ld	r26, Y
    284a:	c0 5f       	subi	r28, 0xF0	; 240
    284c:	d2 40       	sbci	r29, 0x02	; 2
    284e:	c2 53       	subi	r28, 0x32	; 50
    2850:	dd 4f       	sbci	r29, 0xFD	; 253
    2852:	a8 83       	st	Y, r26
    2854:	ce 5c       	subi	r28, 0xCE	; 206
    2856:	d2 40       	sbci	r29, 0x02	; 2
    2858:	cf 50       	subi	r28, 0x0F	; 15
    285a:	dd 4f       	sbci	r29, 0xFD	; 253
    285c:	b8 81       	ld	r27, Y
    285e:	c1 5f       	subi	r28, 0xF1	; 241
    2860:	d2 40       	sbci	r29, 0x02	; 2
    2862:	c1 53       	subi	r28, 0x31	; 49
    2864:	dd 4f       	sbci	r29, 0xFD	; 253
    2866:	b8 83       	st	Y, r27
    2868:	cf 5c       	subi	r28, 0xCF	; 207
    286a:	d2 40       	sbci	r29, 0x02	; 2
    286c:	ce 50       	subi	r28, 0x0E	; 14
    286e:	dd 4f       	sbci	r29, 0xFD	; 253
    2870:	a8 81       	ld	r26, Y
    2872:	c2 5f       	subi	r28, 0xF2	; 242
    2874:	d2 40       	sbci	r29, 0x02	; 2
    2876:	c0 53       	subi	r28, 0x30	; 48
    2878:	dd 4f       	sbci	r29, 0xFD	; 253
    287a:	a8 83       	st	Y, r26
    287c:	c0 5d       	subi	r28, 0xD0	; 208
    287e:	d2 40       	sbci	r29, 0x02	; 2
    2880:	cd 50       	subi	r28, 0x0D	; 13
    2882:	dd 4f       	sbci	r29, 0xFD	; 253
    2884:	b8 81       	ld	r27, Y
    2886:	c3 5f       	subi	r28, 0xF3	; 243
    2888:	d2 40       	sbci	r29, 0x02	; 2
    288a:	cf 52       	subi	r28, 0x2F	; 47
    288c:	dd 4f       	sbci	r29, 0xFD	; 253
    288e:	b8 83       	st	Y, r27
    2890:	c1 5d       	subi	r28, 0xD1	; 209
    2892:	d2 40       	sbci	r29, 0x02	; 2
	{
		w[t] = littleSigma1(w[t - 2]) + w[t - 7] + littleSigma0(w[t - 15]) + w[t - 16];
	}
	a = hs64->h[0];
	b = hs64->h[1];
	c = hs64->h[2];
    2894:	cc 51       	subi	r28, 0x1C	; 28
    2896:	dd 4f       	sbci	r29, 0xFD	; 253
    2898:	a8 81       	ld	r26, Y
    289a:	c4 5e       	subi	r28, 0xE4	; 228
    289c:	d2 40       	sbci	r29, 0x02	; 2
    289e:	ce 55       	subi	r28, 0x5E	; 94
    28a0:	dd 4f       	sbci	r29, 0xFD	; 253
    28a2:	a8 83       	st	Y, r26
    28a4:	c2 5a       	subi	r28, 0xA2	; 162
    28a6:	d2 40       	sbci	r29, 0x02	; 2
    28a8:	cb 51       	subi	r28, 0x1B	; 27
    28aa:	dd 4f       	sbci	r29, 0xFD	; 253
    28ac:	b8 81       	ld	r27, Y
    28ae:	c5 5e       	subi	r28, 0xE5	; 229
    28b0:	d2 40       	sbci	r29, 0x02	; 2
    28b2:	cd 55       	subi	r28, 0x5D	; 93
    28b4:	dd 4f       	sbci	r29, 0xFD	; 253
    28b6:	b8 83       	st	Y, r27
    28b8:	c3 5a       	subi	r28, 0xA3	; 163
    28ba:	d2 40       	sbci	r29, 0x02	; 2
    28bc:	ca 51       	subi	r28, 0x1A	; 26
    28be:	dd 4f       	sbci	r29, 0xFD	; 253
    28c0:	a8 81       	ld	r26, Y
    28c2:	c6 5e       	subi	r28, 0xE6	; 230
    28c4:	d2 40       	sbci	r29, 0x02	; 2
    28c6:	cc 55       	subi	r28, 0x5C	; 92
    28c8:	dd 4f       	sbci	r29, 0xFD	; 253
    28ca:	a8 83       	st	Y, r26
    28cc:	c4 5a       	subi	r28, 0xA4	; 164
    28ce:	d2 40       	sbci	r29, 0x02	; 2
    28d0:	c9 51       	subi	r28, 0x19	; 25
    28d2:	dd 4f       	sbci	r29, 0xFD	; 253
    28d4:	b8 81       	ld	r27, Y
    28d6:	c7 5e       	subi	r28, 0xE7	; 231
    28d8:	d2 40       	sbci	r29, 0x02	; 2
    28da:	c8 51       	subi	r28, 0x18	; 24
    28dc:	dd 4f       	sbci	r29, 0xFD	; 253
    28de:	a8 81       	ld	r26, Y
    28e0:	c8 5e       	subi	r28, 0xE8	; 232
    28e2:	d2 40       	sbci	r29, 0x02	; 2
    28e4:	c7 51       	subi	r28, 0x17	; 23
    28e6:	dd 4f       	sbci	r29, 0xFD	; 253
    28e8:	28 80       	ld	r2, Y
    28ea:	c9 5e       	subi	r28, 0xE9	; 233
    28ec:	d2 40       	sbci	r29, 0x02	; 2
    28ee:	c6 51       	subi	r28, 0x16	; 22
    28f0:	dd 4f       	sbci	r29, 0xFD	; 253
    28f2:	88 80       	ld	r8, Y
    28f4:	ca 5e       	subi	r28, 0xEA	; 234
    28f6:	d2 40       	sbci	r29, 0x02	; 2
    28f8:	c5 51       	subi	r28, 0x15	; 21
    28fa:	dd 4f       	sbci	r29, 0xFD	; 253
    28fc:	98 80       	ld	r9, Y
    28fe:	cb 5e       	subi	r28, 0xEB	; 235
    2900:	d2 40       	sbci	r29, 0x02	; 2
	for (t = 16; t < 80; t++)
	{
		w[t] = littleSigma1(w[t - 2]) + w[t - 7] + littleSigma0(w[t - 15]) + w[t - 16];
	}
	a = hs64->h[0];
	b = hs64->h[1];
    2902:	c4 52       	subi	r28, 0x24	; 36
    2904:	dd 4f       	sbci	r29, 0xFD	; 253
    2906:	e8 81       	ld	r30, Y
    2908:	cc 5d       	subi	r28, 0xDC	; 220
    290a:	d2 40       	sbci	r29, 0x02	; 2
    290c:	ce 54       	subi	r28, 0x4E	; 78
    290e:	dd 4f       	sbci	r29, 0xFD	; 253
    2910:	e8 83       	st	Y, r30
    2912:	c2 5b       	subi	r28, 0xB2	; 178
    2914:	d2 40       	sbci	r29, 0x02	; 2
    2916:	c3 52       	subi	r28, 0x23	; 35
    2918:	dd 4f       	sbci	r29, 0xFD	; 253
    291a:	f8 81       	ld	r31, Y
    291c:	cd 5d       	subi	r28, 0xDD	; 221
    291e:	d2 40       	sbci	r29, 0x02	; 2
    2920:	cd 54       	subi	r28, 0x4D	; 77
    2922:	dd 4f       	sbci	r29, 0xFD	; 253
    2924:	f8 83       	st	Y, r31
    2926:	c3 5b       	subi	r28, 0xB3	; 179
    2928:	d2 40       	sbci	r29, 0x02	; 2
    292a:	c2 52       	subi	r28, 0x22	; 34
    292c:	dd 4f       	sbci	r29, 0xFD	; 253
    292e:	a8 80       	ld	r10, Y
    2930:	ce 5d       	subi	r28, 0xDE	; 222
    2932:	d2 40       	sbci	r29, 0x02	; 2
    2934:	cc 54       	subi	r28, 0x4C	; 76
    2936:	dd 4f       	sbci	r29, 0xFD	; 253
    2938:	a8 82       	st	Y, r10
    293a:	c4 5b       	subi	r28, 0xB4	; 180
    293c:	d2 40       	sbci	r29, 0x02	; 2
    293e:	c1 52       	subi	r28, 0x21	; 33
    2940:	dd 4f       	sbci	r29, 0xFD	; 253
    2942:	b8 80       	ld	r11, Y
    2944:	cf 5d       	subi	r28, 0xDF	; 223
    2946:	d2 40       	sbci	r29, 0x02	; 2
    2948:	cb 54       	subi	r28, 0x4B	; 75
    294a:	dd 4f       	sbci	r29, 0xFD	; 253
    294c:	b8 82       	st	Y, r11
    294e:	c5 5b       	subi	r28, 0xB5	; 181
    2950:	d2 40       	sbci	r29, 0x02	; 2
    2952:	c0 52       	subi	r28, 0x20	; 32
    2954:	dd 4f       	sbci	r29, 0xFD	; 253
    2956:	c8 80       	ld	r12, Y
    2958:	c0 5e       	subi	r28, 0xE0	; 224
    295a:	d2 40       	sbci	r29, 0x02	; 2
    295c:	ca 54       	subi	r28, 0x4A	; 74
    295e:	dd 4f       	sbci	r29, 0xFD	; 253
    2960:	c8 82       	st	Y, r12
    2962:	c6 5b       	subi	r28, 0xB6	; 182
    2964:	d2 40       	sbci	r29, 0x02	; 2
    2966:	cf 51       	subi	r28, 0x1F	; 31
    2968:	dd 4f       	sbci	r29, 0xFD	; 253
    296a:	d8 80       	ld	r13, Y
    296c:	c1 5e       	subi	r28, 0xE1	; 225
    296e:	d2 40       	sbci	r29, 0x02	; 2
    2970:	c9 54       	subi	r28, 0x49	; 73
    2972:	dd 4f       	sbci	r29, 0xFD	; 253
    2974:	d8 82       	st	Y, r13
    2976:	c7 5b       	subi	r28, 0xB7	; 183
    2978:	d2 40       	sbci	r29, 0x02	; 2
    297a:	ce 51       	subi	r28, 0x1E	; 30
    297c:	dd 4f       	sbci	r29, 0xFD	; 253
    297e:	18 81       	ld	r17, Y
    2980:	c2 5e       	subi	r28, 0xE2	; 226
    2982:	d2 40       	sbci	r29, 0x02	; 2
    2984:	c8 54       	subi	r28, 0x48	; 72
    2986:	dd 4f       	sbci	r29, 0xFD	; 253
    2988:	18 83       	st	Y, r17
    298a:	c8 5b       	subi	r28, 0xB8	; 184
    298c:	d2 40       	sbci	r29, 0x02	; 2
    298e:	cd 51       	subi	r28, 0x1D	; 29
    2990:	dd 4f       	sbci	r29, 0xFD	; 253
    2992:	88 81       	ld	r24, Y
    2994:	c3 5e       	subi	r28, 0xE3	; 227
    2996:	d2 40       	sbci	r29, 0x02	; 2
    2998:	c7 54       	subi	r28, 0x47	; 71
    299a:	dd 4f       	sbci	r29, 0xFD	; 253
    299c:	88 83       	st	Y, r24
    299e:	c9 5b       	subi	r28, 0xB9	; 185
    29a0:	d2 40       	sbci	r29, 0x02	; 2
	}
	for (t = 16; t < 80; t++)
	{
		w[t] = littleSigma1(w[t - 2]) + w[t - 7] + littleSigma0(w[t - 15]) + w[t - 16];
	}
	a = hs64->h[0];
    29a2:	cc 52       	subi	r28, 0x2C	; 44
    29a4:	dd 4f       	sbci	r29, 0xFD	; 253
    29a6:	98 81       	ld	r25, Y
    29a8:	c4 5d       	subi	r28, 0xD4	; 212
    29aa:	d2 40       	sbci	r29, 0x02	; 2
    29ac:	c5 57       	subi	r28, 0x75	; 117
    29ae:	dd 4f       	sbci	r29, 0xFD	; 253
    29b0:	98 83       	st	Y, r25
    29b2:	cb 58       	subi	r28, 0x8B	; 139
    29b4:	d2 40       	sbci	r29, 0x02	; 2
    29b6:	cb 52       	subi	r28, 0x2B	; 43
    29b8:	dd 4f       	sbci	r29, 0xFD	; 253
    29ba:	e8 81       	ld	r30, Y
    29bc:	c5 5d       	subi	r28, 0xD5	; 213
    29be:	d2 40       	sbci	r29, 0x02	; 2
    29c0:	c4 57       	subi	r28, 0x74	; 116
    29c2:	dd 4f       	sbci	r29, 0xFD	; 253
    29c4:	e8 83       	st	Y, r30
    29c6:	cc 58       	subi	r28, 0x8C	; 140
    29c8:	d2 40       	sbci	r29, 0x02	; 2
    29ca:	ca 52       	subi	r28, 0x2A	; 42
    29cc:	dd 4f       	sbci	r29, 0xFD	; 253
    29ce:	f8 81       	ld	r31, Y
    29d0:	c6 5d       	subi	r28, 0xD6	; 214
    29d2:	d2 40       	sbci	r29, 0x02	; 2
    29d4:	c3 57       	subi	r28, 0x73	; 115
    29d6:	dd 4f       	sbci	r29, 0xFD	; 253
    29d8:	f8 83       	st	Y, r31
    29da:	cd 58       	subi	r28, 0x8D	; 141
    29dc:	d2 40       	sbci	r29, 0x02	; 2
    29de:	c9 52       	subi	r28, 0x29	; 41
    29e0:	dd 4f       	sbci	r29, 0xFD	; 253
    29e2:	a8 80       	ld	r10, Y
    29e4:	c7 5d       	subi	r28, 0xD7	; 215
    29e6:	d2 40       	sbci	r29, 0x02	; 2
    29e8:	c2 57       	subi	r28, 0x72	; 114
    29ea:	dd 4f       	sbci	r29, 0xFD	; 253
    29ec:	a8 82       	st	Y, r10
    29ee:	ce 58       	subi	r28, 0x8E	; 142
    29f0:	d2 40       	sbci	r29, 0x02	; 2
    29f2:	c8 52       	subi	r28, 0x28	; 40
    29f4:	dd 4f       	sbci	r29, 0xFD	; 253
    29f6:	b8 80       	ld	r11, Y
    29f8:	c8 5d       	subi	r28, 0xD8	; 216
    29fa:	d2 40       	sbci	r29, 0x02	; 2
    29fc:	c1 57       	subi	r28, 0x71	; 113
    29fe:	dd 4f       	sbci	r29, 0xFD	; 253
    2a00:	b8 82       	st	Y, r11
    2a02:	cf 58       	subi	r28, 0x8F	; 143
    2a04:	d2 40       	sbci	r29, 0x02	; 2
    2a06:	c7 52       	subi	r28, 0x27	; 39
    2a08:	dd 4f       	sbci	r29, 0xFD	; 253
    2a0a:	c8 80       	ld	r12, Y
    2a0c:	c9 5d       	subi	r28, 0xD9	; 217
    2a0e:	d2 40       	sbci	r29, 0x02	; 2
    2a10:	c0 57       	subi	r28, 0x70	; 112
    2a12:	dd 4f       	sbci	r29, 0xFD	; 253
    2a14:	c8 82       	st	Y, r12
    2a16:	c0 59       	subi	r28, 0x90	; 144
    2a18:	d2 40       	sbci	r29, 0x02	; 2
    2a1a:	c6 52       	subi	r28, 0x26	; 38
    2a1c:	dd 4f       	sbci	r29, 0xFD	; 253
    2a1e:	d8 80       	ld	r13, Y
    2a20:	ca 5d       	subi	r28, 0xDA	; 218
    2a22:	d2 40       	sbci	r29, 0x02	; 2
    2a24:	c5 56       	subi	r28, 0x65	; 101
    2a26:	dd 4f       	sbci	r29, 0xFD	; 253
    2a28:	d8 82       	st	Y, r13
    2a2a:	cb 59       	subi	r28, 0x9B	; 155
    2a2c:	d2 40       	sbci	r29, 0x02	; 2
    2a2e:	c5 52       	subi	r28, 0x25	; 37
    2a30:	dd 4f       	sbci	r29, 0xFD	; 253
    2a32:	18 81       	ld	r17, Y
    2a34:	cb 5d       	subi	r28, 0xDB	; 219
    2a36:	d2 40       	sbci	r29, 0x02	; 2
    2a38:	c4 56       	subi	r28, 0x64	; 100
    2a3a:	dd 4f       	sbci	r29, 0xFD	; 253
    2a3c:	18 83       	st	Y, r17
    2a3e:	cc 59       	subi	r28, 0x9C	; 156
    2a40:	d2 40       	sbci	r29, 0x02	; 2
    2a42:	c4 55       	subi	r28, 0x54	; 84
    2a44:	dd 4f       	sbci	r29, 0xFD	; 253
    2a46:	48 80       	ld	r4, Y
    2a48:	59 80       	ldd	r5, Y+1	; 0x01
    2a4a:	cc 5a       	subi	r28, 0xAC	; 172
    2a4c:	d2 40       	sbci	r29, 0x02	; 2
    2a4e:	cb 55       	subi	r28, 0x5B	; 91
    2a50:	dd 4f       	sbci	r29, 0xFD	; 253
    2a52:	b8 83       	st	Y, r27
    2a54:	c5 5a       	subi	r28, 0xA5	; 165
    2a56:	d2 40       	sbci	r29, 0x02	; 2
    2a58:	c4 55       	subi	r28, 0x54	; 84
    2a5a:	dd 4f       	sbci	r29, 0xFD	; 253
    2a5c:	a8 83       	st	Y, r26
    2a5e:	cc 5a       	subi	r28, 0xAC	; 172
    2a60:	d2 40       	sbci	r29, 0x02	; 2
    2a62:	c2 55       	subi	r28, 0x52	; 82
    2a64:	dd 4f       	sbci	r29, 0xFD	; 253
    2a66:	28 82       	st	Y, r2
    2a68:	ce 5a       	subi	r28, 0xAE	; 174
    2a6a:	d2 40       	sbci	r29, 0x02	; 2
    2a6c:	c1 55       	subi	r28, 0x51	; 81
    2a6e:	dd 4f       	sbci	r29, 0xFD	; 253
    2a70:	88 82       	st	Y, r8
    2a72:	cf 5a       	subi	r28, 0xAF	; 175
    2a74:	d2 40       	sbci	r29, 0x02	; 2
    2a76:	c0 55       	subi	r28, 0x50	; 80
    2a78:	dd 4f       	sbci	r29, 0xFD	; 253
    2a7a:	98 82       	st	Y, r9
    2a7c:	c0 5b       	subi	r28, 0xB0	; 176
    2a7e:	d2 40       	sbci	r29, 0x02	; 2
    2a80:	26 2c       	mov	r2, r6
    2a82:	93 2c       	mov	r9, r3
    2a84:	cd 56       	subi	r28, 0x6D	; 109
    2a86:	dd 4f       	sbci	r29, 0xFD	; 253
    2a88:	88 80       	ld	r8, Y
    2a8a:	c3 59       	subi	r28, 0x93	; 147
    2a8c:	d2 40       	sbci	r29, 0x02	; 2
    2a8e:	90 c1       	rjmp	.+800    	; 0x2db0 <sha512Block+0x133e>
    2a90:	ce 53       	subi	r28, 0x3E	; 62
    2a92:	dd 4f       	sbci	r29, 0xFD	; 253
    2a94:	a8 81       	ld	r26, Y
    2a96:	c2 5c       	subi	r28, 0xC2	; 194
    2a98:	d2 40       	sbci	r29, 0x02	; 2
    2a9a:	c6 54       	subi	r28, 0x46	; 70
    2a9c:	dd 4f       	sbci	r29, 0xFD	; 253
    2a9e:	a8 83       	st	Y, r26
    2aa0:	ca 5b       	subi	r28, 0xBA	; 186
    2aa2:	d2 40       	sbci	r29, 0x02	; 2
    2aa4:	cd 53       	subi	r28, 0x3D	; 61
    2aa6:	dd 4f       	sbci	r29, 0xFD	; 253
    2aa8:	b8 81       	ld	r27, Y
    2aaa:	c3 5c       	subi	r28, 0xC3	; 195
    2aac:	d2 40       	sbci	r29, 0x02	; 2
    2aae:	c5 54       	subi	r28, 0x45	; 69
    2ab0:	dd 4f       	sbci	r29, 0xFD	; 253
    2ab2:	b8 83       	st	Y, r27
    2ab4:	cb 5b       	subi	r28, 0xBB	; 187
    2ab6:	d2 40       	sbci	r29, 0x02	; 2
    2ab8:	cc 53       	subi	r28, 0x3C	; 60
    2aba:	dd 4f       	sbci	r29, 0xFD	; 253
    2abc:	a8 81       	ld	r26, Y
    2abe:	c4 5c       	subi	r28, 0xC4	; 196
    2ac0:	d2 40       	sbci	r29, 0x02	; 2
    2ac2:	c4 54       	subi	r28, 0x44	; 68
    2ac4:	dd 4f       	sbci	r29, 0xFD	; 253
    2ac6:	a8 83       	st	Y, r26
    2ac8:	cc 5b       	subi	r28, 0xBC	; 188
    2aca:	d2 40       	sbci	r29, 0x02	; 2
    2acc:	cb 53       	subi	r28, 0x3B	; 59
    2ace:	dd 4f       	sbci	r29, 0xFD	; 253
    2ad0:	b8 81       	ld	r27, Y
    2ad2:	c5 5c       	subi	r28, 0xC5	; 197
    2ad4:	d2 40       	sbci	r29, 0x02	; 2
    2ad6:	c3 54       	subi	r28, 0x43	; 67
    2ad8:	dd 4f       	sbci	r29, 0xFD	; 253
    2ada:	b8 83       	st	Y, r27
    2adc:	cd 5b       	subi	r28, 0xBD	; 189
    2ade:	d2 40       	sbci	r29, 0x02	; 2
    2ae0:	ca 53       	subi	r28, 0x3A	; 58
    2ae2:	dd 4f       	sbci	r29, 0xFD	; 253
    2ae4:	a8 81       	ld	r26, Y
    2ae6:	c6 5c       	subi	r28, 0xC6	; 198
    2ae8:	d2 40       	sbci	r29, 0x02	; 2
    2aea:	c2 54       	subi	r28, 0x42	; 66
    2aec:	dd 4f       	sbci	r29, 0xFD	; 253
    2aee:	a8 83       	st	Y, r26
    2af0:	ce 5b       	subi	r28, 0xBE	; 190
    2af2:	d2 40       	sbci	r29, 0x02	; 2
    2af4:	c9 53       	subi	r28, 0x39	; 57
    2af6:	dd 4f       	sbci	r29, 0xFD	; 253
    2af8:	b8 81       	ld	r27, Y
    2afa:	c7 5c       	subi	r28, 0xC7	; 199
    2afc:	d2 40       	sbci	r29, 0x02	; 2
    2afe:	c1 54       	subi	r28, 0x41	; 65
    2b00:	dd 4f       	sbci	r29, 0xFD	; 253
    2b02:	b8 83       	st	Y, r27
    2b04:	cf 5b       	subi	r28, 0xBF	; 191
    2b06:	d2 40       	sbci	r29, 0x02	; 2
    2b08:	c8 53       	subi	r28, 0x38	; 56
    2b0a:	dd 4f       	sbci	r29, 0xFD	; 253
    2b0c:	a8 81       	ld	r26, Y
    2b0e:	c8 5c       	subi	r28, 0xC8	; 200
    2b10:	d2 40       	sbci	r29, 0x02	; 2
    2b12:	c0 54       	subi	r28, 0x40	; 64
    2b14:	dd 4f       	sbci	r29, 0xFD	; 253
    2b16:	a8 83       	st	Y, r26
    2b18:	c0 5c       	subi	r28, 0xC0	; 192
    2b1a:	d2 40       	sbci	r29, 0x02	; 2
    2b1c:	c7 53       	subi	r28, 0x37	; 55
    2b1e:	dd 4f       	sbci	r29, 0xFD	; 253
    2b20:	b8 81       	ld	r27, Y
    2b22:	c9 5c       	subi	r28, 0xC9	; 201
    2b24:	d2 40       	sbci	r29, 0x02	; 2
    2b26:	cf 53       	subi	r28, 0x3F	; 63
    2b28:	dd 4f       	sbci	r29, 0xFD	; 253
    2b2a:	b8 83       	st	Y, r27
    2b2c:	c1 5c       	subi	r28, 0xC1	; 193
    2b2e:	d2 40       	sbci	r29, 0x02	; 2
    2b30:	ce 53       	subi	r28, 0x3E	; 62
    2b32:	dd 4f       	sbci	r29, 0xFD	; 253
    2b34:	28 82       	st	Y, r2
    2b36:	c2 5c       	subi	r28, 0xC2	; 194
    2b38:	d2 40       	sbci	r29, 0x02	; 2
    2b3a:	cd 53       	subi	r28, 0x3D	; 61
    2b3c:	dd 4f       	sbci	r29, 0xFD	; 253
    2b3e:	98 82       	st	Y, r9
    2b40:	c3 5c       	subi	r28, 0xC3	; 195
    2b42:	d2 40       	sbci	r29, 0x02	; 2
    2b44:	cc 53       	subi	r28, 0x3C	; 60
    2b46:	dd 4f       	sbci	r29, 0xFD	; 253
    2b48:	88 82       	st	Y, r8
    2b4a:	c4 5c       	subi	r28, 0xC4	; 196
    2b4c:	d2 40       	sbci	r29, 0x02	; 2
    2b4e:	cb 53       	subi	r28, 0x3B	; 59
    2b50:	dd 4f       	sbci	r29, 0xFD	; 253
    2b52:	78 82       	st	Y, r7
    2b54:	c5 5c       	subi	r28, 0xC5	; 197
    2b56:	d2 40       	sbci	r29, 0x02	; 2
    2b58:	cd 57       	subi	r28, 0x7D	; 125
    2b5a:	dd 4f       	sbci	r29, 0xFD	; 253
    2b5c:	a8 81       	ld	r26, Y
    2b5e:	c3 58       	subi	r28, 0x83	; 131
    2b60:	d2 40       	sbci	r29, 0x02	; 2
    2b62:	ca 53       	subi	r28, 0x3A	; 58
    2b64:	dd 4f       	sbci	r29, 0xFD	; 253
    2b66:	a8 83       	st	Y, r26
    2b68:	c6 5c       	subi	r28, 0xC6	; 198
    2b6a:	d2 40       	sbci	r29, 0x02	; 2
    2b6c:	cc 57       	subi	r28, 0x7C	; 124
    2b6e:	dd 4f       	sbci	r29, 0xFD	; 253
    2b70:	b8 81       	ld	r27, Y
    2b72:	c4 58       	subi	r28, 0x84	; 132
    2b74:	d2 40       	sbci	r29, 0x02	; 2
    2b76:	c9 53       	subi	r28, 0x39	; 57
    2b78:	dd 4f       	sbci	r29, 0xFD	; 253
    2b7a:	b8 83       	st	Y, r27
    2b7c:	c7 5c       	subi	r28, 0xC7	; 199
    2b7e:	d2 40       	sbci	r29, 0x02	; 2
    2b80:	cb 57       	subi	r28, 0x7B	; 123
    2b82:	dd 4f       	sbci	r29, 0xFD	; 253
    2b84:	a8 81       	ld	r26, Y
    2b86:	c5 58       	subi	r28, 0x85	; 133
    2b88:	d2 40       	sbci	r29, 0x02	; 2
    2b8a:	c8 53       	subi	r28, 0x38	; 56
    2b8c:	dd 4f       	sbci	r29, 0xFD	; 253
    2b8e:	a8 83       	st	Y, r26
    2b90:	c8 5c       	subi	r28, 0xC8	; 200
    2b92:	d2 40       	sbci	r29, 0x02	; 2
    2b94:	ca 57       	subi	r28, 0x7A	; 122
    2b96:	dd 4f       	sbci	r29, 0xFD	; 253
    2b98:	b8 81       	ld	r27, Y
    2b9a:	c6 58       	subi	r28, 0x86	; 134
    2b9c:	d2 40       	sbci	r29, 0x02	; 2
    2b9e:	c7 53       	subi	r28, 0x37	; 55
    2ba0:	dd 4f       	sbci	r29, 0xFD	; 253
    2ba2:	b8 83       	st	Y, r27
    2ba4:	c9 5c       	subi	r28, 0xC9	; 201
    2ba6:	d2 40       	sbci	r29, 0x02	; 2
		t1 = h + bigSigma1(e) + ch(e, f, g) + LOOKUP_QWORD(k[t]) + w[t];
		t2 = bigSigma0(a) + maj(a, b, c);
		h = g;
		g = f;
		f = e;
		e = d + t1;
    2ba8:	c9 57       	subi	r28, 0x79	; 121
    2baa:	dd 4f       	sbci	r29, 0xFD	; 253
    2bac:	28 80       	ld	r2, Y
    2bae:	c7 58       	subi	r28, 0x87	; 135
    2bb0:	d2 40       	sbci	r29, 0x02	; 2
    2bb2:	c8 57       	subi	r28, 0x78	; 120
    2bb4:	dd 4f       	sbci	r29, 0xFD	; 253
    2bb6:	98 80       	ld	r9, Y
    2bb8:	c8 58       	subi	r28, 0x88	; 136
    2bba:	d2 40       	sbci	r29, 0x02	; 2
    2bbc:	c7 57       	subi	r28, 0x77	; 119
    2bbe:	dd 4f       	sbci	r29, 0xFD	; 253
    2bc0:	88 80       	ld	r8, Y
    2bc2:	c9 58       	subi	r28, 0x89	; 137
    2bc4:	d2 40       	sbci	r29, 0x02	; 2
    2bc6:	c6 57       	subi	r28, 0x76	; 118
    2bc8:	dd 4f       	sbci	r29, 0xFD	; 253
    2bca:	78 80       	ld	r7, Y
    2bcc:	ca 58       	subi	r28, 0x8A	; 138
    2bce:	d2 40       	sbci	r29, 0x02	; 2
    2bd0:	cf 54       	subi	r28, 0x4F	; 79
    2bd2:	dd 4f       	sbci	r29, 0xFD	; 253
    2bd4:	e8 81       	ld	r30, Y
    2bd6:	c1 5b       	subi	r28, 0xB1	; 177
    2bd8:	d2 40       	sbci	r29, 0x02	; 2
    2bda:	cd 57       	subi	r28, 0x7D	; 125
    2bdc:	dd 4f       	sbci	r29, 0xFD	; 253
    2bde:	e8 83       	st	Y, r30
    2be0:	c3 58       	subi	r28, 0x83	; 131
    2be2:	d2 40       	sbci	r29, 0x02	; 2
    2be4:	c1 56       	subi	r28, 0x61	; 97
    2be6:	dd 4f       	sbci	r29, 0xFD	; 253
    2be8:	f8 81       	ld	r31, Y
    2bea:	cf 59       	subi	r28, 0x9F	; 159
    2bec:	d2 40       	sbci	r29, 0x02	; 2
    2bee:	cc 57       	subi	r28, 0x7C	; 124
    2bf0:	dd 4f       	sbci	r29, 0xFD	; 253
    2bf2:	f8 83       	st	Y, r31
    2bf4:	c4 58       	subi	r28, 0x84	; 132
    2bf6:	d2 40       	sbci	r29, 0x02	; 2
    2bf8:	c0 56       	subi	r28, 0x60	; 96
    2bfa:	dd 4f       	sbci	r29, 0xFD	; 253
    2bfc:	a8 81       	ld	r26, Y
    2bfe:	c0 5a       	subi	r28, 0xA0	; 160
    2c00:	d2 40       	sbci	r29, 0x02	; 2
    2c02:	cb 57       	subi	r28, 0x7B	; 123
    2c04:	dd 4f       	sbci	r29, 0xFD	; 253
    2c06:	a8 83       	st	Y, r26
    2c08:	c5 58       	subi	r28, 0x85	; 133
    2c0a:	d2 40       	sbci	r29, 0x02	; 2
    2c0c:	cf 55       	subi	r28, 0x5F	; 95
    2c0e:	dd 4f       	sbci	r29, 0xFD	; 253
    2c10:	b8 81       	ld	r27, Y
    2c12:	c1 5a       	subi	r28, 0xA1	; 161
    2c14:	d2 40       	sbci	r29, 0x02	; 2
    2c16:	ca 57       	subi	r28, 0x7A	; 122
    2c18:	dd 4f       	sbci	r29, 0xFD	; 253
    2c1a:	b8 83       	st	Y, r27
    2c1c:	c6 58       	subi	r28, 0x86	; 134
    2c1e:	d2 40       	sbci	r29, 0x02	; 2
    2c20:	ce 54       	subi	r28, 0x4E	; 78
    2c22:	dd 4f       	sbci	r29, 0xFD	; 253
    2c24:	a8 81       	ld	r26, Y
    2c26:	c2 5b       	subi	r28, 0xB2	; 178
    2c28:	d2 40       	sbci	r29, 0x02	; 2
    2c2a:	ce 55       	subi	r28, 0x5E	; 94
    2c2c:	dd 4f       	sbci	r29, 0xFD	; 253
    2c2e:	a8 83       	st	Y, r26
    2c30:	c2 5a       	subi	r28, 0xA2	; 162
    2c32:	d2 40       	sbci	r29, 0x02	; 2
    2c34:	cd 54       	subi	r28, 0x4D	; 77
    2c36:	dd 4f       	sbci	r29, 0xFD	; 253
    2c38:	b8 81       	ld	r27, Y
    2c3a:	c3 5b       	subi	r28, 0xB3	; 179
    2c3c:	d2 40       	sbci	r29, 0x02	; 2
    2c3e:	cd 55       	subi	r28, 0x5D	; 93
    2c40:	dd 4f       	sbci	r29, 0xFD	; 253
    2c42:	b8 83       	st	Y, r27
    2c44:	c3 5a       	subi	r28, 0xA3	; 163
    2c46:	d2 40       	sbci	r29, 0x02	; 2
    2c48:	cc 54       	subi	r28, 0x4C	; 76
    2c4a:	dd 4f       	sbci	r29, 0xFD	; 253
    2c4c:	a8 81       	ld	r26, Y
    2c4e:	c4 5b       	subi	r28, 0xB4	; 180
    2c50:	d2 40       	sbci	r29, 0x02	; 2
    2c52:	cc 55       	subi	r28, 0x5C	; 92
    2c54:	dd 4f       	sbci	r29, 0xFD	; 253
    2c56:	a8 83       	st	Y, r26
    2c58:	c4 5a       	subi	r28, 0xA4	; 164
    2c5a:	d2 40       	sbci	r29, 0x02	; 2
    2c5c:	cb 54       	subi	r28, 0x4B	; 75
    2c5e:	dd 4f       	sbci	r29, 0xFD	; 253
    2c60:	b8 81       	ld	r27, Y
    2c62:	c5 5b       	subi	r28, 0xB5	; 181
    2c64:	d2 40       	sbci	r29, 0x02	; 2
    2c66:	cb 55       	subi	r28, 0x5B	; 91
    2c68:	dd 4f       	sbci	r29, 0xFD	; 253
    2c6a:	b8 83       	st	Y, r27
    2c6c:	c5 5a       	subi	r28, 0xA5	; 165
    2c6e:	d2 40       	sbci	r29, 0x02	; 2
    2c70:	ca 54       	subi	r28, 0x4A	; 74
    2c72:	dd 4f       	sbci	r29, 0xFD	; 253
    2c74:	a8 81       	ld	r26, Y
    2c76:	c6 5b       	subi	r28, 0xB6	; 182
    2c78:	d2 40       	sbci	r29, 0x02	; 2
    2c7a:	c4 55       	subi	r28, 0x54	; 84
    2c7c:	dd 4f       	sbci	r29, 0xFD	; 253
    2c7e:	a8 83       	st	Y, r26
    2c80:	cc 5a       	subi	r28, 0xAC	; 172
    2c82:	d2 40       	sbci	r29, 0x02	; 2
    2c84:	c9 54       	subi	r28, 0x49	; 73
    2c86:	dd 4f       	sbci	r29, 0xFD	; 253
    2c88:	b8 81       	ld	r27, Y
    2c8a:	c7 5b       	subi	r28, 0xB7	; 183
    2c8c:	d2 40       	sbci	r29, 0x02	; 2
    2c8e:	c2 55       	subi	r28, 0x52	; 82
    2c90:	dd 4f       	sbci	r29, 0xFD	; 253
    2c92:	b8 83       	st	Y, r27
    2c94:	ce 5a       	subi	r28, 0xAE	; 174
    2c96:	d2 40       	sbci	r29, 0x02	; 2
    2c98:	c8 54       	subi	r28, 0x48	; 72
    2c9a:	dd 4f       	sbci	r29, 0xFD	; 253
    2c9c:	a8 81       	ld	r26, Y
    2c9e:	c8 5b       	subi	r28, 0xB8	; 184
    2ca0:	d2 40       	sbci	r29, 0x02	; 2
    2ca2:	c1 55       	subi	r28, 0x51	; 81
    2ca4:	dd 4f       	sbci	r29, 0xFD	; 253
    2ca6:	a8 83       	st	Y, r26
    2ca8:	cf 5a       	subi	r28, 0xAF	; 175
    2caa:	d2 40       	sbci	r29, 0x02	; 2
    2cac:	c7 54       	subi	r28, 0x47	; 71
    2cae:	dd 4f       	sbci	r29, 0xFD	; 253
    2cb0:	b8 81       	ld	r27, Y
    2cb2:	c9 5b       	subi	r28, 0xB9	; 185
    2cb4:	d2 40       	sbci	r29, 0x02	; 2
    2cb6:	c0 55       	subi	r28, 0x50	; 80
    2cb8:	dd 4f       	sbci	r29, 0xFD	; 253
    2cba:	b8 83       	st	Y, r27
    2cbc:	c0 5b       	subi	r28, 0xB0	; 176
    2cbe:	d2 40       	sbci	r29, 0x02	; 2
    2cc0:	c5 57       	subi	r28, 0x75	; 117
    2cc2:	dd 4f       	sbci	r29, 0xFD	; 253
    2cc4:	a8 81       	ld	r26, Y
    2cc6:	cb 58       	subi	r28, 0x8B	; 139
    2cc8:	d2 40       	sbci	r29, 0x02	; 2
    2cca:	ce 54       	subi	r28, 0x4E	; 78
    2ccc:	dd 4f       	sbci	r29, 0xFD	; 253
    2cce:	a8 83       	st	Y, r26
    2cd0:	c2 5b       	subi	r28, 0xB2	; 178
    2cd2:	d2 40       	sbci	r29, 0x02	; 2
    2cd4:	c4 57       	subi	r28, 0x74	; 116
    2cd6:	dd 4f       	sbci	r29, 0xFD	; 253
    2cd8:	b8 81       	ld	r27, Y
    2cda:	cc 58       	subi	r28, 0x8C	; 140
    2cdc:	d2 40       	sbci	r29, 0x02	; 2
    2cde:	cd 54       	subi	r28, 0x4D	; 77
    2ce0:	dd 4f       	sbci	r29, 0xFD	; 253
    2ce2:	b8 83       	st	Y, r27
    2ce4:	c3 5b       	subi	r28, 0xB3	; 179
    2ce6:	d2 40       	sbci	r29, 0x02	; 2
    2ce8:	c3 57       	subi	r28, 0x73	; 115
    2cea:	dd 4f       	sbci	r29, 0xFD	; 253
    2cec:	a8 81       	ld	r26, Y
    2cee:	cd 58       	subi	r28, 0x8D	; 141
    2cf0:	d2 40       	sbci	r29, 0x02	; 2
    2cf2:	cc 54       	subi	r28, 0x4C	; 76
    2cf4:	dd 4f       	sbci	r29, 0xFD	; 253
    2cf6:	a8 83       	st	Y, r26
    2cf8:	c4 5b       	subi	r28, 0xB4	; 180
    2cfa:	d2 40       	sbci	r29, 0x02	; 2
    2cfc:	c2 57       	subi	r28, 0x72	; 114
    2cfe:	dd 4f       	sbci	r29, 0xFD	; 253
    2d00:	b8 81       	ld	r27, Y
    2d02:	ce 58       	subi	r28, 0x8E	; 142
    2d04:	d2 40       	sbci	r29, 0x02	; 2
    2d06:	cb 54       	subi	r28, 0x4B	; 75
    2d08:	dd 4f       	sbci	r29, 0xFD	; 253
    2d0a:	b8 83       	st	Y, r27
    2d0c:	c5 5b       	subi	r28, 0xB5	; 181
    2d0e:	d2 40       	sbci	r29, 0x02	; 2
    2d10:	c1 57       	subi	r28, 0x71	; 113
    2d12:	dd 4f       	sbci	r29, 0xFD	; 253
    2d14:	a8 81       	ld	r26, Y
    2d16:	cf 58       	subi	r28, 0x8F	; 143
    2d18:	d2 40       	sbci	r29, 0x02	; 2
    2d1a:	ca 54       	subi	r28, 0x4A	; 74
    2d1c:	dd 4f       	sbci	r29, 0xFD	; 253
    2d1e:	a8 83       	st	Y, r26
    2d20:	c6 5b       	subi	r28, 0xB6	; 182
    2d22:	d2 40       	sbci	r29, 0x02	; 2
    2d24:	c0 57       	subi	r28, 0x70	; 112
    2d26:	dd 4f       	sbci	r29, 0xFD	; 253
    2d28:	b8 81       	ld	r27, Y
    2d2a:	c0 59       	subi	r28, 0x90	; 144
    2d2c:	d2 40       	sbci	r29, 0x02	; 2
    2d2e:	c9 54       	subi	r28, 0x49	; 73
    2d30:	dd 4f       	sbci	r29, 0xFD	; 253
    2d32:	b8 83       	st	Y, r27
    2d34:	c7 5b       	subi	r28, 0xB7	; 183
    2d36:	d2 40       	sbci	r29, 0x02	; 2
    2d38:	c5 56       	subi	r28, 0x65	; 101
    2d3a:	dd 4f       	sbci	r29, 0xFD	; 253
    2d3c:	a8 81       	ld	r26, Y
    2d3e:	cb 59       	subi	r28, 0x9B	; 155
    2d40:	d2 40       	sbci	r29, 0x02	; 2
    2d42:	c8 54       	subi	r28, 0x48	; 72
    2d44:	dd 4f       	sbci	r29, 0xFD	; 253
    2d46:	a8 83       	st	Y, r26
    2d48:	c8 5b       	subi	r28, 0xB8	; 184
    2d4a:	d2 40       	sbci	r29, 0x02	; 2
    2d4c:	c4 56       	subi	r28, 0x64	; 100
    2d4e:	dd 4f       	sbci	r29, 0xFD	; 253
    2d50:	b8 81       	ld	r27, Y
    2d52:	cc 59       	subi	r28, 0x9C	; 156
    2d54:	d2 40       	sbci	r29, 0x02	; 2
    2d56:	c7 54       	subi	r28, 0x47	; 71
    2d58:	dd 4f       	sbci	r29, 0xFD	; 253
    2d5a:	b8 83       	st	Y, r27
    2d5c:	c9 5b       	subi	r28, 0xB9	; 185
    2d5e:	d2 40       	sbci	r29, 0x02	; 2
		d = c;
		c = b;
		b = a;
		a = t1 + t2;
    2d60:	c5 57       	subi	r28, 0x75	; 117
    2d62:	dd 4f       	sbci	r29, 0xFD	; 253
    2d64:	28 83       	st	Y, r18
    2d66:	cb 58       	subi	r28, 0x8B	; 139
    2d68:	d2 40       	sbci	r29, 0x02	; 2
    2d6a:	c4 57       	subi	r28, 0x74	; 116
    2d6c:	dd 4f       	sbci	r29, 0xFD	; 253
    2d6e:	38 83       	st	Y, r19
    2d70:	cc 58       	subi	r28, 0x8C	; 140
    2d72:	d2 40       	sbci	r29, 0x02	; 2
    2d74:	c3 57       	subi	r28, 0x73	; 115
    2d76:	dd 4f       	sbci	r29, 0xFD	; 253
    2d78:	48 83       	st	Y, r20
    2d7a:	cd 58       	subi	r28, 0x8D	; 141
    2d7c:	d2 40       	sbci	r29, 0x02	; 2
    2d7e:	c2 57       	subi	r28, 0x72	; 114
    2d80:	dd 4f       	sbci	r29, 0xFD	; 253
    2d82:	58 83       	st	Y, r21
    2d84:	ce 58       	subi	r28, 0x8E	; 142
    2d86:	d2 40       	sbci	r29, 0x02	; 2
    2d88:	c1 57       	subi	r28, 0x71	; 113
    2d8a:	dd 4f       	sbci	r29, 0xFD	; 253
    2d8c:	68 83       	st	Y, r22
    2d8e:	cf 58       	subi	r28, 0x8F	; 143
    2d90:	d2 40       	sbci	r29, 0x02	; 2
    2d92:	c0 57       	subi	r28, 0x70	; 112
    2d94:	dd 4f       	sbci	r29, 0xFD	; 253
    2d96:	78 83       	st	Y, r23
    2d98:	c0 59       	subi	r28, 0x90	; 144
    2d9a:	d2 40       	sbci	r29, 0x02	; 2
    2d9c:	c5 56       	subi	r28, 0x65	; 101
    2d9e:	dd 4f       	sbci	r29, 0xFD	; 253
    2da0:	88 83       	st	Y, r24
    2da2:	cb 59       	subi	r28, 0x9B	; 155
    2da4:	d2 40       	sbci	r29, 0x02	; 2
    2da6:	c4 56       	subi	r28, 0x64	; 100
    2da8:	dd 4f       	sbci	r29, 0xFD	; 253
    2daa:	98 83       	st	Y, r25
    2dac:	cc 59       	subi	r28, 0x9C	; 156
    2dae:	d2 40       	sbci	r29, 0x02	; 2
  */
static uint64_t my_pgm_read_qword_near(const void *address)
{
	uint32_t l;
	uint32_t r;
	l = LOOKUP_DWORD(((uint32_t *)address)[0]);
    2db0:	c3 56       	subi	r28, 0x63	; 99
    2db2:	dd 4f       	sbci	r29, 0xFD	; 253
    2db4:	e8 81       	ld	r30, Y
    2db6:	f9 81       	ldd	r31, Y+1	; 0x01
    2db8:	cd 59       	subi	r28, 0x9D	; 157
    2dba:	d2 40       	sbci	r29, 0x02	; 2
    2dbc:	a5 90       	lpm	r10, Z+
    2dbe:	b5 90       	lpm	r11, Z+
    2dc0:	c5 90       	lpm	r12, Z+
    2dc2:	d4 90       	lpm	r13, Z
    2dc4:	cd 56       	subi	r28, 0x6D	; 109
    2dc6:	dd 4f       	sbci	r29, 0xFD	; 253
    2dc8:	a8 82       	st	Y, r10
    2dca:	b9 82       	std	Y+1, r11	; 0x01
    2dcc:	ca 82       	std	Y+2, r12	; 0x02
    2dce:	db 82       	std	Y+3, r13	; 0x03
    2dd0:	c3 59       	subi	r28, 0x93	; 147
    2dd2:	d2 40       	sbci	r29, 0x02	; 2
    2dd4:	c3 56       	subi	r28, 0x63	; 99
    2dd6:	dd 4f       	sbci	r29, 0xFD	; 253
    2dd8:	a8 81       	ld	r26, Y
    2dda:	b9 81       	ldd	r27, Y+1	; 0x01
    2ddc:	cd 59       	subi	r28, 0x9D	; 157
    2dde:	d2 40       	sbci	r29, 0x02	; 2
    2de0:	14 96       	adiw	r26, 0x04	; 4
    2de2:	c3 56       	subi	r28, 0x63	; 99
    2de4:	dd 4f       	sbci	r29, 0xFD	; 253
    2de6:	b9 83       	std	Y+1, r27	; 0x01
    2de8:	a8 83       	st	Y, r26
    2dea:	cd 59       	subi	r28, 0x9D	; 157
    2dec:	d2 40       	sbci	r29, 0x02	; 2
	r = LOOKUP_DWORD(((uint32_t *)address)[1]);
    2dee:	fd 01       	movw	r30, r26
    2df0:	a5 90       	lpm	r10, Z+
    2df2:	b5 90       	lpm	r11, Z+
    2df4:	c5 90       	lpm	r12, Z+
    2df6:	d4 90       	lpm	r13, Z
    2df8:	c9 56       	subi	r28, 0x69	; 105
    2dfa:	dd 4f       	sbci	r29, 0xFD	; 253
    2dfc:	a8 82       	st	Y, r10
    2dfe:	b9 82       	std	Y+1, r11	; 0x01
    2e00:	ca 82       	std	Y+2, r12	; 0x02
    2e02:	db 82       	std	Y+3, r13	; 0x03
    2e04:	c7 59       	subi	r28, 0x97	; 151
    2e06:	d2 40       	sbci	r29, 0x02	; 2
	f = hs64->h[5];
	g = hs64->h[6];
	h = hs64->h[7];
	for (t = 0; t < 80; t++)
	{
		t1 = h + bigSigma1(e) + ch(e, f, g) + LOOKUP_QWORD(k[t]) + w[t];
    2e08:	d2 01       	movw	r26, r4
    2e0a:	bc 91       	ld	r27, X
    2e0c:	c9 57       	subi	r28, 0x79	; 121
    2e0e:	dd 4f       	sbci	r29, 0xFD	; 253
    2e10:	b8 83       	st	Y, r27
    2e12:	c7 58       	subi	r28, 0x87	; 135
    2e14:	d2 40       	sbci	r29, 0x02	; 2
    2e16:	f2 01       	movw	r30, r4
    2e18:	f1 81       	ldd	r31, Z+1	; 0x01
    2e1a:	c8 57       	subi	r28, 0x78	; 120
    2e1c:	dd 4f       	sbci	r29, 0xFD	; 253
    2e1e:	f8 83       	st	Y, r31
    2e20:	c8 58       	subi	r28, 0x88	; 136
    2e22:	d2 40       	sbci	r29, 0x02	; 2
    2e24:	d2 01       	movw	r26, r4
    2e26:	12 96       	adiw	r26, 0x02	; 2
    2e28:	bc 91       	ld	r27, X
    2e2a:	c7 57       	subi	r28, 0x77	; 119
    2e2c:	dd 4f       	sbci	r29, 0xFD	; 253
    2e2e:	b8 83       	st	Y, r27
    2e30:	c9 58       	subi	r28, 0x89	; 137
    2e32:	d2 40       	sbci	r29, 0x02	; 2
    2e34:	f2 01       	movw	r30, r4
    2e36:	b3 81       	ldd	r27, Z+3	; 0x03
    2e38:	a4 81       	ldd	r26, Z+4	; 0x04
    2e3a:	f5 81       	ldd	r31, Z+5	; 0x05
    2e3c:	c1 56       	subi	r28, 0x61	; 97
    2e3e:	dd 4f       	sbci	r29, 0xFD	; 253
    2e40:	f8 83       	st	Y, r31
    2e42:	cf 59       	subi	r28, 0x9F	; 159
    2e44:	d2 40       	sbci	r29, 0x02	; 2
    2e46:	f2 01       	movw	r30, r4
    2e48:	f6 81       	ldd	r31, Z+6	; 0x06
    2e4a:	c6 57       	subi	r28, 0x76	; 118
    2e4c:	dd 4f       	sbci	r29, 0xFD	; 253
    2e4e:	f8 83       	st	Y, r31
    2e50:	ca 58       	subi	r28, 0x8A	; 138
    2e52:	d2 40       	sbci	r29, 0x02	; 2
    2e54:	f2 01       	movw	r30, r4
    2e56:	f7 81       	ldd	r31, Z+7	; 0x07
    2e58:	cf 54       	subi	r28, 0x4F	; 79
    2e5a:	dd 4f       	sbci	r29, 0xFD	; 253
    2e5c:	f8 83       	st	Y, r31
    2e5e:	c1 5b       	subi	r28, 0xB1	; 177
    2e60:	d2 40       	sbci	r29, 0x02	; 2
    2e62:	18 e0       	ldi	r17, 0x08	; 8
    2e64:	41 0e       	add	r4, r17
    2e66:	51 1c       	adc	r5, r1
    2e68:	22 2d       	mov	r18, r2
    2e6a:	39 2d       	mov	r19, r9
    2e6c:	48 2d       	mov	r20, r8
    2e6e:	57 2d       	mov	r21, r7
    2e70:	cd 57       	subi	r28, 0x7D	; 125
    2e72:	dd 4f       	sbci	r29, 0xFD	; 253
    2e74:	68 81       	ld	r22, Y
    2e76:	c3 58       	subi	r28, 0x83	; 131
    2e78:	d2 40       	sbci	r29, 0x02	; 2
    2e7a:	cc 57       	subi	r28, 0x7C	; 124
    2e7c:	dd 4f       	sbci	r29, 0xFD	; 253
    2e7e:	78 81       	ld	r23, Y
    2e80:	c4 58       	subi	r28, 0x84	; 132
    2e82:	d2 40       	sbci	r29, 0x02	; 2
    2e84:	cb 57       	subi	r28, 0x7B	; 123
    2e86:	dd 4f       	sbci	r29, 0xFD	; 253
    2e88:	88 81       	ld	r24, Y
    2e8a:	c5 58       	subi	r28, 0x85	; 133
    2e8c:	d2 40       	sbci	r29, 0x02	; 2
    2e8e:	ca 57       	subi	r28, 0x7A	; 122
    2e90:	dd 4f       	sbci	r29, 0xFD	; 253
    2e92:	98 81       	ld	r25, Y
    2e94:	c6 58       	subi	r28, 0x86	; 134
    2e96:	d2 40       	sbci	r29, 0x02	; 2
    2e98:	0e e2       	ldi	r16, 0x2E	; 46
    2e9a:	0e 94 ea 3d 	call	0x7bd4	; 0x7bd4 <__rotldi3>
    2e9e:	b2 2e       	mov	r11, r18
    2ea0:	c3 2e       	mov	r12, r19
    2ea2:	d4 2e       	mov	r13, r20
    2ea4:	e5 2e       	mov	r14, r21
    2ea6:	f6 2e       	mov	r15, r22
    2ea8:	17 2f       	mov	r17, r23
    2eaa:	e8 2f       	mov	r30, r24
    2eac:	69 2e       	mov	r6, r25
    2eae:	22 2d       	mov	r18, r2
    2eb0:	39 2d       	mov	r19, r9
    2eb2:	48 2d       	mov	r20, r8
    2eb4:	57 2d       	mov	r21, r7
    2eb6:	cd 57       	subi	r28, 0x7D	; 125
    2eb8:	dd 4f       	sbci	r29, 0xFD	; 253
    2eba:	68 81       	ld	r22, Y
    2ebc:	c3 58       	subi	r28, 0x83	; 131
    2ebe:	d2 40       	sbci	r29, 0x02	; 2
    2ec0:	cc 57       	subi	r28, 0x7C	; 124
    2ec2:	dd 4f       	sbci	r29, 0xFD	; 253
    2ec4:	78 81       	ld	r23, Y
    2ec6:	c4 58       	subi	r28, 0x84	; 132
    2ec8:	d2 40       	sbci	r29, 0x02	; 2
    2eca:	cb 57       	subi	r28, 0x7B	; 123
    2ecc:	dd 4f       	sbci	r29, 0xFD	; 253
    2ece:	88 81       	ld	r24, Y
    2ed0:	c5 58       	subi	r28, 0x85	; 133
    2ed2:	d2 40       	sbci	r29, 0x02	; 2
    2ed4:	ca 57       	subi	r28, 0x7A	; 122
    2ed6:	dd 4f       	sbci	r29, 0xFD	; 253
    2ed8:	98 81       	ld	r25, Y
    2eda:	c6 58       	subi	r28, 0x86	; 134
    2edc:	d2 40       	sbci	r29, 0x02	; 2
    2ede:	02 e3       	ldi	r16, 0x32	; 50
    2ee0:	0e 94 ea 3d 	call	0x7bd4	; 0x7bd4 <__rotldi3>
    2ee4:	b2 26       	eor	r11, r18
    2ee6:	c3 26       	eor	r12, r19
    2ee8:	d4 26       	eor	r13, r20
    2eea:	e5 26       	eor	r14, r21
    2eec:	f6 26       	eor	r15, r22
    2eee:	17 27       	eor	r17, r23
    2ef0:	e8 27       	eor	r30, r24
    2ef2:	69 26       	eor	r6, r25
    2ef4:	22 2d       	mov	r18, r2
    2ef6:	39 2d       	mov	r19, r9
    2ef8:	48 2d       	mov	r20, r8
    2efa:	57 2d       	mov	r21, r7
    2efc:	cd 57       	subi	r28, 0x7D	; 125
    2efe:	dd 4f       	sbci	r29, 0xFD	; 253
    2f00:	68 81       	ld	r22, Y
    2f02:	c3 58       	subi	r28, 0x83	; 131
    2f04:	d2 40       	sbci	r29, 0x02	; 2
    2f06:	cc 57       	subi	r28, 0x7C	; 124
    2f08:	dd 4f       	sbci	r29, 0xFD	; 253
    2f0a:	78 81       	ld	r23, Y
    2f0c:	c4 58       	subi	r28, 0x84	; 132
    2f0e:	d2 40       	sbci	r29, 0x02	; 2
    2f10:	cb 57       	subi	r28, 0x7B	; 123
    2f12:	dd 4f       	sbci	r29, 0xFD	; 253
    2f14:	88 81       	ld	r24, Y
    2f16:	c5 58       	subi	r28, 0x85	; 133
    2f18:	d2 40       	sbci	r29, 0x02	; 2
    2f1a:	ca 57       	subi	r28, 0x7A	; 122
    2f1c:	dd 4f       	sbci	r29, 0xFD	; 253
    2f1e:	98 81       	ld	r25, Y
    2f20:	c6 58       	subi	r28, 0x86	; 134
    2f22:	d2 40       	sbci	r29, 0x02	; 2
    2f24:	07 e1       	ldi	r16, 0x17	; 23
    2f26:	0e 94 ea 3d 	call	0x7bd4	; 0x7bd4 <__rotldi3>
    2f2a:	2b 25       	eor	r18, r11
    2f2c:	3c 25       	eor	r19, r12
    2f2e:	4d 25       	eor	r20, r13
    2f30:	5e 25       	eor	r21, r14
    2f32:	6f 25       	eor	r22, r15
    2f34:	71 27       	eor	r23, r17
    2f36:	a2 2c       	mov	r10, r2
    2f38:	a0 94       	com	r10
    2f3a:	c6 54       	subi	r28, 0x46	; 70
    2f3c:	dd 4f       	sbci	r29, 0xFD	; 253
    2f3e:	f8 81       	ld	r31, Y
    2f40:	ca 5b       	subi	r28, 0xBA	; 186
    2f42:	d2 40       	sbci	r29, 0x02	; 2
    2f44:	af 22       	and	r10, r31
    2f46:	b9 2c       	mov	r11, r9
    2f48:	b0 94       	com	r11
    2f4a:	c5 54       	subi	r28, 0x45	; 69
    2f4c:	dd 4f       	sbci	r29, 0xFD	; 253
    2f4e:	c8 80       	ld	r12, Y
    2f50:	cb 5b       	subi	r28, 0xBB	; 187
    2f52:	d2 40       	sbci	r29, 0x02	; 2
    2f54:	bc 20       	and	r11, r12
    2f56:	c8 2c       	mov	r12, r8
    2f58:	c0 94       	com	r12
    2f5a:	c4 54       	subi	r28, 0x44	; 68
    2f5c:	dd 4f       	sbci	r29, 0xFD	; 253
    2f5e:	d8 80       	ld	r13, Y
    2f60:	cc 5b       	subi	r28, 0xBC	; 188
    2f62:	d2 40       	sbci	r29, 0x02	; 2
    2f64:	cd 20       	and	r12, r13
    2f66:	d7 2c       	mov	r13, r7
    2f68:	d0 94       	com	r13
    2f6a:	c3 54       	subi	r28, 0x43	; 67
    2f6c:	dd 4f       	sbci	r29, 0xFD	; 253
    2f6e:	18 81       	ld	r17, Y
    2f70:	cd 5b       	subi	r28, 0xBD	; 189
    2f72:	d2 40       	sbci	r29, 0x02	; 2
    2f74:	d1 22       	and	r13, r17
    2f76:	cd 57       	subi	r28, 0x7D	; 125
    2f78:	dd 4f       	sbci	r29, 0xFD	; 253
    2f7a:	e8 80       	ld	r14, Y
    2f7c:	c3 58       	subi	r28, 0x83	; 131
    2f7e:	d2 40       	sbci	r29, 0x02	; 2
    2f80:	e0 94       	com	r14
    2f82:	c2 54       	subi	r28, 0x42	; 66
    2f84:	dd 4f       	sbci	r29, 0xFD	; 253
    2f86:	f8 81       	ld	r31, Y
    2f88:	ce 5b       	subi	r28, 0xBE	; 190
    2f8a:	d2 40       	sbci	r29, 0x02	; 2
    2f8c:	ef 22       	and	r14, r31
    2f8e:	cc 57       	subi	r28, 0x7C	; 124
    2f90:	dd 4f       	sbci	r29, 0xFD	; 253
    2f92:	f8 80       	ld	r15, Y
    2f94:	c4 58       	subi	r28, 0x84	; 132
    2f96:	d2 40       	sbci	r29, 0x02	; 2
    2f98:	f0 94       	com	r15
    2f9a:	c1 54       	subi	r28, 0x41	; 65
    2f9c:	dd 4f       	sbci	r29, 0xFD	; 253
    2f9e:	18 81       	ld	r17, Y
    2fa0:	cf 5b       	subi	r28, 0xBF	; 191
    2fa2:	d2 40       	sbci	r29, 0x02	; 2
    2fa4:	f1 22       	and	r15, r17
    2fa6:	cb 57       	subi	r28, 0x7B	; 123
    2fa8:	dd 4f       	sbci	r29, 0xFD	; 253
    2faa:	08 81       	ld	r16, Y
    2fac:	c5 58       	subi	r28, 0x85	; 133
    2fae:	d2 40       	sbci	r29, 0x02	; 2
    2fb0:	00 95       	com	r16
    2fb2:	c0 54       	subi	r28, 0x40	; 64
    2fb4:	dd 4f       	sbci	r29, 0xFD	; 253
    2fb6:	f8 81       	ld	r31, Y
    2fb8:	c0 5c       	subi	r28, 0xC0	; 192
    2fba:	d2 40       	sbci	r29, 0x02	; 2
    2fbc:	0f 23       	and	r16, r31
    2fbe:	ca 57       	subi	r28, 0x7A	; 122
    2fc0:	dd 4f       	sbci	r29, 0xFD	; 253
    2fc2:	18 81       	ld	r17, Y
    2fc4:	c6 58       	subi	r28, 0x86	; 134
    2fc6:	d2 40       	sbci	r29, 0x02	; 2
    2fc8:	10 95       	com	r17
    2fca:	cf 53       	subi	r28, 0x3F	; 63
    2fcc:	dd 4f       	sbci	r29, 0xFD	; 253
    2fce:	f8 81       	ld	r31, Y
    2fd0:	c1 5c       	subi	r28, 0xC1	; 193
    2fd2:	d2 40       	sbci	r29, 0x02	; 2
    2fd4:	1f 23       	and	r17, r31
    2fd6:	ce 53       	subi	r28, 0x3E	; 62
    2fd8:	dd 4f       	sbci	r29, 0xFD	; 253
    2fda:	38 80       	ld	r3, Y
    2fdc:	c2 5c       	subi	r28, 0xC2	; 194
    2fde:	d2 40       	sbci	r29, 0x02	; 2
    2fe0:	32 20       	and	r3, r2
    2fe2:	a3 24       	eor	r10, r3
    2fe4:	cd 53       	subi	r28, 0x3D	; 61
    2fe6:	dd 4f       	sbci	r29, 0xFD	; 253
    2fe8:	38 80       	ld	r3, Y
    2fea:	c3 5c       	subi	r28, 0xC3	; 195
    2fec:	d2 40       	sbci	r29, 0x02	; 2
    2fee:	39 20       	and	r3, r9
    2ff0:	b3 24       	eor	r11, r3
    2ff2:	cc 53       	subi	r28, 0x3C	; 60
    2ff4:	dd 4f       	sbci	r29, 0xFD	; 253
    2ff6:	38 80       	ld	r3, Y
    2ff8:	c4 5c       	subi	r28, 0xC4	; 196
    2ffa:	d2 40       	sbci	r29, 0x02	; 2
    2ffc:	38 20       	and	r3, r8
    2ffe:	c3 24       	eor	r12, r3
    3000:	cb 53       	subi	r28, 0x3B	; 59
    3002:	dd 4f       	sbci	r29, 0xFD	; 253
    3004:	38 80       	ld	r3, Y
    3006:	c5 5c       	subi	r28, 0xC5	; 197
    3008:	d2 40       	sbci	r29, 0x02	; 2
    300a:	37 20       	and	r3, r7
    300c:	d3 24       	eor	r13, r3
    300e:	cd 57       	subi	r28, 0x7D	; 125
    3010:	dd 4f       	sbci	r29, 0xFD	; 253
    3012:	38 80       	ld	r3, Y
    3014:	c3 58       	subi	r28, 0x83	; 131
    3016:	d2 40       	sbci	r29, 0x02	; 2
    3018:	ca 53       	subi	r28, 0x3A	; 58
    301a:	dd 4f       	sbci	r29, 0xFD	; 253
    301c:	f8 81       	ld	r31, Y
    301e:	c6 5c       	subi	r28, 0xC6	; 198
    3020:	d2 40       	sbci	r29, 0x02	; 2
    3022:	3f 22       	and	r3, r31
    3024:	e3 24       	eor	r14, r3
    3026:	cc 57       	subi	r28, 0x7C	; 124
    3028:	dd 4f       	sbci	r29, 0xFD	; 253
    302a:	38 80       	ld	r3, Y
    302c:	c4 58       	subi	r28, 0x84	; 132
    302e:	d2 40       	sbci	r29, 0x02	; 2
    3030:	c9 53       	subi	r28, 0x39	; 57
    3032:	dd 4f       	sbci	r29, 0xFD	; 253
    3034:	f8 81       	ld	r31, Y
    3036:	c7 5c       	subi	r28, 0xC7	; 199
    3038:	d2 40       	sbci	r29, 0x02	; 2
    303a:	3f 22       	and	r3, r31
    303c:	f3 24       	eor	r15, r3
    303e:	cb 57       	subi	r28, 0x7B	; 123
    3040:	dd 4f       	sbci	r29, 0xFD	; 253
    3042:	38 80       	ld	r3, Y
    3044:	c5 58       	subi	r28, 0x85	; 133
    3046:	d2 40       	sbci	r29, 0x02	; 2
    3048:	c8 53       	subi	r28, 0x38	; 56
    304a:	dd 4f       	sbci	r29, 0xFD	; 253
    304c:	f8 81       	ld	r31, Y
    304e:	c8 5c       	subi	r28, 0xC8	; 200
    3050:	d2 40       	sbci	r29, 0x02	; 2
    3052:	3f 22       	and	r3, r31
    3054:	03 25       	eor	r16, r3
    3056:	ca 57       	subi	r28, 0x7A	; 122
    3058:	dd 4f       	sbci	r29, 0xFD	; 253
    305a:	38 80       	ld	r3, Y
    305c:	c6 58       	subi	r28, 0x86	; 134
    305e:	d2 40       	sbci	r29, 0x02	; 2
    3060:	c7 53       	subi	r28, 0x37	; 55
    3062:	dd 4f       	sbci	r29, 0xFD	; 253
    3064:	f8 81       	ld	r31, Y
    3066:	c9 5c       	subi	r28, 0xC9	; 201
    3068:	d2 40       	sbci	r29, 0x02	; 2
    306a:	3f 22       	and	r3, r31
    306c:	13 25       	eor	r17, r3
    306e:	8e 27       	eor	r24, r30
    3070:	96 25       	eor	r25, r6
    3072:	0e 94 05 3e 	call	0x7c0a	; 0x7c0a <__adddi3>
    3076:	c9 57       	subi	r28, 0x79	; 121
    3078:	dd 4f       	sbci	r29, 0xFD	; 253
    307a:	a8 80       	ld	r10, Y
    307c:	c7 58       	subi	r28, 0x87	; 135
    307e:	d2 40       	sbci	r29, 0x02	; 2
    3080:	c8 57       	subi	r28, 0x78	; 120
    3082:	dd 4f       	sbci	r29, 0xFD	; 253
    3084:	b8 80       	ld	r11, Y
    3086:	c8 58       	subi	r28, 0x88	; 136
    3088:	d2 40       	sbci	r29, 0x02	; 2
    308a:	c7 57       	subi	r28, 0x77	; 119
    308c:	dd 4f       	sbci	r29, 0xFD	; 253
    308e:	c8 80       	ld	r12, Y
    3090:	c9 58       	subi	r28, 0x89	; 137
    3092:	d2 40       	sbci	r29, 0x02	; 2
    3094:	db 2e       	mov	r13, r27
    3096:	ea 2e       	mov	r14, r26
    3098:	c1 56       	subi	r28, 0x61	; 97
    309a:	dd 4f       	sbci	r29, 0xFD	; 253
    309c:	f8 80       	ld	r15, Y
    309e:	cf 59       	subi	r28, 0x9F	; 159
    30a0:	d2 40       	sbci	r29, 0x02	; 2
    30a2:	c6 57       	subi	r28, 0x76	; 118
    30a4:	dd 4f       	sbci	r29, 0xFD	; 253
    30a6:	08 81       	ld	r16, Y
    30a8:	ca 58       	subi	r28, 0x8A	; 138
    30aa:	d2 40       	sbci	r29, 0x02	; 2
    30ac:	cf 54       	subi	r28, 0x4F	; 79
    30ae:	dd 4f       	sbci	r29, 0xFD	; 253
    30b0:	18 81       	ld	r17, Y
    30b2:	c1 5b       	subi	r28, 0xB1	; 177
    30b4:	d2 40       	sbci	r29, 0x02	; 2
    30b6:	0e 94 05 3e 	call	0x7c0a	; 0x7c0a <__adddi3>
    30ba:	62 2e       	mov	r6, r18
    30bc:	c9 57       	subi	r28, 0x79	; 121
    30be:	dd 4f       	sbci	r29, 0xFD	; 253
    30c0:	38 83       	st	Y, r19
    30c2:	c7 58       	subi	r28, 0x87	; 135
    30c4:	d2 40       	sbci	r29, 0x02	; 2
    30c6:	c8 57       	subi	r28, 0x78	; 120
    30c8:	dd 4f       	sbci	r29, 0xFD	; 253
    30ca:	48 83       	st	Y, r20
    30cc:	c8 58       	subi	r28, 0x88	; 136
    30ce:	d2 40       	sbci	r29, 0x02	; 2
    30d0:	35 2e       	mov	r3, r21
    30d2:	c7 57       	subi	r28, 0x77	; 119
    30d4:	dd 4f       	sbci	r29, 0xFD	; 253
    30d6:	68 83       	st	Y, r22
    30d8:	c9 58       	subi	r28, 0x89	; 137
    30da:	d2 40       	sbci	r29, 0x02	; 2
    30dc:	c6 57       	subi	r28, 0x76	; 118
    30de:	dd 4f       	sbci	r29, 0xFD	; 253
    30e0:	78 83       	st	Y, r23
    30e2:	ca 58       	subi	r28, 0x8A	; 138
    30e4:	d2 40       	sbci	r29, 0x02	; 2
    30e6:	f8 2f       	mov	r31, r24
    30e8:	e9 2f       	mov	r30, r25
    30ea:	c9 56       	subi	r28, 0x69	; 105
    30ec:	dd 4f       	sbci	r29, 0xFD	; 253
    30ee:	88 81       	ld	r24, Y
    30f0:	99 81       	ldd	r25, Y+1	; 0x01
    30f2:	aa 81       	ldd	r26, Y+2	; 0x02
    30f4:	bb 81       	ldd	r27, Y+3	; 0x03
    30f6:	c7 59       	subi	r28, 0x97	; 151
    30f8:	d2 40       	sbci	r29, 0x02	; 2
    30fa:	5c 01       	movw	r10, r24
    30fc:	6d 01       	movw	r12, r26
    30fe:	28 2f       	mov	r18, r24
    3100:	3b 2d       	mov	r19, r11
    3102:	4c 2d       	mov	r20, r12
    3104:	5d 2d       	mov	r21, r13
    3106:	60 e0       	ldi	r22, 0x00	; 0
    3108:	70 e0       	ldi	r23, 0x00	; 0
    310a:	80 e0       	ldi	r24, 0x00	; 0
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	00 e2       	ldi	r16, 0x20	; 32
    3110:	0e 94 b3 3d 	call	0x7b66	; 0x7b66 <__ashldi3>
    3114:	c9 56       	subi	r28, 0x69	; 105
    3116:	dd 4f       	sbci	r29, 0xFD	; 253
    3118:	48 83       	st	Y, r20
    311a:	c7 59       	subi	r28, 0x97	; 151
    311c:	d2 40       	sbci	r29, 0x02	; 2
    311e:	c1 56       	subi	r28, 0x61	; 97
    3120:	dd 4f       	sbci	r29, 0xFD	; 253
    3122:	58 83       	st	Y, r21
    3124:	cf 59       	subi	r28, 0x9F	; 159
    3126:	d2 40       	sbci	r29, 0x02	; 2
    3128:	e6 2e       	mov	r14, r22
    312a:	f7 2e       	mov	r15, r23
    312c:	08 2f       	mov	r16, r24
    312e:	19 2f       	mov	r17, r25
    3130:	cd 56       	subi	r28, 0x6D	; 109
    3132:	dd 4f       	sbci	r29, 0xFD	; 253
    3134:	a8 80       	ld	r10, Y
    3136:	b9 80       	ldd	r11, Y+1	; 0x01
    3138:	ca 80       	ldd	r12, Y+2	; 0x02
    313a:	db 80       	ldd	r13, Y+3	; 0x03
    313c:	c3 59       	subi	r28, 0x93	; 147
    313e:	d2 40       	sbci	r29, 0x02	; 2
    3140:	b6 01       	movw	r22, r12
    3142:	a5 01       	movw	r20, r10
    3144:	a2 2e       	mov	r10, r18
    3146:	a4 2a       	or	r10, r20
    3148:	b3 2e       	mov	r11, r19
    314a:	b5 2a       	or	r11, r21
    314c:	c9 56       	subi	r28, 0x69	; 105
    314e:	dd 4f       	sbci	r29, 0xFD	; 253
    3150:	c8 80       	ld	r12, Y
    3152:	c7 59       	subi	r28, 0x97	; 151
    3154:	d2 40       	sbci	r29, 0x02	; 2
    3156:	c6 2a       	or	r12, r22
    3158:	c1 56       	subi	r28, 0x61	; 97
    315a:	dd 4f       	sbci	r29, 0xFD	; 253
    315c:	d8 80       	ld	r13, Y
    315e:	cf 59       	subi	r28, 0x9F	; 159
    3160:	d2 40       	sbci	r29, 0x02	; 2
    3162:	d7 2a       	or	r13, r23
    3164:	26 2d       	mov	r18, r6
    3166:	c9 57       	subi	r28, 0x79	; 121
    3168:	dd 4f       	sbci	r29, 0xFD	; 253
    316a:	38 81       	ld	r19, Y
    316c:	c7 58       	subi	r28, 0x87	; 135
    316e:	d2 40       	sbci	r29, 0x02	; 2
    3170:	c8 57       	subi	r28, 0x78	; 120
    3172:	dd 4f       	sbci	r29, 0xFD	; 253
    3174:	48 81       	ld	r20, Y
    3176:	c8 58       	subi	r28, 0x88	; 136
    3178:	d2 40       	sbci	r29, 0x02	; 2
    317a:	53 2d       	mov	r21, r3
    317c:	c7 57       	subi	r28, 0x77	; 119
    317e:	dd 4f       	sbci	r29, 0xFD	; 253
    3180:	68 81       	ld	r22, Y
    3182:	c9 58       	subi	r28, 0x89	; 137
    3184:	d2 40       	sbci	r29, 0x02	; 2
    3186:	c6 57       	subi	r28, 0x76	; 118
    3188:	dd 4f       	sbci	r29, 0xFD	; 253
    318a:	78 81       	ld	r23, Y
    318c:	ca 58       	subi	r28, 0x8A	; 138
    318e:	d2 40       	sbci	r29, 0x02	; 2
    3190:	8f 2f       	mov	r24, r31
    3192:	9e 2f       	mov	r25, r30
    3194:	0e 94 05 3e 	call	0x7c0a	; 0x7c0a <__adddi3>
    3198:	ca 55       	subi	r28, 0x5A	; 90
    319a:	dd 4f       	sbci	r29, 0xFD	; 253
    319c:	a8 80       	ld	r10, Y
    319e:	c6 5a       	subi	r28, 0xA6	; 166
    31a0:	d2 40       	sbci	r29, 0x02	; 2
    31a2:	c9 55       	subi	r28, 0x59	; 89
    31a4:	dd 4f       	sbci	r29, 0xFD	; 253
    31a6:	b8 80       	ld	r11, Y
    31a8:	c7 5a       	subi	r28, 0xA7	; 167
    31aa:	d2 40       	sbci	r29, 0x02	; 2
    31ac:	c8 55       	subi	r28, 0x58	; 88
    31ae:	dd 4f       	sbci	r29, 0xFD	; 253
    31b0:	c8 80       	ld	r12, Y
    31b2:	c8 5a       	subi	r28, 0xA8	; 168
    31b4:	d2 40       	sbci	r29, 0x02	; 2
    31b6:	c7 55       	subi	r28, 0x57	; 87
    31b8:	dd 4f       	sbci	r29, 0xFD	; 253
    31ba:	d8 80       	ld	r13, Y
    31bc:	c9 5a       	subi	r28, 0xA9	; 169
    31be:	d2 40       	sbci	r29, 0x02	; 2
    31c0:	c6 55       	subi	r28, 0x56	; 86
    31c2:	dd 4f       	sbci	r29, 0xFD	; 253
    31c4:	e8 80       	ld	r14, Y
    31c6:	ca 5a       	subi	r28, 0xAA	; 170
    31c8:	d2 40       	sbci	r29, 0x02	; 2
    31ca:	c5 55       	subi	r28, 0x55	; 85
    31cc:	dd 4f       	sbci	r29, 0xFD	; 253
    31ce:	f8 80       	ld	r15, Y
    31d0:	cb 5a       	subi	r28, 0xAB	; 171
    31d2:	d2 40       	sbci	r29, 0x02	; 2
    31d4:	cf 56       	subi	r28, 0x6F	; 111
    31d6:	dd 4f       	sbci	r29, 0xFD	; 253
    31d8:	08 81       	ld	r16, Y
    31da:	c1 59       	subi	r28, 0x91	; 145
    31dc:	d2 40       	sbci	r29, 0x02	; 2
    31de:	ce 56       	subi	r28, 0x6E	; 110
    31e0:	dd 4f       	sbci	r29, 0xFD	; 253
    31e2:	18 81       	ld	r17, Y
    31e4:	c2 59       	subi	r28, 0x92	; 146
    31e6:	d2 40       	sbci	r29, 0x02	; 2
    31e8:	0e 94 05 3e 	call	0x7c0a	; 0x7c0a <__adddi3>
    31ec:	ca 55       	subi	r28, 0x5A	; 90
    31ee:	dd 4f       	sbci	r29, 0xFD	; 253
    31f0:	28 83       	st	Y, r18
    31f2:	c6 5a       	subi	r28, 0xA6	; 166
    31f4:	d2 40       	sbci	r29, 0x02	; 2
    31f6:	c9 55       	subi	r28, 0x59	; 89
    31f8:	dd 4f       	sbci	r29, 0xFD	; 253
    31fa:	38 83       	st	Y, r19
    31fc:	c7 5a       	subi	r28, 0xA7	; 167
    31fe:	d2 40       	sbci	r29, 0x02	; 2
    3200:	c8 55       	subi	r28, 0x58	; 88
    3202:	dd 4f       	sbci	r29, 0xFD	; 253
    3204:	48 83       	st	Y, r20
    3206:	c8 5a       	subi	r28, 0xA8	; 168
    3208:	d2 40       	sbci	r29, 0x02	; 2
    320a:	c7 55       	subi	r28, 0x57	; 87
    320c:	dd 4f       	sbci	r29, 0xFD	; 253
    320e:	58 83       	st	Y, r21
    3210:	c9 5a       	subi	r28, 0xA9	; 169
    3212:	d2 40       	sbci	r29, 0x02	; 2
    3214:	c6 55       	subi	r28, 0x56	; 86
    3216:	dd 4f       	sbci	r29, 0xFD	; 253
    3218:	68 83       	st	Y, r22
    321a:	ca 5a       	subi	r28, 0xAA	; 170
    321c:	d2 40       	sbci	r29, 0x02	; 2
    321e:	c5 55       	subi	r28, 0x55	; 85
    3220:	dd 4f       	sbci	r29, 0xFD	; 253
    3222:	78 83       	st	Y, r23
    3224:	cb 5a       	subi	r28, 0xAB	; 171
    3226:	d2 40       	sbci	r29, 0x02	; 2
    3228:	38 2e       	mov	r3, r24
    322a:	69 2e       	mov	r6, r25
		t2 = bigSigma0(a) + maj(a, b, c);
    322c:	c5 57       	subi	r28, 0x75	; 117
    322e:	dd 4f       	sbci	r29, 0xFD	; 253
    3230:	28 81       	ld	r18, Y
    3232:	cb 58       	subi	r28, 0x8B	; 139
    3234:	d2 40       	sbci	r29, 0x02	; 2
    3236:	c4 57       	subi	r28, 0x74	; 116
    3238:	dd 4f       	sbci	r29, 0xFD	; 253
    323a:	38 81       	ld	r19, Y
    323c:	cc 58       	subi	r28, 0x8C	; 140
    323e:	d2 40       	sbci	r29, 0x02	; 2
    3240:	c3 57       	subi	r28, 0x73	; 115
    3242:	dd 4f       	sbci	r29, 0xFD	; 253
    3244:	48 81       	ld	r20, Y
    3246:	cd 58       	subi	r28, 0x8D	; 141
    3248:	d2 40       	sbci	r29, 0x02	; 2
    324a:	c2 57       	subi	r28, 0x72	; 114
    324c:	dd 4f       	sbci	r29, 0xFD	; 253
    324e:	58 81       	ld	r21, Y
    3250:	ce 58       	subi	r28, 0x8E	; 142
    3252:	d2 40       	sbci	r29, 0x02	; 2
    3254:	c1 57       	subi	r28, 0x71	; 113
    3256:	dd 4f       	sbci	r29, 0xFD	; 253
    3258:	68 81       	ld	r22, Y
    325a:	cf 58       	subi	r28, 0x8F	; 143
    325c:	d2 40       	sbci	r29, 0x02	; 2
    325e:	c0 57       	subi	r28, 0x70	; 112
    3260:	dd 4f       	sbci	r29, 0xFD	; 253
    3262:	78 81       	ld	r23, Y
    3264:	c0 59       	subi	r28, 0x90	; 144
    3266:	d2 40       	sbci	r29, 0x02	; 2
    3268:	c5 56       	subi	r28, 0x65	; 101
    326a:	dd 4f       	sbci	r29, 0xFD	; 253
    326c:	88 81       	ld	r24, Y
    326e:	cb 59       	subi	r28, 0x9B	; 155
    3270:	d2 40       	sbci	r29, 0x02	; 2
    3272:	c4 56       	subi	r28, 0x64	; 100
    3274:	dd 4f       	sbci	r29, 0xFD	; 253
    3276:	98 81       	ld	r25, Y
    3278:	cc 59       	subi	r28, 0x9C	; 156
    327a:	d2 40       	sbci	r29, 0x02	; 2
    327c:	0e e1       	ldi	r16, 0x1E	; 30
    327e:	0e 94 ea 3d 	call	0x7bd4	; 0x7bd4 <__rotldi3>
    3282:	d2 2e       	mov	r13, r18
    3284:	e3 2e       	mov	r14, r19
    3286:	f4 2e       	mov	r15, r20
    3288:	15 2f       	mov	r17, r21
    328a:	b6 2f       	mov	r27, r22
    328c:	a7 2f       	mov	r26, r23
    328e:	f8 2f       	mov	r31, r24
    3290:	e9 2f       	mov	r30, r25
    3292:	c5 57       	subi	r28, 0x75	; 117
    3294:	dd 4f       	sbci	r29, 0xFD	; 253
    3296:	28 81       	ld	r18, Y
    3298:	cb 58       	subi	r28, 0x8B	; 139
    329a:	d2 40       	sbci	r29, 0x02	; 2
    329c:	c4 57       	subi	r28, 0x74	; 116
    329e:	dd 4f       	sbci	r29, 0xFD	; 253
    32a0:	38 81       	ld	r19, Y
    32a2:	cc 58       	subi	r28, 0x8C	; 140
    32a4:	d2 40       	sbci	r29, 0x02	; 2
    32a6:	c3 57       	subi	r28, 0x73	; 115
    32a8:	dd 4f       	sbci	r29, 0xFD	; 253
    32aa:	48 81       	ld	r20, Y
    32ac:	cd 58       	subi	r28, 0x8D	; 141
    32ae:	d2 40       	sbci	r29, 0x02	; 2
    32b0:	c2 57       	subi	r28, 0x72	; 114
    32b2:	dd 4f       	sbci	r29, 0xFD	; 253
    32b4:	58 81       	ld	r21, Y
    32b6:	ce 58       	subi	r28, 0x8E	; 142
    32b8:	d2 40       	sbci	r29, 0x02	; 2
    32ba:	c1 57       	subi	r28, 0x71	; 113
    32bc:	dd 4f       	sbci	r29, 0xFD	; 253
    32be:	68 81       	ld	r22, Y
    32c0:	cf 58       	subi	r28, 0x8F	; 143
    32c2:	d2 40       	sbci	r29, 0x02	; 2
    32c4:	c0 57       	subi	r28, 0x70	; 112
    32c6:	dd 4f       	sbci	r29, 0xFD	; 253
    32c8:	78 81       	ld	r23, Y
    32ca:	c0 59       	subi	r28, 0x90	; 144
    32cc:	d2 40       	sbci	r29, 0x02	; 2
    32ce:	c5 56       	subi	r28, 0x65	; 101
    32d0:	dd 4f       	sbci	r29, 0xFD	; 253
    32d2:	88 81       	ld	r24, Y
    32d4:	cb 59       	subi	r28, 0x9B	; 155
    32d6:	d2 40       	sbci	r29, 0x02	; 2
    32d8:	c4 56       	subi	r28, 0x64	; 100
    32da:	dd 4f       	sbci	r29, 0xFD	; 253
    32dc:	98 81       	ld	r25, Y
    32de:	cc 59       	subi	r28, 0x9C	; 156
    32e0:	d2 40       	sbci	r29, 0x02	; 2
    32e2:	04 e2       	ldi	r16, 0x24	; 36
    32e4:	0e 94 ea 3d 	call	0x7bd4	; 0x7bd4 <__rotldi3>
    32e8:	d2 26       	eor	r13, r18
    32ea:	e3 26       	eor	r14, r19
    32ec:	f4 26       	eor	r15, r20
    32ee:	15 27       	eor	r17, r21
    32f0:	b6 27       	eor	r27, r22
    32f2:	a7 27       	eor	r26, r23
    32f4:	f8 27       	eor	r31, r24
    32f6:	e9 27       	eor	r30, r25
    32f8:	c5 57       	subi	r28, 0x75	; 117
    32fa:	dd 4f       	sbci	r29, 0xFD	; 253
    32fc:	28 81       	ld	r18, Y
    32fe:	cb 58       	subi	r28, 0x8B	; 139
    3300:	d2 40       	sbci	r29, 0x02	; 2
    3302:	c4 57       	subi	r28, 0x74	; 116
    3304:	dd 4f       	sbci	r29, 0xFD	; 253
    3306:	38 81       	ld	r19, Y
    3308:	cc 58       	subi	r28, 0x8C	; 140
    330a:	d2 40       	sbci	r29, 0x02	; 2
    330c:	c3 57       	subi	r28, 0x73	; 115
    330e:	dd 4f       	sbci	r29, 0xFD	; 253
    3310:	48 81       	ld	r20, Y
    3312:	cd 58       	subi	r28, 0x8D	; 141
    3314:	d2 40       	sbci	r29, 0x02	; 2
    3316:	c2 57       	subi	r28, 0x72	; 114
    3318:	dd 4f       	sbci	r29, 0xFD	; 253
    331a:	58 81       	ld	r21, Y
    331c:	ce 58       	subi	r28, 0x8E	; 142
    331e:	d2 40       	sbci	r29, 0x02	; 2
    3320:	c1 57       	subi	r28, 0x71	; 113
    3322:	dd 4f       	sbci	r29, 0xFD	; 253
    3324:	68 81       	ld	r22, Y
    3326:	cf 58       	subi	r28, 0x8F	; 143
    3328:	d2 40       	sbci	r29, 0x02	; 2
    332a:	c0 57       	subi	r28, 0x70	; 112
    332c:	dd 4f       	sbci	r29, 0xFD	; 253
    332e:	78 81       	ld	r23, Y
    3330:	c0 59       	subi	r28, 0x90	; 144
    3332:	d2 40       	sbci	r29, 0x02	; 2
    3334:	c5 56       	subi	r28, 0x65	; 101
    3336:	dd 4f       	sbci	r29, 0xFD	; 253
    3338:	88 81       	ld	r24, Y
    333a:	cb 59       	subi	r28, 0x9B	; 155
    333c:	d2 40       	sbci	r29, 0x02	; 2
    333e:	c4 56       	subi	r28, 0x64	; 100
    3340:	dd 4f       	sbci	r29, 0xFD	; 253
    3342:	98 81       	ld	r25, Y
    3344:	cc 59       	subi	r28, 0x9C	; 156
    3346:	d2 40       	sbci	r29, 0x02	; 2
    3348:	09 e1       	ldi	r16, 0x19	; 25
    334a:	0e 94 ea 3d 	call	0x7bd4	; 0x7bd4 <__rotldi3>
    334e:	2d 25       	eor	r18, r13
    3350:	3e 25       	eor	r19, r14
    3352:	4f 25       	eor	r20, r15
    3354:	51 27       	eor	r21, r17
    3356:	6b 27       	eor	r22, r27
    3358:	7a 27       	eor	r23, r26
    335a:	ce 55       	subi	r28, 0x5E	; 94
    335c:	dd 4f       	sbci	r29, 0xFD	; 253
    335e:	a8 80       	ld	r10, Y
    3360:	c2 5a       	subi	r28, 0xA2	; 162
    3362:	d2 40       	sbci	r29, 0x02	; 2
    3364:	ce 54       	subi	r28, 0x4E	; 78
    3366:	dd 4f       	sbci	r29, 0xFD	; 253
    3368:	a8 81       	ld	r26, Y
    336a:	c2 5b       	subi	r28, 0xB2	; 178
    336c:	d2 40       	sbci	r29, 0x02	; 2
    336e:	aa 26       	eor	r10, r26
    3370:	c5 57       	subi	r28, 0x75	; 117
    3372:	dd 4f       	sbci	r29, 0xFD	; 253
    3374:	b8 81       	ld	r27, Y
    3376:	cb 58       	subi	r28, 0x8B	; 139
    3378:	d2 40       	sbci	r29, 0x02	; 2
    337a:	ab 22       	and	r10, r27
    337c:	cd 55       	subi	r28, 0x5D	; 93
    337e:	dd 4f       	sbci	r29, 0xFD	; 253
    3380:	b8 80       	ld	r11, Y
    3382:	c3 5a       	subi	r28, 0xA3	; 163
    3384:	d2 40       	sbci	r29, 0x02	; 2
    3386:	cd 54       	subi	r28, 0x4D	; 77
    3388:	dd 4f       	sbci	r29, 0xFD	; 253
    338a:	a8 81       	ld	r26, Y
    338c:	c3 5b       	subi	r28, 0xB3	; 179
    338e:	d2 40       	sbci	r29, 0x02	; 2
    3390:	ba 26       	eor	r11, r26
    3392:	c4 57       	subi	r28, 0x74	; 116
    3394:	dd 4f       	sbci	r29, 0xFD	; 253
    3396:	b8 81       	ld	r27, Y
    3398:	cc 58       	subi	r28, 0x8C	; 140
    339a:	d2 40       	sbci	r29, 0x02	; 2
    339c:	bb 22       	and	r11, r27
    339e:	cc 55       	subi	r28, 0x5C	; 92
    33a0:	dd 4f       	sbci	r29, 0xFD	; 253
    33a2:	c8 80       	ld	r12, Y
    33a4:	c4 5a       	subi	r28, 0xA4	; 164
    33a6:	d2 40       	sbci	r29, 0x02	; 2
    33a8:	cc 54       	subi	r28, 0x4C	; 76
    33aa:	dd 4f       	sbci	r29, 0xFD	; 253
    33ac:	a8 81       	ld	r26, Y
    33ae:	c4 5b       	subi	r28, 0xB4	; 180
    33b0:	d2 40       	sbci	r29, 0x02	; 2
    33b2:	ca 26       	eor	r12, r26
    33b4:	c3 57       	subi	r28, 0x73	; 115
    33b6:	dd 4f       	sbci	r29, 0xFD	; 253
    33b8:	b8 81       	ld	r27, Y
    33ba:	cd 58       	subi	r28, 0x8D	; 141
    33bc:	d2 40       	sbci	r29, 0x02	; 2
    33be:	cb 22       	and	r12, r27
    33c0:	cb 55       	subi	r28, 0x5B	; 91
    33c2:	dd 4f       	sbci	r29, 0xFD	; 253
    33c4:	d8 80       	ld	r13, Y
    33c6:	c5 5a       	subi	r28, 0xA5	; 165
    33c8:	d2 40       	sbci	r29, 0x02	; 2
    33ca:	cb 54       	subi	r28, 0x4B	; 75
    33cc:	dd 4f       	sbci	r29, 0xFD	; 253
    33ce:	a8 81       	ld	r26, Y
    33d0:	c5 5b       	subi	r28, 0xB5	; 181
    33d2:	d2 40       	sbci	r29, 0x02	; 2
    33d4:	da 26       	eor	r13, r26
    33d6:	c2 57       	subi	r28, 0x72	; 114
    33d8:	dd 4f       	sbci	r29, 0xFD	; 253
    33da:	b8 81       	ld	r27, Y
    33dc:	ce 58       	subi	r28, 0x8E	; 142
    33de:	d2 40       	sbci	r29, 0x02	; 2
    33e0:	db 22       	and	r13, r27
    33e2:	c4 55       	subi	r28, 0x54	; 84
    33e4:	dd 4f       	sbci	r29, 0xFD	; 253
    33e6:	e8 80       	ld	r14, Y
    33e8:	cc 5a       	subi	r28, 0xAC	; 172
    33ea:	d2 40       	sbci	r29, 0x02	; 2
    33ec:	ca 54       	subi	r28, 0x4A	; 74
    33ee:	dd 4f       	sbci	r29, 0xFD	; 253
    33f0:	a8 81       	ld	r26, Y
    33f2:	c6 5b       	subi	r28, 0xB6	; 182
    33f4:	d2 40       	sbci	r29, 0x02	; 2
    33f6:	ea 26       	eor	r14, r26
    33f8:	c1 57       	subi	r28, 0x71	; 113
    33fa:	dd 4f       	sbci	r29, 0xFD	; 253
    33fc:	b8 81       	ld	r27, Y
    33fe:	cf 58       	subi	r28, 0x8F	; 143
    3400:	d2 40       	sbci	r29, 0x02	; 2
    3402:	eb 22       	and	r14, r27
    3404:	c2 55       	subi	r28, 0x52	; 82
    3406:	dd 4f       	sbci	r29, 0xFD	; 253
    3408:	f8 80       	ld	r15, Y
    340a:	ce 5a       	subi	r28, 0xAE	; 174
    340c:	d2 40       	sbci	r29, 0x02	; 2
    340e:	c9 54       	subi	r28, 0x49	; 73
    3410:	dd 4f       	sbci	r29, 0xFD	; 253
    3412:	a8 81       	ld	r26, Y
    3414:	c7 5b       	subi	r28, 0xB7	; 183
    3416:	d2 40       	sbci	r29, 0x02	; 2
    3418:	fa 26       	eor	r15, r26
    341a:	c0 57       	subi	r28, 0x70	; 112
    341c:	dd 4f       	sbci	r29, 0xFD	; 253
    341e:	b8 81       	ld	r27, Y
    3420:	c0 59       	subi	r28, 0x90	; 144
    3422:	d2 40       	sbci	r29, 0x02	; 2
    3424:	fb 22       	and	r15, r27
    3426:	c1 55       	subi	r28, 0x51	; 81
    3428:	dd 4f       	sbci	r29, 0xFD	; 253
    342a:	08 81       	ld	r16, Y
    342c:	cf 5a       	subi	r28, 0xAF	; 175
    342e:	d2 40       	sbci	r29, 0x02	; 2
    3430:	c8 54       	subi	r28, 0x48	; 72
    3432:	dd 4f       	sbci	r29, 0xFD	; 253
    3434:	a8 81       	ld	r26, Y
    3436:	c8 5b       	subi	r28, 0xB8	; 184
    3438:	d2 40       	sbci	r29, 0x02	; 2
    343a:	0a 27       	eor	r16, r26
    343c:	c5 56       	subi	r28, 0x65	; 101
    343e:	dd 4f       	sbci	r29, 0xFD	; 253
    3440:	b8 81       	ld	r27, Y
    3442:	cb 59       	subi	r28, 0x9B	; 155
    3444:	d2 40       	sbci	r29, 0x02	; 2
    3446:	0b 23       	and	r16, r27
    3448:	c0 55       	subi	r28, 0x50	; 80
    344a:	dd 4f       	sbci	r29, 0xFD	; 253
    344c:	18 81       	ld	r17, Y
    344e:	c0 5b       	subi	r28, 0xB0	; 176
    3450:	d2 40       	sbci	r29, 0x02	; 2
    3452:	c7 54       	subi	r28, 0x47	; 71
    3454:	dd 4f       	sbci	r29, 0xFD	; 253
    3456:	a8 81       	ld	r26, Y
    3458:	c9 5b       	subi	r28, 0xB9	; 185
    345a:	d2 40       	sbci	r29, 0x02	; 2
    345c:	1a 27       	eor	r17, r26
    345e:	c4 56       	subi	r28, 0x64	; 100
    3460:	dd 4f       	sbci	r29, 0xFD	; 253
    3462:	b8 81       	ld	r27, Y
    3464:	cc 59       	subi	r28, 0x9C	; 156
    3466:	d2 40       	sbci	r29, 0x02	; 2
    3468:	1b 23       	and	r17, r27
    346a:	ce 55       	subi	r28, 0x5E	; 94
    346c:	dd 4f       	sbci	r29, 0xFD	; 253
    346e:	a8 81       	ld	r26, Y
    3470:	c2 5a       	subi	r28, 0xA2	; 162
    3472:	d2 40       	sbci	r29, 0x02	; 2
    3474:	ce 54       	subi	r28, 0x4E	; 78
    3476:	dd 4f       	sbci	r29, 0xFD	; 253
    3478:	b8 81       	ld	r27, Y
    347a:	c2 5b       	subi	r28, 0xB2	; 178
    347c:	d2 40       	sbci	r29, 0x02	; 2
    347e:	ab 23       	and	r26, r27
    3480:	aa 26       	eor	r10, r26
    3482:	cd 55       	subi	r28, 0x5D	; 93
    3484:	dd 4f       	sbci	r29, 0xFD	; 253
    3486:	a8 81       	ld	r26, Y
    3488:	c3 5a       	subi	r28, 0xA3	; 163
    348a:	d2 40       	sbci	r29, 0x02	; 2
    348c:	cd 54       	subi	r28, 0x4D	; 77
    348e:	dd 4f       	sbci	r29, 0xFD	; 253
    3490:	b8 81       	ld	r27, Y
    3492:	c3 5b       	subi	r28, 0xB3	; 179
    3494:	d2 40       	sbci	r29, 0x02	; 2
    3496:	ab 23       	and	r26, r27
    3498:	ba 26       	eor	r11, r26
    349a:	cc 55       	subi	r28, 0x5C	; 92
    349c:	dd 4f       	sbci	r29, 0xFD	; 253
    349e:	a8 81       	ld	r26, Y
    34a0:	c4 5a       	subi	r28, 0xA4	; 164
    34a2:	d2 40       	sbci	r29, 0x02	; 2
    34a4:	cc 54       	subi	r28, 0x4C	; 76
    34a6:	dd 4f       	sbci	r29, 0xFD	; 253
    34a8:	b8 81       	ld	r27, Y
    34aa:	c4 5b       	subi	r28, 0xB4	; 180
    34ac:	d2 40       	sbci	r29, 0x02	; 2
    34ae:	ab 23       	and	r26, r27
    34b0:	ca 26       	eor	r12, r26
    34b2:	cb 55       	subi	r28, 0x5B	; 91
    34b4:	dd 4f       	sbci	r29, 0xFD	; 253
    34b6:	a8 81       	ld	r26, Y
    34b8:	c5 5a       	subi	r28, 0xA5	; 165
    34ba:	d2 40       	sbci	r29, 0x02	; 2
    34bc:	cb 54       	subi	r28, 0x4B	; 75
    34be:	dd 4f       	sbci	r29, 0xFD	; 253
    34c0:	b8 81       	ld	r27, Y
    34c2:	c5 5b       	subi	r28, 0xB5	; 181
    34c4:	d2 40       	sbci	r29, 0x02	; 2
    34c6:	ab 23       	and	r26, r27
    34c8:	da 26       	eor	r13, r26
    34ca:	c4 55       	subi	r28, 0x54	; 84
    34cc:	dd 4f       	sbci	r29, 0xFD	; 253
    34ce:	a8 81       	ld	r26, Y
    34d0:	cc 5a       	subi	r28, 0xAC	; 172
    34d2:	d2 40       	sbci	r29, 0x02	; 2
    34d4:	ca 54       	subi	r28, 0x4A	; 74
    34d6:	dd 4f       	sbci	r29, 0xFD	; 253
    34d8:	b8 81       	ld	r27, Y
    34da:	c6 5b       	subi	r28, 0xB6	; 182
    34dc:	d2 40       	sbci	r29, 0x02	; 2
    34de:	ab 23       	and	r26, r27
    34e0:	ea 26       	eor	r14, r26
    34e2:	c2 55       	subi	r28, 0x52	; 82
    34e4:	dd 4f       	sbci	r29, 0xFD	; 253
    34e6:	a8 81       	ld	r26, Y
    34e8:	ce 5a       	subi	r28, 0xAE	; 174
    34ea:	d2 40       	sbci	r29, 0x02	; 2
    34ec:	c9 54       	subi	r28, 0x49	; 73
    34ee:	dd 4f       	sbci	r29, 0xFD	; 253
    34f0:	b8 81       	ld	r27, Y
    34f2:	c7 5b       	subi	r28, 0xB7	; 183
    34f4:	d2 40       	sbci	r29, 0x02	; 2
    34f6:	ab 23       	and	r26, r27
    34f8:	fa 26       	eor	r15, r26
    34fa:	c1 55       	subi	r28, 0x51	; 81
    34fc:	dd 4f       	sbci	r29, 0xFD	; 253
    34fe:	a8 81       	ld	r26, Y
    3500:	cf 5a       	subi	r28, 0xAF	; 175
    3502:	d2 40       	sbci	r29, 0x02	; 2
    3504:	c8 54       	subi	r28, 0x48	; 72
    3506:	dd 4f       	sbci	r29, 0xFD	; 253
    3508:	b8 81       	ld	r27, Y
    350a:	c8 5b       	subi	r28, 0xB8	; 184
    350c:	d2 40       	sbci	r29, 0x02	; 2
    350e:	ab 23       	and	r26, r27
    3510:	0a 27       	eor	r16, r26
    3512:	c0 55       	subi	r28, 0x50	; 80
    3514:	dd 4f       	sbci	r29, 0xFD	; 253
    3516:	a8 81       	ld	r26, Y
    3518:	c0 5b       	subi	r28, 0xB0	; 176
    351a:	d2 40       	sbci	r29, 0x02	; 2
    351c:	c7 54       	subi	r28, 0x47	; 71
    351e:	dd 4f       	sbci	r29, 0xFD	; 253
    3520:	b8 81       	ld	r27, Y
    3522:	c9 5b       	subi	r28, 0xB9	; 185
    3524:	d2 40       	sbci	r29, 0x02	; 2
    3526:	ab 23       	and	r26, r27
    3528:	1a 27       	eor	r17, r26
    352a:	8f 27       	eor	r24, r31
    352c:	9e 27       	eor	r25, r30
    352e:	0e 94 05 3e 	call	0x7c0a	; 0x7c0a <__adddi3>
    3532:	cf 56       	subi	r28, 0x6F	; 111
    3534:	dd 4f       	sbci	r29, 0xFD	; 253
    3536:	28 83       	st	Y, r18
    3538:	c1 59       	subi	r28, 0x91	; 145
    353a:	d2 40       	sbci	r29, 0x02	; 2
    353c:	ce 56       	subi	r28, 0x6E	; 110
    353e:	dd 4f       	sbci	r29, 0xFD	; 253
    3540:	38 83       	st	Y, r19
    3542:	c2 59       	subi	r28, 0x92	; 146
    3544:	d2 40       	sbci	r29, 0x02	; 2
    3546:	cd 56       	subi	r28, 0x6D	; 109
    3548:	dd 4f       	sbci	r29, 0xFD	; 253
    354a:	48 83       	st	Y, r20
    354c:	c3 59       	subi	r28, 0x93	; 147
    354e:	d2 40       	sbci	r29, 0x02	; 2
    3550:	c9 56       	subi	r28, 0x69	; 105
    3552:	dd 4f       	sbci	r29, 0xFD	; 253
    3554:	58 83       	st	Y, r21
    3556:	c7 59       	subi	r28, 0x97	; 151
    3558:	d2 40       	sbci	r29, 0x02	; 2
    355a:	b6 2f       	mov	r27, r22
    355c:	a7 2f       	mov	r26, r23
    355e:	f8 2f       	mov	r31, r24
    3560:	e9 2f       	mov	r30, r25
		h = g;
		g = f;
		f = e;
		e = d + t1;
    3562:	ca 55       	subi	r28, 0x5A	; 90
    3564:	dd 4f       	sbci	r29, 0xFD	; 253
    3566:	28 81       	ld	r18, Y
    3568:	c6 5a       	subi	r28, 0xA6	; 166
    356a:	d2 40       	sbci	r29, 0x02	; 2
    356c:	c9 55       	subi	r28, 0x59	; 89
    356e:	dd 4f       	sbci	r29, 0xFD	; 253
    3570:	38 81       	ld	r19, Y
    3572:	c7 5a       	subi	r28, 0xA7	; 167
    3574:	d2 40       	sbci	r29, 0x02	; 2
    3576:	c8 55       	subi	r28, 0x58	; 88
    3578:	dd 4f       	sbci	r29, 0xFD	; 253
    357a:	48 81       	ld	r20, Y
    357c:	c8 5a       	subi	r28, 0xA8	; 168
    357e:	d2 40       	sbci	r29, 0x02	; 2
    3580:	c7 55       	subi	r28, 0x57	; 87
    3582:	dd 4f       	sbci	r29, 0xFD	; 253
    3584:	58 81       	ld	r21, Y
    3586:	c9 5a       	subi	r28, 0xA9	; 169
    3588:	d2 40       	sbci	r29, 0x02	; 2
    358a:	c6 55       	subi	r28, 0x56	; 86
    358c:	dd 4f       	sbci	r29, 0xFD	; 253
    358e:	68 81       	ld	r22, Y
    3590:	ca 5a       	subi	r28, 0xAA	; 170
    3592:	d2 40       	sbci	r29, 0x02	; 2
    3594:	c5 55       	subi	r28, 0x55	; 85
    3596:	dd 4f       	sbci	r29, 0xFD	; 253
    3598:	78 81       	ld	r23, Y
    359a:	cb 5a       	subi	r28, 0xAB	; 171
    359c:	d2 40       	sbci	r29, 0x02	; 2
    359e:	83 2d       	mov	r24, r3
    35a0:	96 2d       	mov	r25, r6
    35a2:	c6 53       	subi	r28, 0x36	; 54
    35a4:	dd 4f       	sbci	r29, 0xFD	; 253
    35a6:	a8 80       	ld	r10, Y
    35a8:	ca 5c       	subi	r28, 0xCA	; 202
    35aa:	d2 40       	sbci	r29, 0x02	; 2
    35ac:	c5 53       	subi	r28, 0x35	; 53
    35ae:	dd 4f       	sbci	r29, 0xFD	; 253
    35b0:	b8 80       	ld	r11, Y
    35b2:	cb 5c       	subi	r28, 0xCB	; 203
    35b4:	d2 40       	sbci	r29, 0x02	; 2
    35b6:	c4 53       	subi	r28, 0x34	; 52
    35b8:	dd 4f       	sbci	r29, 0xFD	; 253
    35ba:	c8 80       	ld	r12, Y
    35bc:	cc 5c       	subi	r28, 0xCC	; 204
    35be:	d2 40       	sbci	r29, 0x02	; 2
    35c0:	c3 53       	subi	r28, 0x33	; 51
    35c2:	dd 4f       	sbci	r29, 0xFD	; 253
    35c4:	d8 80       	ld	r13, Y
    35c6:	cd 5c       	subi	r28, 0xCD	; 205
    35c8:	d2 40       	sbci	r29, 0x02	; 2
    35ca:	c2 53       	subi	r28, 0x32	; 50
    35cc:	dd 4f       	sbci	r29, 0xFD	; 253
    35ce:	e8 80       	ld	r14, Y
    35d0:	ce 5c       	subi	r28, 0xCE	; 206
    35d2:	d2 40       	sbci	r29, 0x02	; 2
    35d4:	c1 53       	subi	r28, 0x31	; 49
    35d6:	dd 4f       	sbci	r29, 0xFD	; 253
    35d8:	f8 80       	ld	r15, Y
    35da:	cf 5c       	subi	r28, 0xCF	; 207
    35dc:	d2 40       	sbci	r29, 0x02	; 2
    35de:	c0 53       	subi	r28, 0x30	; 48
    35e0:	dd 4f       	sbci	r29, 0xFD	; 253
    35e2:	08 81       	ld	r16, Y
    35e4:	c0 5d       	subi	r28, 0xD0	; 208
    35e6:	d2 40       	sbci	r29, 0x02	; 2
    35e8:	cf 52       	subi	r28, 0x2F	; 47
    35ea:	dd 4f       	sbci	r29, 0xFD	; 253
    35ec:	18 81       	ld	r17, Y
    35ee:	c1 5d       	subi	r28, 0xD1	; 209
    35f0:	d2 40       	sbci	r29, 0x02	; 2
    35f2:	0e 94 05 3e 	call	0x7c0a	; 0x7c0a <__adddi3>
    35f6:	c9 57       	subi	r28, 0x79	; 121
    35f8:	dd 4f       	sbci	r29, 0xFD	; 253
    35fa:	28 83       	st	Y, r18
    35fc:	c7 58       	subi	r28, 0x87	; 135
    35fe:	d2 40       	sbci	r29, 0x02	; 2
    3600:	c8 57       	subi	r28, 0x78	; 120
    3602:	dd 4f       	sbci	r29, 0xFD	; 253
    3604:	38 83       	st	Y, r19
    3606:	c8 58       	subi	r28, 0x88	; 136
    3608:	d2 40       	sbci	r29, 0x02	; 2
    360a:	c7 57       	subi	r28, 0x77	; 119
    360c:	dd 4f       	sbci	r29, 0xFD	; 253
    360e:	48 83       	st	Y, r20
    3610:	c9 58       	subi	r28, 0x89	; 137
    3612:	d2 40       	sbci	r29, 0x02	; 2
    3614:	c6 57       	subi	r28, 0x76	; 118
    3616:	dd 4f       	sbci	r29, 0xFD	; 253
    3618:	58 83       	st	Y, r21
    361a:	ca 58       	subi	r28, 0x8A	; 138
    361c:	d2 40       	sbci	r29, 0x02	; 2
    361e:	cf 54       	subi	r28, 0x4F	; 79
    3620:	dd 4f       	sbci	r29, 0xFD	; 253
    3622:	68 83       	st	Y, r22
    3624:	c1 5b       	subi	r28, 0xB1	; 177
    3626:	d2 40       	sbci	r29, 0x02	; 2
    3628:	c1 56       	subi	r28, 0x61	; 97
    362a:	dd 4f       	sbci	r29, 0xFD	; 253
    362c:	78 83       	st	Y, r23
    362e:	cf 59       	subi	r28, 0x9F	; 159
    3630:	d2 40       	sbci	r29, 0x02	; 2
    3632:	c0 56       	subi	r28, 0x60	; 96
    3634:	dd 4f       	sbci	r29, 0xFD	; 253
    3636:	88 83       	st	Y, r24
    3638:	c0 5a       	subi	r28, 0xA0	; 160
    363a:	d2 40       	sbci	r29, 0x02	; 2
    363c:	cf 55       	subi	r28, 0x5F	; 95
    363e:	dd 4f       	sbci	r29, 0xFD	; 253
    3640:	98 83       	st	Y, r25
    3642:	c1 5a       	subi	r28, 0xA1	; 161
    3644:	d2 40       	sbci	r29, 0x02	; 2
		d = c;
		c = b;
		b = a;
		a = t1 + t2;
    3646:	ca 55       	subi	r28, 0x5A	; 90
    3648:	dd 4f       	sbci	r29, 0xFD	; 253
    364a:	28 81       	ld	r18, Y
    364c:	c6 5a       	subi	r28, 0xA6	; 166
    364e:	d2 40       	sbci	r29, 0x02	; 2
    3650:	c9 55       	subi	r28, 0x59	; 89
    3652:	dd 4f       	sbci	r29, 0xFD	; 253
    3654:	38 81       	ld	r19, Y
    3656:	c7 5a       	subi	r28, 0xA7	; 167
    3658:	d2 40       	sbci	r29, 0x02	; 2
    365a:	c8 55       	subi	r28, 0x58	; 88
    365c:	dd 4f       	sbci	r29, 0xFD	; 253
    365e:	48 81       	ld	r20, Y
    3660:	c8 5a       	subi	r28, 0xA8	; 168
    3662:	d2 40       	sbci	r29, 0x02	; 2
    3664:	c7 55       	subi	r28, 0x57	; 87
    3666:	dd 4f       	sbci	r29, 0xFD	; 253
    3668:	58 81       	ld	r21, Y
    366a:	c9 5a       	subi	r28, 0xA9	; 169
    366c:	d2 40       	sbci	r29, 0x02	; 2
    366e:	c6 55       	subi	r28, 0x56	; 86
    3670:	dd 4f       	sbci	r29, 0xFD	; 253
    3672:	68 81       	ld	r22, Y
    3674:	ca 5a       	subi	r28, 0xAA	; 170
    3676:	d2 40       	sbci	r29, 0x02	; 2
    3678:	c5 55       	subi	r28, 0x55	; 85
    367a:	dd 4f       	sbci	r29, 0xFD	; 253
    367c:	78 81       	ld	r23, Y
    367e:	cb 5a       	subi	r28, 0xAB	; 171
    3680:	d2 40       	sbci	r29, 0x02	; 2
    3682:	83 2d       	mov	r24, r3
    3684:	96 2d       	mov	r25, r6
    3686:	cf 56       	subi	r28, 0x6F	; 111
    3688:	dd 4f       	sbci	r29, 0xFD	; 253
    368a:	a8 80       	ld	r10, Y
    368c:	c1 59       	subi	r28, 0x91	; 145
    368e:	d2 40       	sbci	r29, 0x02	; 2
    3690:	ce 56       	subi	r28, 0x6E	; 110
    3692:	dd 4f       	sbci	r29, 0xFD	; 253
    3694:	b8 80       	ld	r11, Y
    3696:	c2 59       	subi	r28, 0x92	; 146
    3698:	d2 40       	sbci	r29, 0x02	; 2
    369a:	cd 56       	subi	r28, 0x6D	; 109
    369c:	dd 4f       	sbci	r29, 0xFD	; 253
    369e:	c8 80       	ld	r12, Y
    36a0:	c3 59       	subi	r28, 0x93	; 147
    36a2:	d2 40       	sbci	r29, 0x02	; 2
    36a4:	c9 56       	subi	r28, 0x69	; 105
    36a6:	dd 4f       	sbci	r29, 0xFD	; 253
    36a8:	d8 80       	ld	r13, Y
    36aa:	c7 59       	subi	r28, 0x97	; 151
    36ac:	d2 40       	sbci	r29, 0x02	; 2
    36ae:	eb 2e       	mov	r14, r27
    36b0:	fa 2e       	mov	r15, r26
    36b2:	0f 2f       	mov	r16, r31
    36b4:	1e 2f       	mov	r17, r30
    36b6:	0e 94 05 3e 	call	0x7c0a	; 0x7c0a <__adddi3>
    36ba:	ce 55       	subi	r28, 0x5E	; 94
    36bc:	dd 4f       	sbci	r29, 0xFD	; 253
    36be:	a8 81       	ld	r26, Y
    36c0:	c2 5a       	subi	r28, 0xA2	; 162
    36c2:	d2 40       	sbci	r29, 0x02	; 2
    36c4:	c6 53       	subi	r28, 0x36	; 54
    36c6:	dd 4f       	sbci	r29, 0xFD	; 253
    36c8:	a8 83       	st	Y, r26
    36ca:	ca 5c       	subi	r28, 0xCA	; 202
    36cc:	d2 40       	sbci	r29, 0x02	; 2
    36ce:	cd 55       	subi	r28, 0x5D	; 93
    36d0:	dd 4f       	sbci	r29, 0xFD	; 253
    36d2:	b8 81       	ld	r27, Y
    36d4:	c3 5a       	subi	r28, 0xA3	; 163
    36d6:	d2 40       	sbci	r29, 0x02	; 2
    36d8:	c5 53       	subi	r28, 0x35	; 53
    36da:	dd 4f       	sbci	r29, 0xFD	; 253
    36dc:	b8 83       	st	Y, r27
    36de:	cb 5c       	subi	r28, 0xCB	; 203
    36e0:	d2 40       	sbci	r29, 0x02	; 2
    36e2:	cc 55       	subi	r28, 0x5C	; 92
    36e4:	dd 4f       	sbci	r29, 0xFD	; 253
    36e6:	a8 81       	ld	r26, Y
    36e8:	c4 5a       	subi	r28, 0xA4	; 164
    36ea:	d2 40       	sbci	r29, 0x02	; 2
    36ec:	c4 53       	subi	r28, 0x34	; 52
    36ee:	dd 4f       	sbci	r29, 0xFD	; 253
    36f0:	a8 83       	st	Y, r26
    36f2:	cc 5c       	subi	r28, 0xCC	; 204
    36f4:	d2 40       	sbci	r29, 0x02	; 2
    36f6:	cb 55       	subi	r28, 0x5B	; 91
    36f8:	dd 4f       	sbci	r29, 0xFD	; 253
    36fa:	b8 81       	ld	r27, Y
    36fc:	c5 5a       	subi	r28, 0xA5	; 165
    36fe:	d2 40       	sbci	r29, 0x02	; 2
    3700:	c3 53       	subi	r28, 0x33	; 51
    3702:	dd 4f       	sbci	r29, 0xFD	; 253
    3704:	b8 83       	st	Y, r27
    3706:	cd 5c       	subi	r28, 0xCD	; 205
    3708:	d2 40       	sbci	r29, 0x02	; 2
    370a:	c4 55       	subi	r28, 0x54	; 84
    370c:	dd 4f       	sbci	r29, 0xFD	; 253
    370e:	a8 81       	ld	r26, Y
    3710:	cc 5a       	subi	r28, 0xAC	; 172
    3712:	d2 40       	sbci	r29, 0x02	; 2
    3714:	c2 53       	subi	r28, 0x32	; 50
    3716:	dd 4f       	sbci	r29, 0xFD	; 253
    3718:	a8 83       	st	Y, r26
    371a:	ce 5c       	subi	r28, 0xCE	; 206
    371c:	d2 40       	sbci	r29, 0x02	; 2
    371e:	c2 55       	subi	r28, 0x52	; 82
    3720:	dd 4f       	sbci	r29, 0xFD	; 253
    3722:	b8 81       	ld	r27, Y
    3724:	ce 5a       	subi	r28, 0xAE	; 174
    3726:	d2 40       	sbci	r29, 0x02	; 2
    3728:	c1 53       	subi	r28, 0x31	; 49
    372a:	dd 4f       	sbci	r29, 0xFD	; 253
    372c:	b8 83       	st	Y, r27
    372e:	cf 5c       	subi	r28, 0xCF	; 207
    3730:	d2 40       	sbci	r29, 0x02	; 2
    3732:	c1 55       	subi	r28, 0x51	; 81
    3734:	dd 4f       	sbci	r29, 0xFD	; 253
    3736:	a8 81       	ld	r26, Y
    3738:	cf 5a       	subi	r28, 0xAF	; 175
    373a:	d2 40       	sbci	r29, 0x02	; 2
    373c:	c0 53       	subi	r28, 0x30	; 48
    373e:	dd 4f       	sbci	r29, 0xFD	; 253
    3740:	a8 83       	st	Y, r26
    3742:	c0 5d       	subi	r28, 0xD0	; 208
    3744:	d2 40       	sbci	r29, 0x02	; 2
    3746:	c0 55       	subi	r28, 0x50	; 80
    3748:	dd 4f       	sbci	r29, 0xFD	; 253
    374a:	b8 81       	ld	r27, Y
    374c:	c0 5b       	subi	r28, 0xB0	; 176
    374e:	d2 40       	sbci	r29, 0x02	; 2
    3750:	cf 52       	subi	r28, 0x2F	; 47
    3752:	dd 4f       	sbci	r29, 0xFD	; 253
    3754:	b8 83       	st	Y, r27
    3756:	c1 5d       	subi	r28, 0xD1	; 209
    3758:	d2 40       	sbci	r29, 0x02	; 2
    375a:	c6 54       	subi	r28, 0x46	; 70
    375c:	dd 4f       	sbci	r29, 0xFD	; 253
    375e:	a8 81       	ld	r26, Y
    3760:	ca 5b       	subi	r28, 0xBA	; 186
    3762:	d2 40       	sbci	r29, 0x02	; 2
    3764:	ca 55       	subi	r28, 0x5A	; 90
    3766:	dd 4f       	sbci	r29, 0xFD	; 253
    3768:	a8 83       	st	Y, r26
    376a:	c6 5a       	subi	r28, 0xA6	; 166
    376c:	d2 40       	sbci	r29, 0x02	; 2
    376e:	c5 54       	subi	r28, 0x45	; 69
    3770:	dd 4f       	sbci	r29, 0xFD	; 253
    3772:	b8 81       	ld	r27, Y
    3774:	cb 5b       	subi	r28, 0xBB	; 187
    3776:	d2 40       	sbci	r29, 0x02	; 2
    3778:	c9 55       	subi	r28, 0x59	; 89
    377a:	dd 4f       	sbci	r29, 0xFD	; 253
    377c:	b8 83       	st	Y, r27
    377e:	c7 5a       	subi	r28, 0xA7	; 167
    3780:	d2 40       	sbci	r29, 0x02	; 2
    3782:	c4 54       	subi	r28, 0x44	; 68
    3784:	dd 4f       	sbci	r29, 0xFD	; 253
    3786:	a8 81       	ld	r26, Y
    3788:	cc 5b       	subi	r28, 0xBC	; 188
    378a:	d2 40       	sbci	r29, 0x02	; 2
    378c:	c8 55       	subi	r28, 0x58	; 88
    378e:	dd 4f       	sbci	r29, 0xFD	; 253
    3790:	a8 83       	st	Y, r26
    3792:	c8 5a       	subi	r28, 0xA8	; 168
    3794:	d2 40       	sbci	r29, 0x02	; 2
    3796:	c3 54       	subi	r28, 0x43	; 67
    3798:	dd 4f       	sbci	r29, 0xFD	; 253
    379a:	b8 81       	ld	r27, Y
    379c:	cd 5b       	subi	r28, 0xBD	; 189
    379e:	d2 40       	sbci	r29, 0x02	; 2
    37a0:	c7 55       	subi	r28, 0x57	; 87
    37a2:	dd 4f       	sbci	r29, 0xFD	; 253
    37a4:	b8 83       	st	Y, r27
    37a6:	c9 5a       	subi	r28, 0xA9	; 169
    37a8:	d2 40       	sbci	r29, 0x02	; 2
    37aa:	c2 54       	subi	r28, 0x42	; 66
    37ac:	dd 4f       	sbci	r29, 0xFD	; 253
    37ae:	a8 81       	ld	r26, Y
    37b0:	ce 5b       	subi	r28, 0xBE	; 190
    37b2:	d2 40       	sbci	r29, 0x02	; 2
    37b4:	c6 55       	subi	r28, 0x56	; 86
    37b6:	dd 4f       	sbci	r29, 0xFD	; 253
    37b8:	a8 83       	st	Y, r26
    37ba:	ca 5a       	subi	r28, 0xAA	; 170
    37bc:	d2 40       	sbci	r29, 0x02	; 2
    37be:	c1 54       	subi	r28, 0x41	; 65
    37c0:	dd 4f       	sbci	r29, 0xFD	; 253
    37c2:	b8 81       	ld	r27, Y
    37c4:	cf 5b       	subi	r28, 0xBF	; 191
    37c6:	d2 40       	sbci	r29, 0x02	; 2
    37c8:	c5 55       	subi	r28, 0x55	; 85
    37ca:	dd 4f       	sbci	r29, 0xFD	; 253
    37cc:	b8 83       	st	Y, r27
    37ce:	cb 5a       	subi	r28, 0xAB	; 171
    37d0:	d2 40       	sbci	r29, 0x02	; 2
    37d2:	c0 54       	subi	r28, 0x40	; 64
    37d4:	dd 4f       	sbci	r29, 0xFD	; 253
    37d6:	a8 81       	ld	r26, Y
    37d8:	c0 5c       	subi	r28, 0xC0	; 192
    37da:	d2 40       	sbci	r29, 0x02	; 2
    37dc:	cf 56       	subi	r28, 0x6F	; 111
    37de:	dd 4f       	sbci	r29, 0xFD	; 253
    37e0:	a8 83       	st	Y, r26
    37e2:	c1 59       	subi	r28, 0x91	; 145
    37e4:	d2 40       	sbci	r29, 0x02	; 2
    37e6:	cf 53       	subi	r28, 0x3F	; 63
    37e8:	dd 4f       	sbci	r29, 0xFD	; 253
    37ea:	b8 81       	ld	r27, Y
    37ec:	c1 5c       	subi	r28, 0xC1	; 193
    37ee:	d2 40       	sbci	r29, 0x02	; 2
    37f0:	ce 56       	subi	r28, 0x6E	; 110
    37f2:	dd 4f       	sbci	r29, 0xFD	; 253
    37f4:	b8 83       	st	Y, r27
    37f6:	c2 59       	subi	r28, 0x92	; 146
    37f8:	d2 40       	sbci	r29, 0x02	; 2
	d = hs64->h[3];
	e = hs64->h[4];
	f = hs64->h[5];
	g = hs64->h[6];
	h = hs64->h[7];
	for (t = 0; t < 80; t++)
    37fa:	ec e0       	ldi	r30, 0x0C	; 12
    37fc:	f4 e0       	ldi	r31, 0x04	; 4
    37fe:	c3 56       	subi	r28, 0x63	; 99
    3800:	dd 4f       	sbci	r29, 0xFD	; 253
    3802:	a8 81       	ld	r26, Y
    3804:	b9 81       	ldd	r27, Y+1	; 0x01
    3806:	cd 59       	subi	r28, 0x9D	; 157
    3808:	d2 40       	sbci	r29, 0x02	; 2
    380a:	ea 17       	cp	r30, r26
    380c:	fb 07       	cpc	r31, r27
    380e:	09 f0       	breq	.+2      	; 0x3812 <sha512Block+0x1da0>
    3810:	3f c9       	rjmp	.-3458   	; 0x2a90 <sha512Block+0x101e>
    3812:	cb 55       	subi	r28, 0x5B	; 91
    3814:	dd 4f       	sbci	r29, 0xFD	; 253
    3816:	b8 81       	ld	r27, Y
    3818:	c5 5a       	subi	r28, 0xA5	; 165
    381a:	d2 40       	sbci	r29, 0x02	; 2
    381c:	c4 55       	subi	r28, 0x54	; 84
    381e:	dd 4f       	sbci	r29, 0xFD	; 253
    3820:	a8 81       	ld	r26, Y
    3822:	cc 5a       	subi	r28, 0xAC	; 172
    3824:	d2 40       	sbci	r29, 0x02	; 2
    3826:	a2 2e       	mov	r10, r18
    3828:	b3 2e       	mov	r11, r19
    382a:	c4 2e       	mov	r12, r20
    382c:	d5 2e       	mov	r13, r21
    382e:	e6 2e       	mov	r14, r22
    3830:	f7 2e       	mov	r15, r23
    3832:	08 2f       	mov	r16, r24
    3834:	19 2f       	mov	r17, r25
    3836:	62 2c       	mov	r6, r2
    3838:	c2 55       	subi	r28, 0x52	; 82
    383a:	dd 4f       	sbci	r29, 0xFD	; 253
    383c:	28 80       	ld	r2, Y
    383e:	ce 5a       	subi	r28, 0xAE	; 174
    3840:	d2 40       	sbci	r29, 0x02	; 2
    3842:	39 2c       	mov	r3, r9
    3844:	c0 55       	subi	r28, 0x50	; 80
    3846:	dd 4f       	sbci	r29, 0xFD	; 253
    3848:	98 80       	ld	r9, Y
    384a:	c0 5b       	subi	r28, 0xB0	; 176
    384c:	d2 40       	sbci	r29, 0x02	; 2
    384e:	cd 56       	subi	r28, 0x6D	; 109
    3850:	dd 4f       	sbci	r29, 0xFD	; 253
    3852:	88 82       	st	Y, r8
    3854:	c3 59       	subi	r28, 0x93	; 147
    3856:	d2 40       	sbci	r29, 0x02	; 2
    3858:	c1 55       	subi	r28, 0x51	; 81
    385a:	dd 4f       	sbci	r29, 0xFD	; 253
    385c:	88 80       	ld	r8, Y
    385e:	cf 5a       	subi	r28, 0xAF	; 175
    3860:	d2 40       	sbci	r29, 0x02	; 2
		d = c;
		c = b;
		b = a;
		a = t1 + t2;
	}
	hs64->h[0] += a;
    3862:	cc 52       	subi	r28, 0x2C	; 44
    3864:	dd 4f       	sbci	r29, 0xFD	; 253
    3866:	28 81       	ld	r18, Y
    3868:	c4 5d       	subi	r28, 0xD4	; 212
    386a:	d2 40       	sbci	r29, 0x02	; 2
    386c:	cb 52       	subi	r28, 0x2B	; 43
    386e:	dd 4f       	sbci	r29, 0xFD	; 253
    3870:	38 81       	ld	r19, Y
    3872:	c5 5d       	subi	r28, 0xD5	; 213
    3874:	d2 40       	sbci	r29, 0x02	; 2
    3876:	ca 52       	subi	r28, 0x2A	; 42
    3878:	dd 4f       	sbci	r29, 0xFD	; 253
    387a:	48 81       	ld	r20, Y
    387c:	c6 5d       	subi	r28, 0xD6	; 214
    387e:	d2 40       	sbci	r29, 0x02	; 2
    3880:	c9 52       	subi	r28, 0x29	; 41
    3882:	dd 4f       	sbci	r29, 0xFD	; 253
    3884:	58 81       	ld	r21, Y
    3886:	c7 5d       	subi	r28, 0xD7	; 215
    3888:	d2 40       	sbci	r29, 0x02	; 2
    388a:	c8 52       	subi	r28, 0x28	; 40
    388c:	dd 4f       	sbci	r29, 0xFD	; 253
    388e:	68 81       	ld	r22, Y
    3890:	c8 5d       	subi	r28, 0xD8	; 216
    3892:	d2 40       	sbci	r29, 0x02	; 2
    3894:	c7 52       	subi	r28, 0x27	; 39
    3896:	dd 4f       	sbci	r29, 0xFD	; 253
    3898:	78 81       	ld	r23, Y
    389a:	c9 5d       	subi	r28, 0xD9	; 217
    389c:	d2 40       	sbci	r29, 0x02	; 2
    389e:	c6 52       	subi	r28, 0x26	; 38
    38a0:	dd 4f       	sbci	r29, 0xFD	; 253
    38a2:	88 81       	ld	r24, Y
    38a4:	ca 5d       	subi	r28, 0xDA	; 218
    38a6:	d2 40       	sbci	r29, 0x02	; 2
    38a8:	c5 52       	subi	r28, 0x25	; 37
    38aa:	dd 4f       	sbci	r29, 0xFD	; 253
    38ac:	98 81       	ld	r25, Y
    38ae:	cb 5d       	subi	r28, 0xDB	; 219
    38b0:	d2 40       	sbci	r29, 0x02	; 2
    38b2:	0e 94 05 3e 	call	0x7c0a	; 0x7c0a <__adddi3>
    38b6:	ce 52       	subi	r28, 0x2E	; 46
    38b8:	dd 4f       	sbci	r29, 0xFD	; 253
    38ba:	e8 81       	ld	r30, Y
    38bc:	f9 81       	ldd	r31, Y+1	; 0x01
    38be:	c2 5d       	subi	r28, 0xD2	; 210
    38c0:	d2 40       	sbci	r29, 0x02	; 2
    38c2:	20 83       	st	Z, r18
    38c4:	31 83       	std	Z+1, r19	; 0x01
    38c6:	42 83       	std	Z+2, r20	; 0x02
    38c8:	53 83       	std	Z+3, r21	; 0x03
    38ca:	64 83       	std	Z+4, r22	; 0x04
    38cc:	75 83       	std	Z+5, r23	; 0x05
    38ce:	86 83       	std	Z+6, r24	; 0x06
    38d0:	97 83       	std	Z+7, r25	; 0x07
	hs64->h[1] += b;
    38d2:	c4 52       	subi	r28, 0x24	; 36
    38d4:	dd 4f       	sbci	r29, 0xFD	; 253
    38d6:	28 81       	ld	r18, Y
    38d8:	cc 5d       	subi	r28, 0xDC	; 220
    38da:	d2 40       	sbci	r29, 0x02	; 2
    38dc:	c3 52       	subi	r28, 0x23	; 35
    38de:	dd 4f       	sbci	r29, 0xFD	; 253
    38e0:	38 81       	ld	r19, Y
    38e2:	cd 5d       	subi	r28, 0xDD	; 221
    38e4:	d2 40       	sbci	r29, 0x02	; 2
    38e6:	c2 52       	subi	r28, 0x22	; 34
    38e8:	dd 4f       	sbci	r29, 0xFD	; 253
    38ea:	48 81       	ld	r20, Y
    38ec:	ce 5d       	subi	r28, 0xDE	; 222
    38ee:	d2 40       	sbci	r29, 0x02	; 2
    38f0:	c1 52       	subi	r28, 0x21	; 33
    38f2:	dd 4f       	sbci	r29, 0xFD	; 253
    38f4:	58 81       	ld	r21, Y
    38f6:	cf 5d       	subi	r28, 0xDF	; 223
    38f8:	d2 40       	sbci	r29, 0x02	; 2
    38fa:	c0 52       	subi	r28, 0x20	; 32
    38fc:	dd 4f       	sbci	r29, 0xFD	; 253
    38fe:	68 81       	ld	r22, Y
    3900:	c0 5e       	subi	r28, 0xE0	; 224
    3902:	d2 40       	sbci	r29, 0x02	; 2
    3904:	cf 51       	subi	r28, 0x1F	; 31
    3906:	dd 4f       	sbci	r29, 0xFD	; 253
    3908:	78 81       	ld	r23, Y
    390a:	c1 5e       	subi	r28, 0xE1	; 225
    390c:	d2 40       	sbci	r29, 0x02	; 2
    390e:	ce 51       	subi	r28, 0x1E	; 30
    3910:	dd 4f       	sbci	r29, 0xFD	; 253
    3912:	88 81       	ld	r24, Y
    3914:	c2 5e       	subi	r28, 0xE2	; 226
    3916:	d2 40       	sbci	r29, 0x02	; 2
    3918:	cd 51       	subi	r28, 0x1D	; 29
    391a:	dd 4f       	sbci	r29, 0xFD	; 253
    391c:	98 81       	ld	r25, Y
    391e:	c3 5e       	subi	r28, 0xE3	; 227
    3920:	d2 40       	sbci	r29, 0x02	; 2
    3922:	c5 57       	subi	r28, 0x75	; 117
    3924:	dd 4f       	sbci	r29, 0xFD	; 253
    3926:	a8 80       	ld	r10, Y
    3928:	cb 58       	subi	r28, 0x8B	; 139
    392a:	d2 40       	sbci	r29, 0x02	; 2
    392c:	c4 57       	subi	r28, 0x74	; 116
    392e:	dd 4f       	sbci	r29, 0xFD	; 253
    3930:	b8 80       	ld	r11, Y
    3932:	cc 58       	subi	r28, 0x8C	; 140
    3934:	d2 40       	sbci	r29, 0x02	; 2
    3936:	c3 57       	subi	r28, 0x73	; 115
    3938:	dd 4f       	sbci	r29, 0xFD	; 253
    393a:	c8 80       	ld	r12, Y
    393c:	cd 58       	subi	r28, 0x8D	; 141
    393e:	d2 40       	sbci	r29, 0x02	; 2
    3940:	c2 57       	subi	r28, 0x72	; 114
    3942:	dd 4f       	sbci	r29, 0xFD	; 253
    3944:	d8 80       	ld	r13, Y
    3946:	ce 58       	subi	r28, 0x8E	; 142
    3948:	d2 40       	sbci	r29, 0x02	; 2
    394a:	c1 57       	subi	r28, 0x71	; 113
    394c:	dd 4f       	sbci	r29, 0xFD	; 253
    394e:	e8 80       	ld	r14, Y
    3950:	cf 58       	subi	r28, 0x8F	; 143
    3952:	d2 40       	sbci	r29, 0x02	; 2
    3954:	c0 57       	subi	r28, 0x70	; 112
    3956:	dd 4f       	sbci	r29, 0xFD	; 253
    3958:	f8 80       	ld	r15, Y
    395a:	c0 59       	subi	r28, 0x90	; 144
    395c:	d2 40       	sbci	r29, 0x02	; 2
    395e:	c5 56       	subi	r28, 0x65	; 101
    3960:	dd 4f       	sbci	r29, 0xFD	; 253
    3962:	08 81       	ld	r16, Y
    3964:	cb 59       	subi	r28, 0x9B	; 155
    3966:	d2 40       	sbci	r29, 0x02	; 2
    3968:	c4 56       	subi	r28, 0x64	; 100
    396a:	dd 4f       	sbci	r29, 0xFD	; 253
    396c:	18 81       	ld	r17, Y
    396e:	cc 59       	subi	r28, 0x9C	; 156
    3970:	d2 40       	sbci	r29, 0x02	; 2
    3972:	0e 94 05 3e 	call	0x7c0a	; 0x7c0a <__adddi3>
    3976:	20 87       	std	Z+8, r18	; 0x08
    3978:	31 87       	std	Z+9, r19	; 0x09
    397a:	42 87       	std	Z+10, r20	; 0x0a
    397c:	53 87       	std	Z+11, r21	; 0x0b
    397e:	64 87       	std	Z+12, r22	; 0x0c
    3980:	75 87       	std	Z+13, r23	; 0x0d
    3982:	86 87       	std	Z+14, r24	; 0x0e
    3984:	97 87       	std	Z+15, r25	; 0x0f
	hs64->h[2] += c;
    3986:	cc 51       	subi	r28, 0x1C	; 28
    3988:	dd 4f       	sbci	r29, 0xFD	; 253
    398a:	28 81       	ld	r18, Y
    398c:	c4 5e       	subi	r28, 0xE4	; 228
    398e:	d2 40       	sbci	r29, 0x02	; 2
    3990:	cb 51       	subi	r28, 0x1B	; 27
    3992:	dd 4f       	sbci	r29, 0xFD	; 253
    3994:	38 81       	ld	r19, Y
    3996:	c5 5e       	subi	r28, 0xE5	; 229
    3998:	d2 40       	sbci	r29, 0x02	; 2
    399a:	ca 51       	subi	r28, 0x1A	; 26
    399c:	dd 4f       	sbci	r29, 0xFD	; 253
    399e:	48 81       	ld	r20, Y
    39a0:	c6 5e       	subi	r28, 0xE6	; 230
    39a2:	d2 40       	sbci	r29, 0x02	; 2
    39a4:	c9 51       	subi	r28, 0x19	; 25
    39a6:	dd 4f       	sbci	r29, 0xFD	; 253
    39a8:	58 81       	ld	r21, Y
    39aa:	c7 5e       	subi	r28, 0xE7	; 231
    39ac:	d2 40       	sbci	r29, 0x02	; 2
    39ae:	c8 51       	subi	r28, 0x18	; 24
    39b0:	dd 4f       	sbci	r29, 0xFD	; 253
    39b2:	68 81       	ld	r22, Y
    39b4:	c8 5e       	subi	r28, 0xE8	; 232
    39b6:	d2 40       	sbci	r29, 0x02	; 2
    39b8:	c7 51       	subi	r28, 0x17	; 23
    39ba:	dd 4f       	sbci	r29, 0xFD	; 253
    39bc:	78 81       	ld	r23, Y
    39be:	c9 5e       	subi	r28, 0xE9	; 233
    39c0:	d2 40       	sbci	r29, 0x02	; 2
    39c2:	c6 51       	subi	r28, 0x16	; 22
    39c4:	dd 4f       	sbci	r29, 0xFD	; 253
    39c6:	88 81       	ld	r24, Y
    39c8:	ca 5e       	subi	r28, 0xEA	; 234
    39ca:	d2 40       	sbci	r29, 0x02	; 2
    39cc:	c5 51       	subi	r28, 0x15	; 21
    39ce:	dd 4f       	sbci	r29, 0xFD	; 253
    39d0:	98 81       	ld	r25, Y
    39d2:	cb 5e       	subi	r28, 0xEB	; 235
    39d4:	d2 40       	sbci	r29, 0x02	; 2
    39d6:	ce 54       	subi	r28, 0x4E	; 78
    39d8:	dd 4f       	sbci	r29, 0xFD	; 253
    39da:	a8 80       	ld	r10, Y
    39dc:	c2 5b       	subi	r28, 0xB2	; 178
    39de:	d2 40       	sbci	r29, 0x02	; 2
    39e0:	cd 54       	subi	r28, 0x4D	; 77
    39e2:	dd 4f       	sbci	r29, 0xFD	; 253
    39e4:	b8 80       	ld	r11, Y
    39e6:	c3 5b       	subi	r28, 0xB3	; 179
    39e8:	d2 40       	sbci	r29, 0x02	; 2
    39ea:	cc 54       	subi	r28, 0x4C	; 76
    39ec:	dd 4f       	sbci	r29, 0xFD	; 253
    39ee:	c8 80       	ld	r12, Y
    39f0:	c4 5b       	subi	r28, 0xB4	; 180
    39f2:	d2 40       	sbci	r29, 0x02	; 2
    39f4:	cb 54       	subi	r28, 0x4B	; 75
    39f6:	dd 4f       	sbci	r29, 0xFD	; 253
    39f8:	d8 80       	ld	r13, Y
    39fa:	c5 5b       	subi	r28, 0xB5	; 181
    39fc:	d2 40       	sbci	r29, 0x02	; 2
    39fe:	ca 54       	subi	r28, 0x4A	; 74
    3a00:	dd 4f       	sbci	r29, 0xFD	; 253
    3a02:	e8 80       	ld	r14, Y
    3a04:	c6 5b       	subi	r28, 0xB6	; 182
    3a06:	d2 40       	sbci	r29, 0x02	; 2
    3a08:	c9 54       	subi	r28, 0x49	; 73
    3a0a:	dd 4f       	sbci	r29, 0xFD	; 253
    3a0c:	f8 80       	ld	r15, Y
    3a0e:	c7 5b       	subi	r28, 0xB7	; 183
    3a10:	d2 40       	sbci	r29, 0x02	; 2
    3a12:	c8 54       	subi	r28, 0x48	; 72
    3a14:	dd 4f       	sbci	r29, 0xFD	; 253
    3a16:	08 81       	ld	r16, Y
    3a18:	c8 5b       	subi	r28, 0xB8	; 184
    3a1a:	d2 40       	sbci	r29, 0x02	; 2
    3a1c:	c7 54       	subi	r28, 0x47	; 71
    3a1e:	dd 4f       	sbci	r29, 0xFD	; 253
    3a20:	18 81       	ld	r17, Y
    3a22:	c9 5b       	subi	r28, 0xB9	; 185
    3a24:	d2 40       	sbci	r29, 0x02	; 2
    3a26:	0e 94 05 3e 	call	0x7c0a	; 0x7c0a <__adddi3>
    3a2a:	20 8b       	std	Z+16, r18	; 0x10
    3a2c:	31 8b       	std	Z+17, r19	; 0x11
    3a2e:	42 8b       	std	Z+18, r20	; 0x12
    3a30:	53 8b       	std	Z+19, r21	; 0x13
    3a32:	64 8b       	std	Z+20, r22	; 0x14
    3a34:	75 8b       	std	Z+21, r23	; 0x15
    3a36:	86 8b       	std	Z+22, r24	; 0x16
    3a38:	97 8b       	std	Z+23, r25	; 0x17
	hs64->h[3] += d;
    3a3a:	ce 55       	subi	r28, 0x5E	; 94
    3a3c:	dd 4f       	sbci	r29, 0xFD	; 253
    3a3e:	28 81       	ld	r18, Y
    3a40:	c2 5a       	subi	r28, 0xA2	; 162
    3a42:	d2 40       	sbci	r29, 0x02	; 2
    3a44:	cd 55       	subi	r28, 0x5D	; 93
    3a46:	dd 4f       	sbci	r29, 0xFD	; 253
    3a48:	38 81       	ld	r19, Y
    3a4a:	c3 5a       	subi	r28, 0xA3	; 163
    3a4c:	d2 40       	sbci	r29, 0x02	; 2
    3a4e:	cc 55       	subi	r28, 0x5C	; 92
    3a50:	dd 4f       	sbci	r29, 0xFD	; 253
    3a52:	48 81       	ld	r20, Y
    3a54:	c4 5a       	subi	r28, 0xA4	; 164
    3a56:	d2 40       	sbci	r29, 0x02	; 2
    3a58:	5b 2f       	mov	r21, r27
    3a5a:	6a 2f       	mov	r22, r26
    3a5c:	72 2d       	mov	r23, r2
    3a5e:	88 2d       	mov	r24, r8
    3a60:	99 2d       	mov	r25, r9
    3a62:	c4 51       	subi	r28, 0x14	; 20
    3a64:	dd 4f       	sbci	r29, 0xFD	; 253
    3a66:	a8 80       	ld	r10, Y
    3a68:	cc 5e       	subi	r28, 0xEC	; 236
    3a6a:	d2 40       	sbci	r29, 0x02	; 2
    3a6c:	c3 51       	subi	r28, 0x13	; 19
    3a6e:	dd 4f       	sbci	r29, 0xFD	; 253
    3a70:	b8 80       	ld	r11, Y
    3a72:	cd 5e       	subi	r28, 0xED	; 237
    3a74:	d2 40       	sbci	r29, 0x02	; 2
    3a76:	c2 51       	subi	r28, 0x12	; 18
    3a78:	dd 4f       	sbci	r29, 0xFD	; 253
    3a7a:	c8 80       	ld	r12, Y
    3a7c:	ce 5e       	subi	r28, 0xEE	; 238
    3a7e:	d2 40       	sbci	r29, 0x02	; 2
    3a80:	c1 51       	subi	r28, 0x11	; 17
    3a82:	dd 4f       	sbci	r29, 0xFD	; 253
    3a84:	d8 80       	ld	r13, Y
    3a86:	cf 5e       	subi	r28, 0xEF	; 239
    3a88:	d2 40       	sbci	r29, 0x02	; 2
    3a8a:	c0 51       	subi	r28, 0x10	; 16
    3a8c:	dd 4f       	sbci	r29, 0xFD	; 253
    3a8e:	e8 80       	ld	r14, Y
    3a90:	c0 5f       	subi	r28, 0xF0	; 240
    3a92:	d2 40       	sbci	r29, 0x02	; 2
    3a94:	cf 50       	subi	r28, 0x0F	; 15
    3a96:	dd 4f       	sbci	r29, 0xFD	; 253
    3a98:	f8 80       	ld	r15, Y
    3a9a:	c1 5f       	subi	r28, 0xF1	; 241
    3a9c:	d2 40       	sbci	r29, 0x02	; 2
    3a9e:	ce 50       	subi	r28, 0x0E	; 14
    3aa0:	dd 4f       	sbci	r29, 0xFD	; 253
    3aa2:	08 81       	ld	r16, Y
    3aa4:	c2 5f       	subi	r28, 0xF2	; 242
    3aa6:	d2 40       	sbci	r29, 0x02	; 2
    3aa8:	cd 50       	subi	r28, 0x0D	; 13
    3aaa:	dd 4f       	sbci	r29, 0xFD	; 253
    3aac:	18 81       	ld	r17, Y
    3aae:	c3 5f       	subi	r28, 0xF3	; 243
    3ab0:	d2 40       	sbci	r29, 0x02	; 2
    3ab2:	0e 94 05 3e 	call	0x7c0a	; 0x7c0a <__adddi3>
    3ab6:	20 8f       	std	Z+24, r18	; 0x18
    3ab8:	31 8f       	std	Z+25, r19	; 0x19
    3aba:	42 8f       	std	Z+26, r20	; 0x1a
    3abc:	53 8f       	std	Z+27, r21	; 0x1b
    3abe:	64 8f       	std	Z+28, r22	; 0x1c
    3ac0:	75 8f       	std	Z+29, r23	; 0x1d
    3ac2:	86 8f       	std	Z+30, r24	; 0x1e
    3ac4:	97 8f       	std	Z+31, r25	; 0x1f
	hs64->h[4] += e;
    3ac6:	cc 50       	subi	r28, 0x0C	; 12
    3ac8:	dd 4f       	sbci	r29, 0xFD	; 253
    3aca:	28 81       	ld	r18, Y
    3acc:	c4 5f       	subi	r28, 0xF4	; 244
    3ace:	d2 40       	sbci	r29, 0x02	; 2
    3ad0:	cb 50       	subi	r28, 0x0B	; 11
    3ad2:	dd 4f       	sbci	r29, 0xFD	; 253
    3ad4:	38 81       	ld	r19, Y
    3ad6:	c5 5f       	subi	r28, 0xF5	; 245
    3ad8:	d2 40       	sbci	r29, 0x02	; 2
    3ada:	ca 50       	subi	r28, 0x0A	; 10
    3adc:	dd 4f       	sbci	r29, 0xFD	; 253
    3ade:	48 81       	ld	r20, Y
    3ae0:	c6 5f       	subi	r28, 0xF6	; 246
    3ae2:	d2 40       	sbci	r29, 0x02	; 2
    3ae4:	c9 50       	subi	r28, 0x09	; 9
    3ae6:	dd 4f       	sbci	r29, 0xFD	; 253
    3ae8:	58 81       	ld	r21, Y
    3aea:	c7 5f       	subi	r28, 0xF7	; 247
    3aec:	d2 40       	sbci	r29, 0x02	; 2
    3aee:	c8 50       	subi	r28, 0x08	; 8
    3af0:	dd 4f       	sbci	r29, 0xFD	; 253
    3af2:	68 81       	ld	r22, Y
    3af4:	c8 5f       	subi	r28, 0xF8	; 248
    3af6:	d2 40       	sbci	r29, 0x02	; 2
    3af8:	c7 50       	subi	r28, 0x07	; 7
    3afa:	dd 4f       	sbci	r29, 0xFD	; 253
    3afc:	78 81       	ld	r23, Y
    3afe:	c9 5f       	subi	r28, 0xF9	; 249
    3b00:	d2 40       	sbci	r29, 0x02	; 2
    3b02:	c6 50       	subi	r28, 0x06	; 6
    3b04:	dd 4f       	sbci	r29, 0xFD	; 253
    3b06:	88 81       	ld	r24, Y
    3b08:	ca 5f       	subi	r28, 0xFA	; 250
    3b0a:	d2 40       	sbci	r29, 0x02	; 2
    3b0c:	c5 50       	subi	r28, 0x05	; 5
    3b0e:	dd 4f       	sbci	r29, 0xFD	; 253
    3b10:	98 81       	ld	r25, Y
    3b12:	cb 5f       	subi	r28, 0xFB	; 251
    3b14:	d2 40       	sbci	r29, 0x02	; 2
    3b16:	c9 57       	subi	r28, 0x79	; 121
    3b18:	dd 4f       	sbci	r29, 0xFD	; 253
    3b1a:	a8 80       	ld	r10, Y
    3b1c:	c7 58       	subi	r28, 0x87	; 135
    3b1e:	d2 40       	sbci	r29, 0x02	; 2
    3b20:	c8 57       	subi	r28, 0x78	; 120
    3b22:	dd 4f       	sbci	r29, 0xFD	; 253
    3b24:	b8 80       	ld	r11, Y
    3b26:	c8 58       	subi	r28, 0x88	; 136
    3b28:	d2 40       	sbci	r29, 0x02	; 2
    3b2a:	c7 57       	subi	r28, 0x77	; 119
    3b2c:	dd 4f       	sbci	r29, 0xFD	; 253
    3b2e:	c8 80       	ld	r12, Y
    3b30:	c9 58       	subi	r28, 0x89	; 137
    3b32:	d2 40       	sbci	r29, 0x02	; 2
    3b34:	c6 57       	subi	r28, 0x76	; 118
    3b36:	dd 4f       	sbci	r29, 0xFD	; 253
    3b38:	d8 80       	ld	r13, Y
    3b3a:	ca 58       	subi	r28, 0x8A	; 138
    3b3c:	d2 40       	sbci	r29, 0x02	; 2
    3b3e:	cf 54       	subi	r28, 0x4F	; 79
    3b40:	dd 4f       	sbci	r29, 0xFD	; 253
    3b42:	e8 80       	ld	r14, Y
    3b44:	c1 5b       	subi	r28, 0xB1	; 177
    3b46:	d2 40       	sbci	r29, 0x02	; 2
    3b48:	c1 56       	subi	r28, 0x61	; 97
    3b4a:	dd 4f       	sbci	r29, 0xFD	; 253
    3b4c:	f8 80       	ld	r15, Y
    3b4e:	cf 59       	subi	r28, 0x9F	; 159
    3b50:	d2 40       	sbci	r29, 0x02	; 2
    3b52:	c0 56       	subi	r28, 0x60	; 96
    3b54:	dd 4f       	sbci	r29, 0xFD	; 253
    3b56:	08 81       	ld	r16, Y
    3b58:	c0 5a       	subi	r28, 0xA0	; 160
    3b5a:	d2 40       	sbci	r29, 0x02	; 2
    3b5c:	cf 55       	subi	r28, 0x5F	; 95
    3b5e:	dd 4f       	sbci	r29, 0xFD	; 253
    3b60:	18 81       	ld	r17, Y
    3b62:	c1 5a       	subi	r28, 0xA1	; 161
    3b64:	d2 40       	sbci	r29, 0x02	; 2
    3b66:	0e 94 05 3e 	call	0x7c0a	; 0x7c0a <__adddi3>
    3b6a:	20 a3       	std	Z+32, r18	; 0x20
    3b6c:	31 a3       	std	Z+33, r19	; 0x21
    3b6e:	42 a3       	std	Z+34, r20	; 0x22
    3b70:	53 a3       	std	Z+35, r21	; 0x23
    3b72:	64 a3       	std	Z+36, r22	; 0x24
    3b74:	75 a3       	std	Z+37, r23	; 0x25
    3b76:	86 a3       	std	Z+38, r24	; 0x26
    3b78:	97 a3       	std	Z+39, r25	; 0x27
	hs64->h[5] += f;
    3b7a:	c4 50       	subi	r28, 0x04	; 4
    3b7c:	dd 4f       	sbci	r29, 0xFD	; 253
    3b7e:	28 81       	ld	r18, Y
    3b80:	cc 5f       	subi	r28, 0xFC	; 252
    3b82:	d2 40       	sbci	r29, 0x02	; 2
    3b84:	c3 50       	subi	r28, 0x03	; 3
    3b86:	dd 4f       	sbci	r29, 0xFD	; 253
    3b88:	38 81       	ld	r19, Y
    3b8a:	cd 5f       	subi	r28, 0xFD	; 253
    3b8c:	d2 40       	sbci	r29, 0x02	; 2
    3b8e:	c2 50       	subi	r28, 0x02	; 2
    3b90:	dd 4f       	sbci	r29, 0xFD	; 253
    3b92:	48 81       	ld	r20, Y
    3b94:	ce 5f       	subi	r28, 0xFE	; 254
    3b96:	d2 40       	sbci	r29, 0x02	; 2
    3b98:	c1 50       	subi	r28, 0x01	; 1
    3b9a:	dd 4f       	sbci	r29, 0xFD	; 253
    3b9c:	58 81       	ld	r21, Y
    3b9e:	cf 5f       	subi	r28, 0xFF	; 255
    3ba0:	d2 40       	sbci	r29, 0x02	; 2
    3ba2:	c0 50       	subi	r28, 0x00	; 0
    3ba4:	dd 4f       	sbci	r29, 0xFD	; 253
    3ba6:	68 81       	ld	r22, Y
    3ba8:	c0 50       	subi	r28, 0x00	; 0
    3baa:	d3 40       	sbci	r29, 0x03	; 3
    3bac:	cf 5f       	subi	r28, 0xFF	; 255
    3bae:	dc 4f       	sbci	r29, 0xFC	; 252
    3bb0:	78 81       	ld	r23, Y
    3bb2:	c1 50       	subi	r28, 0x01	; 1
    3bb4:	d3 40       	sbci	r29, 0x03	; 3
    3bb6:	ce 5f       	subi	r28, 0xFE	; 254
    3bb8:	dc 4f       	sbci	r29, 0xFC	; 252
    3bba:	88 81       	ld	r24, Y
    3bbc:	c2 50       	subi	r28, 0x02	; 2
    3bbe:	d3 40       	sbci	r29, 0x03	; 3
    3bc0:	cd 5f       	subi	r28, 0xFD	; 253
    3bc2:	dc 4f       	sbci	r29, 0xFC	; 252
    3bc4:	98 81       	ld	r25, Y
    3bc6:	c3 50       	subi	r28, 0x03	; 3
    3bc8:	d3 40       	sbci	r29, 0x03	; 3
    3bca:	a6 2c       	mov	r10, r6
    3bcc:	b3 2c       	mov	r11, r3
    3bce:	cd 56       	subi	r28, 0x6D	; 109
    3bd0:	dd 4f       	sbci	r29, 0xFD	; 253
    3bd2:	c8 80       	ld	r12, Y
    3bd4:	c3 59       	subi	r28, 0x93	; 147
    3bd6:	d2 40       	sbci	r29, 0x02	; 2
    3bd8:	d7 2c       	mov	r13, r7
    3bda:	cd 57       	subi	r28, 0x7D	; 125
    3bdc:	dd 4f       	sbci	r29, 0xFD	; 253
    3bde:	e8 80       	ld	r14, Y
    3be0:	c3 58       	subi	r28, 0x83	; 131
    3be2:	d2 40       	sbci	r29, 0x02	; 2
    3be4:	cc 57       	subi	r28, 0x7C	; 124
    3be6:	dd 4f       	sbci	r29, 0xFD	; 253
    3be8:	f8 80       	ld	r15, Y
    3bea:	c4 58       	subi	r28, 0x84	; 132
    3bec:	d2 40       	sbci	r29, 0x02	; 2
    3bee:	cb 57       	subi	r28, 0x7B	; 123
    3bf0:	dd 4f       	sbci	r29, 0xFD	; 253
    3bf2:	08 81       	ld	r16, Y
    3bf4:	c5 58       	subi	r28, 0x85	; 133
    3bf6:	d2 40       	sbci	r29, 0x02	; 2
    3bf8:	ca 57       	subi	r28, 0x7A	; 122
    3bfa:	dd 4f       	sbci	r29, 0xFD	; 253
    3bfc:	18 81       	ld	r17, Y
    3bfe:	c6 58       	subi	r28, 0x86	; 134
    3c00:	d2 40       	sbci	r29, 0x02	; 2
    3c02:	0e 94 05 3e 	call	0x7c0a	; 0x7c0a <__adddi3>
    3c06:	20 a7       	std	Z+40, r18	; 0x28
    3c08:	31 a7       	std	Z+41, r19	; 0x29
    3c0a:	42 a7       	std	Z+42, r20	; 0x2a
    3c0c:	53 a7       	std	Z+43, r21	; 0x2b
    3c0e:	64 a7       	std	Z+44, r22	; 0x2c
    3c10:	75 a7       	std	Z+45, r23	; 0x2d
    3c12:	86 a7       	std	Z+46, r24	; 0x2e
    3c14:	97 a7       	std	Z+47, r25	; 0x2f
	hs64->h[6] += g;
    3c16:	cc 5f       	subi	r28, 0xFC	; 252
    3c18:	dc 4f       	sbci	r29, 0xFC	; 252
    3c1a:	28 81       	ld	r18, Y
    3c1c:	c4 50       	subi	r28, 0x04	; 4
    3c1e:	d3 40       	sbci	r29, 0x03	; 3
    3c20:	cb 5f       	subi	r28, 0xFB	; 251
    3c22:	dc 4f       	sbci	r29, 0xFC	; 252
    3c24:	38 81       	ld	r19, Y
    3c26:	c5 50       	subi	r28, 0x05	; 5
    3c28:	d3 40       	sbci	r29, 0x03	; 3
    3c2a:	ca 5f       	subi	r28, 0xFA	; 250
    3c2c:	dc 4f       	sbci	r29, 0xFC	; 252
    3c2e:	48 81       	ld	r20, Y
    3c30:	c6 50       	subi	r28, 0x06	; 6
    3c32:	d3 40       	sbci	r29, 0x03	; 3
    3c34:	c9 5f       	subi	r28, 0xF9	; 249
    3c36:	dc 4f       	sbci	r29, 0xFC	; 252
    3c38:	58 81       	ld	r21, Y
    3c3a:	c7 50       	subi	r28, 0x07	; 7
    3c3c:	d3 40       	sbci	r29, 0x03	; 3
    3c3e:	c8 5f       	subi	r28, 0xF8	; 248
    3c40:	dc 4f       	sbci	r29, 0xFC	; 252
    3c42:	68 81       	ld	r22, Y
    3c44:	c8 50       	subi	r28, 0x08	; 8
    3c46:	d3 40       	sbci	r29, 0x03	; 3
    3c48:	c7 5f       	subi	r28, 0xF7	; 247
    3c4a:	dc 4f       	sbci	r29, 0xFC	; 252
    3c4c:	78 81       	ld	r23, Y
    3c4e:	c9 50       	subi	r28, 0x09	; 9
    3c50:	d3 40       	sbci	r29, 0x03	; 3
    3c52:	c6 5f       	subi	r28, 0xF6	; 246
    3c54:	dc 4f       	sbci	r29, 0xFC	; 252
    3c56:	88 81       	ld	r24, Y
    3c58:	ca 50       	subi	r28, 0x0A	; 10
    3c5a:	d3 40       	sbci	r29, 0x03	; 3
    3c5c:	c5 5f       	subi	r28, 0xF5	; 245
    3c5e:	dc 4f       	sbci	r29, 0xFC	; 252
    3c60:	98 81       	ld	r25, Y
    3c62:	cb 50       	subi	r28, 0x0B	; 11
    3c64:	d3 40       	sbci	r29, 0x03	; 3
    3c66:	ce 53       	subi	r28, 0x3E	; 62
    3c68:	dd 4f       	sbci	r29, 0xFD	; 253
    3c6a:	a8 80       	ld	r10, Y
    3c6c:	c2 5c       	subi	r28, 0xC2	; 194
    3c6e:	d2 40       	sbci	r29, 0x02	; 2
    3c70:	cd 53       	subi	r28, 0x3D	; 61
    3c72:	dd 4f       	sbci	r29, 0xFD	; 253
    3c74:	b8 80       	ld	r11, Y
    3c76:	c3 5c       	subi	r28, 0xC3	; 195
    3c78:	d2 40       	sbci	r29, 0x02	; 2
    3c7a:	cc 53       	subi	r28, 0x3C	; 60
    3c7c:	dd 4f       	sbci	r29, 0xFD	; 253
    3c7e:	c8 80       	ld	r12, Y
    3c80:	c4 5c       	subi	r28, 0xC4	; 196
    3c82:	d2 40       	sbci	r29, 0x02	; 2
    3c84:	cb 53       	subi	r28, 0x3B	; 59
    3c86:	dd 4f       	sbci	r29, 0xFD	; 253
    3c88:	d8 80       	ld	r13, Y
    3c8a:	c5 5c       	subi	r28, 0xC5	; 197
    3c8c:	d2 40       	sbci	r29, 0x02	; 2
    3c8e:	ca 53       	subi	r28, 0x3A	; 58
    3c90:	dd 4f       	sbci	r29, 0xFD	; 253
    3c92:	e8 80       	ld	r14, Y
    3c94:	c6 5c       	subi	r28, 0xC6	; 198
    3c96:	d2 40       	sbci	r29, 0x02	; 2
    3c98:	c9 53       	subi	r28, 0x39	; 57
    3c9a:	dd 4f       	sbci	r29, 0xFD	; 253
    3c9c:	f8 80       	ld	r15, Y
    3c9e:	c7 5c       	subi	r28, 0xC7	; 199
    3ca0:	d2 40       	sbci	r29, 0x02	; 2
    3ca2:	c8 53       	subi	r28, 0x38	; 56
    3ca4:	dd 4f       	sbci	r29, 0xFD	; 253
    3ca6:	08 81       	ld	r16, Y
    3ca8:	c8 5c       	subi	r28, 0xC8	; 200
    3caa:	d2 40       	sbci	r29, 0x02	; 2
    3cac:	c7 53       	subi	r28, 0x37	; 55
    3cae:	dd 4f       	sbci	r29, 0xFD	; 253
    3cb0:	18 81       	ld	r17, Y
    3cb2:	c9 5c       	subi	r28, 0xC9	; 201
    3cb4:	d2 40       	sbci	r29, 0x02	; 2
    3cb6:	0e 94 05 3e 	call	0x7c0a	; 0x7c0a <__adddi3>
    3cba:	20 ab       	std	Z+48, r18	; 0x30
    3cbc:	31 ab       	std	Z+49, r19	; 0x31
    3cbe:	42 ab       	std	Z+50, r20	; 0x32
    3cc0:	53 ab       	std	Z+51, r21	; 0x33
    3cc2:	64 ab       	std	Z+52, r22	; 0x34
    3cc4:	75 ab       	std	Z+53, r23	; 0x35
    3cc6:	86 ab       	std	Z+54, r24	; 0x36
    3cc8:	97 ab       	std	Z+55, r25	; 0x37
	hs64->h[7] += h;
    3cca:	c4 5f       	subi	r28, 0xF4	; 244
    3ccc:	dc 4f       	sbci	r29, 0xFC	; 252
    3cce:	28 81       	ld	r18, Y
    3cd0:	cc 50       	subi	r28, 0x0C	; 12
    3cd2:	d3 40       	sbci	r29, 0x03	; 3
    3cd4:	c3 5f       	subi	r28, 0xF3	; 243
    3cd6:	dc 4f       	sbci	r29, 0xFC	; 252
    3cd8:	38 81       	ld	r19, Y
    3cda:	cd 50       	subi	r28, 0x0D	; 13
    3cdc:	d3 40       	sbci	r29, 0x03	; 3
    3cde:	c2 5f       	subi	r28, 0xF2	; 242
    3ce0:	dc 4f       	sbci	r29, 0xFC	; 252
    3ce2:	48 81       	ld	r20, Y
    3ce4:	ce 50       	subi	r28, 0x0E	; 14
    3ce6:	d3 40       	sbci	r29, 0x03	; 3
    3ce8:	c1 5f       	subi	r28, 0xF1	; 241
    3cea:	dc 4f       	sbci	r29, 0xFC	; 252
    3cec:	58 81       	ld	r21, Y
    3cee:	cf 50       	subi	r28, 0x0F	; 15
    3cf0:	d3 40       	sbci	r29, 0x03	; 3
    3cf2:	c0 5f       	subi	r28, 0xF0	; 240
    3cf4:	dc 4f       	sbci	r29, 0xFC	; 252
    3cf6:	68 81       	ld	r22, Y
    3cf8:	c0 51       	subi	r28, 0x10	; 16
    3cfa:	d3 40       	sbci	r29, 0x03	; 3
    3cfc:	cf 5e       	subi	r28, 0xEF	; 239
    3cfe:	dc 4f       	sbci	r29, 0xFC	; 252
    3d00:	78 81       	ld	r23, Y
    3d02:	c1 51       	subi	r28, 0x11	; 17
    3d04:	d3 40       	sbci	r29, 0x03	; 3
    3d06:	ce 5e       	subi	r28, 0xEE	; 238
    3d08:	dc 4f       	sbci	r29, 0xFC	; 252
    3d0a:	88 81       	ld	r24, Y
    3d0c:	c2 51       	subi	r28, 0x12	; 18
    3d0e:	d3 40       	sbci	r29, 0x03	; 3
    3d10:	cd 5e       	subi	r28, 0xED	; 237
    3d12:	dc 4f       	sbci	r29, 0xFC	; 252
    3d14:	98 81       	ld	r25, Y
    3d16:	c3 51       	subi	r28, 0x13	; 19
    3d18:	d3 40       	sbci	r29, 0x03	; 3
    3d1a:	c6 54       	subi	r28, 0x46	; 70
    3d1c:	dd 4f       	sbci	r29, 0xFD	; 253
    3d1e:	a8 80       	ld	r10, Y
    3d20:	ca 5b       	subi	r28, 0xBA	; 186
    3d22:	d2 40       	sbci	r29, 0x02	; 2
    3d24:	c5 54       	subi	r28, 0x45	; 69
    3d26:	dd 4f       	sbci	r29, 0xFD	; 253
    3d28:	b8 80       	ld	r11, Y
    3d2a:	cb 5b       	subi	r28, 0xBB	; 187
    3d2c:	d2 40       	sbci	r29, 0x02	; 2
    3d2e:	c4 54       	subi	r28, 0x44	; 68
    3d30:	dd 4f       	sbci	r29, 0xFD	; 253
    3d32:	c8 80       	ld	r12, Y
    3d34:	cc 5b       	subi	r28, 0xBC	; 188
    3d36:	d2 40       	sbci	r29, 0x02	; 2
    3d38:	c3 54       	subi	r28, 0x43	; 67
    3d3a:	dd 4f       	sbci	r29, 0xFD	; 253
    3d3c:	d8 80       	ld	r13, Y
    3d3e:	cd 5b       	subi	r28, 0xBD	; 189
    3d40:	d2 40       	sbci	r29, 0x02	; 2
    3d42:	c2 54       	subi	r28, 0x42	; 66
    3d44:	dd 4f       	sbci	r29, 0xFD	; 253
    3d46:	e8 80       	ld	r14, Y
    3d48:	ce 5b       	subi	r28, 0xBE	; 190
    3d4a:	d2 40       	sbci	r29, 0x02	; 2
    3d4c:	c1 54       	subi	r28, 0x41	; 65
    3d4e:	dd 4f       	sbci	r29, 0xFD	; 253
    3d50:	f8 80       	ld	r15, Y
    3d52:	cf 5b       	subi	r28, 0xBF	; 191
    3d54:	d2 40       	sbci	r29, 0x02	; 2
    3d56:	c0 54       	subi	r28, 0x40	; 64
    3d58:	dd 4f       	sbci	r29, 0xFD	; 253
    3d5a:	08 81       	ld	r16, Y
    3d5c:	c0 5c       	subi	r28, 0xC0	; 192
    3d5e:	d2 40       	sbci	r29, 0x02	; 2
    3d60:	cf 53       	subi	r28, 0x3F	; 63
    3d62:	dd 4f       	sbci	r29, 0xFD	; 253
    3d64:	18 81       	ld	r17, Y
    3d66:	c1 5c       	subi	r28, 0xC1	; 193
    3d68:	d2 40       	sbci	r29, 0x02	; 2
    3d6a:	0e 94 05 3e 	call	0x7c0a	; 0x7c0a <__adddi3>
    3d6e:	20 af       	std	Z+56, r18	; 0x38
    3d70:	31 af       	std	Z+57, r19	; 0x39
    3d72:	42 af       	std	Z+58, r20	; 0x3a
    3d74:	53 af       	std	Z+59, r21	; 0x3b
    3d76:	64 af       	std	Z+60, r22	; 0x3c
    3d78:	75 af       	std	Z+61, r23	; 0x3d
    3d7a:	86 af       	std	Z+62, r24	; 0x3e
    3d7c:	97 af       	std	Z+63, r25	; 0x3f
}
    3d7e:	cd 5e       	subi	r28, 0xED	; 237
    3d80:	dc 4f       	sbci	r29, 0xFC	; 252
    3d82:	0f b6       	in	r0, 0x3f	; 63
    3d84:	f8 94       	cli
    3d86:	de bf       	out	0x3e, r29	; 62
    3d88:	0f be       	out	0x3f, r0	; 63
    3d8a:	cd bf       	out	0x3d, r28	; 61
    3d8c:	df 91       	pop	r29
    3d8e:	cf 91       	pop	r28
    3d90:	1f 91       	pop	r17
    3d92:	0f 91       	pop	r16
    3d94:	ff 90       	pop	r15
    3d96:	ef 90       	pop	r14
    3d98:	df 90       	pop	r13
    3d9a:	cf 90       	pop	r12
    3d9c:	bf 90       	pop	r11
    3d9e:	af 90       	pop	r10
    3da0:	9f 90       	pop	r9
    3da2:	8f 90       	pop	r8
    3da4:	7f 90       	pop	r7
    3da6:	6f 90       	pop	r6
    3da8:	5f 90       	pop	r5
    3daa:	4f 90       	pop	r4
    3dac:	3f 90       	pop	r3
    3dae:	2f 90       	pop	r2
    3db0:	08 95       	ret

00003db2 <clearM64>:
/** Clear the message buffer.
  * \param hs The hash state to act on.
  */
void clearM64(HashState64 *hs)
{
	hs->index_m = 0;
    3db2:	fc 01       	movw	r30, r24
    3db4:	e0 5c       	subi	r30, 0xC0	; 192
    3db6:	ff 4f       	sbci	r31, 0xFF	; 255
    3db8:	10 82       	st	Z, r1
	hs->byte_position_m = 0;
    3dba:	31 96       	adiw	r30, 0x01	; 1
    3dbc:	10 82       	st	Z, r1
	memset(hs->m, 0, sizeof(hs->m));
    3dbe:	31 96       	adiw	r30, 0x01	; 1
    3dc0:	20 e8       	ldi	r18, 0x80	; 128
    3dc2:	df 01       	movw	r26, r30
    3dc4:	1d 92       	st	X+, r1
    3dc6:	2a 95       	dec	r18
    3dc8:	e9 f7       	brne	.-6      	; 0x3dc4 <clearM64+0x12>
    3dca:	08 95       	ret

00003dcc <sha512Begin>:
/** Begin calculating hash for new message.
  * See section 5.3.5 of FIPS PUB 180-4.
  * \param hs64 The 64 bit hash state to initialise.
  */
static void sha512Begin(HashState64 *hs64)
{
    3dcc:	fc 01       	movw	r30, r24
	hs64->message_length = 0;
    3dce:	dc 01       	movw	r26, r24
    3dd0:	ae 53       	subi	r26, 0x3E	; 62
    3dd2:	bf 4f       	sbci	r27, 0xFF	; 255
    3dd4:	1d 92       	st	X+, r1
    3dd6:	1d 92       	st	X+, r1
    3dd8:	1d 92       	st	X+, r1
    3dda:	1c 92       	st	X, r1
    3ddc:	13 97       	sbiw	r26, 0x03	; 3
	hs64->h[0] = 0x6a09e667f3bcc908;
    3dde:	88 e0       	ldi	r24, 0x08	; 8
    3de0:	80 83       	st	Z, r24
    3de2:	89 ec       	ldi	r24, 0xC9	; 201
    3de4:	81 83       	std	Z+1, r24	; 0x01
    3de6:	8c eb       	ldi	r24, 0xBC	; 188
    3de8:	82 83       	std	Z+2, r24	; 0x02
    3dea:	23 ef       	ldi	r18, 0xF3	; 243
    3dec:	23 83       	std	Z+3, r18	; 0x03
    3dee:	97 e6       	ldi	r25, 0x67	; 103
    3df0:	94 83       	std	Z+4, r25	; 0x04
    3df2:	86 ee       	ldi	r24, 0xE6	; 230
    3df4:	85 83       	std	Z+5, r24	; 0x05
    3df6:	39 e0       	ldi	r19, 0x09	; 9
    3df8:	36 83       	std	Z+6, r19	; 0x06
    3dfa:	3a e6       	ldi	r19, 0x6A	; 106
    3dfc:	37 83       	std	Z+7, r19	; 0x07
	hs64->h[1] = 0xbb67ae8584caa73b;
    3dfe:	3b e3       	ldi	r19, 0x3B	; 59
    3e00:	30 87       	std	Z+8, r19	; 0x08
    3e02:	37 ea       	ldi	r19, 0xA7	; 167
    3e04:	31 87       	std	Z+9, r19	; 0x09
    3e06:	3a ec       	ldi	r19, 0xCA	; 202
    3e08:	32 87       	std	Z+10, r19	; 0x0a
    3e0a:	34 e8       	ldi	r19, 0x84	; 132
    3e0c:	33 87       	std	Z+11, r19	; 0x0b
    3e0e:	35 e8       	ldi	r19, 0x85	; 133
    3e10:	34 87       	std	Z+12, r19	; 0x0c
    3e12:	3e ea       	ldi	r19, 0xAE	; 174
    3e14:	35 87       	std	Z+13, r19	; 0x0d
    3e16:	96 87       	std	Z+14, r25	; 0x0e
    3e18:	9b eb       	ldi	r25, 0xBB	; 187
    3e1a:	97 87       	std	Z+15, r25	; 0x0f
	hs64->h[2] = 0x3c6ef372fe94f82b;
    3e1c:	9b e2       	ldi	r25, 0x2B	; 43
    3e1e:	90 8b       	std	Z+16, r25	; 0x10
    3e20:	38 ef       	ldi	r19, 0xF8	; 248
    3e22:	31 8b       	std	Z+17, r19	; 0x11
    3e24:	34 e9       	ldi	r19, 0x94	; 148
    3e26:	32 8b       	std	Z+18, r19	; 0x12
    3e28:	3e ef       	ldi	r19, 0xFE	; 254
    3e2a:	33 8b       	std	Z+19, r19	; 0x13
    3e2c:	32 e7       	ldi	r19, 0x72	; 114
    3e2e:	34 8b       	std	Z+20, r19	; 0x14
    3e30:	25 8b       	std	Z+21, r18	; 0x15
    3e32:	2e e6       	ldi	r18, 0x6E	; 110
    3e34:	26 8b       	std	Z+22, r18	; 0x16
    3e36:	2c e3       	ldi	r18, 0x3C	; 60
    3e38:	27 8b       	std	Z+23, r18	; 0x17
	hs64->h[3] = 0xa54ff53a5f1d36f1;
    3e3a:	21 ef       	ldi	r18, 0xF1	; 241
    3e3c:	20 8f       	std	Z+24, r18	; 0x18
    3e3e:	26 e3       	ldi	r18, 0x36	; 54
    3e40:	21 8f       	std	Z+25, r18	; 0x19
    3e42:	2d e1       	ldi	r18, 0x1D	; 29
    3e44:	22 8f       	std	Z+26, r18	; 0x1a
    3e46:	2f e5       	ldi	r18, 0x5F	; 95
    3e48:	23 8f       	std	Z+27, r18	; 0x1b
    3e4a:	2a e3       	ldi	r18, 0x3A	; 58
    3e4c:	24 8f       	std	Z+28, r18	; 0x1c
    3e4e:	25 ef       	ldi	r18, 0xF5	; 245
    3e50:	25 8f       	std	Z+29, r18	; 0x1d
    3e52:	2f e4       	ldi	r18, 0x4F	; 79
    3e54:	26 8f       	std	Z+30, r18	; 0x1e
    3e56:	25 ea       	ldi	r18, 0xA5	; 165
    3e58:	27 8f       	std	Z+31, r18	; 0x1f
	hs64->h[4] = 0x510e527fade682d1;
    3e5a:	21 ed       	ldi	r18, 0xD1	; 209
    3e5c:	20 a3       	std	Z+32, r18	; 0x20
    3e5e:	22 e8       	ldi	r18, 0x82	; 130
    3e60:	21 a3       	std	Z+33, r18	; 0x21
    3e62:	82 a3       	std	Z+34, r24	; 0x22
    3e64:	8d ea       	ldi	r24, 0xAD	; 173
    3e66:	83 a3       	std	Z+35, r24	; 0x23
    3e68:	8f e7       	ldi	r24, 0x7F	; 127
    3e6a:	84 a3       	std	Z+36, r24	; 0x24
    3e6c:	82 e5       	ldi	r24, 0x52	; 82
    3e6e:	85 a3       	std	Z+37, r24	; 0x25
    3e70:	8e e0       	ldi	r24, 0x0E	; 14
    3e72:	86 a3       	std	Z+38, r24	; 0x26
    3e74:	81 e5       	ldi	r24, 0x51	; 81
    3e76:	87 a3       	std	Z+39, r24	; 0x27
	hs64->h[5] = 0x9b05688c2b3e6c1f;
    3e78:	8f e1       	ldi	r24, 0x1F	; 31
    3e7a:	80 a7       	std	Z+40, r24	; 0x28
    3e7c:	2c e6       	ldi	r18, 0x6C	; 108
    3e7e:	21 a7       	std	Z+41, r18	; 0x29
    3e80:	2e e3       	ldi	r18, 0x3E	; 62
    3e82:	22 a7       	std	Z+42, r18	; 0x2a
    3e84:	93 a7       	std	Z+43, r25	; 0x2b
    3e86:	9c e8       	ldi	r25, 0x8C	; 140
    3e88:	94 a7       	std	Z+44, r25	; 0x2c
    3e8a:	98 e6       	ldi	r25, 0x68	; 104
    3e8c:	95 a7       	std	Z+45, r25	; 0x2d
    3e8e:	95 e0       	ldi	r25, 0x05	; 5
    3e90:	96 a7       	std	Z+46, r25	; 0x2e
    3e92:	9b e9       	ldi	r25, 0x9B	; 155
    3e94:	97 a7       	std	Z+47, r25	; 0x2f
	hs64->h[6] = 0x1f83d9abfb41bd6b;
    3e96:	9b e6       	ldi	r25, 0x6B	; 107
    3e98:	90 ab       	std	Z+48, r25	; 0x30
    3e9a:	9d eb       	ldi	r25, 0xBD	; 189
    3e9c:	91 ab       	std	Z+49, r25	; 0x31
    3e9e:	91 e4       	ldi	r25, 0x41	; 65
    3ea0:	92 ab       	std	Z+50, r25	; 0x32
    3ea2:	9b ef       	ldi	r25, 0xFB	; 251
    3ea4:	93 ab       	std	Z+51, r25	; 0x33
    3ea6:	9b ea       	ldi	r25, 0xAB	; 171
    3ea8:	94 ab       	std	Z+52, r25	; 0x34
    3eaa:	99 ed       	ldi	r25, 0xD9	; 217
    3eac:	95 ab       	std	Z+53, r25	; 0x35
    3eae:	93 e8       	ldi	r25, 0x83	; 131
    3eb0:	96 ab       	std	Z+54, r25	; 0x36
    3eb2:	87 ab       	std	Z+55, r24	; 0x37
	hs64->h[7] = 0x5be0cd19137e2179;
    3eb4:	89 e7       	ldi	r24, 0x79	; 121
    3eb6:	80 af       	std	Z+56, r24	; 0x38
    3eb8:	81 e2       	ldi	r24, 0x21	; 33
    3eba:	81 af       	std	Z+57, r24	; 0x39
    3ebc:	8e e7       	ldi	r24, 0x7E	; 126
    3ebe:	82 af       	std	Z+58, r24	; 0x3a
    3ec0:	83 e1       	ldi	r24, 0x13	; 19
    3ec2:	83 af       	std	Z+59, r24	; 0x3b
    3ec4:	89 e1       	ldi	r24, 0x19	; 25
    3ec6:	84 af       	std	Z+60, r24	; 0x3c
    3ec8:	8d ec       	ldi	r24, 0xCD	; 205
    3eca:	85 af       	std	Z+61, r24	; 0x3d
    3ecc:	80 ee       	ldi	r24, 0xE0	; 224
    3ece:	86 af       	std	Z+62, r24	; 0x3e
    3ed0:	8b e5       	ldi	r24, 0x5B	; 91
    3ed2:	87 af       	std	Z+63, r24	; 0x3f
	clearM64(hs64);
    3ed4:	cf 01       	movw	r24, r30
    3ed6:	6d cf       	rjmp	.-294    	; 0x3db2 <clearM64>
    3ed8:	08 95       	ret

00003eda <sha512WriteByte>:
  * if the message buffer is full.
  * \param hs64 The 64 bit hash state to act on.
  * \param byte The byte to add.
  */
static void sha512WriteByte(HashState64 *hs64, const uint8_t byte)
{
    3eda:	ff 92       	push	r15
    3edc:	0f 93       	push	r16
    3ede:	1f 93       	push	r17
    3ee0:	cf 93       	push	r28
    3ee2:	df 93       	push	r29
    3ee4:	dc 01       	movw	r26, r24
    3ee6:	26 2f       	mov	r18, r22
	unsigned int pos;
	unsigned int shift_amount;

	hs64->message_length++;
    3ee8:	fc 01       	movw	r30, r24
    3eea:	ee 53       	subi	r30, 0x3E	; 62
    3eec:	ff 4f       	sbci	r31, 0xFF	; 255
    3eee:	40 81       	ld	r20, Z
    3ef0:	51 81       	ldd	r21, Z+1	; 0x01
    3ef2:	62 81       	ldd	r22, Z+2	; 0x02
    3ef4:	73 81       	ldd	r23, Z+3	; 0x03
    3ef6:	4f 5f       	subi	r20, 0xFF	; 255
    3ef8:	5f 4f       	sbci	r21, 0xFF	; 255
    3efa:	6f 4f       	sbci	r22, 0xFF	; 255
    3efc:	7f 4f       	sbci	r23, 0xFF	; 255
    3efe:	40 83       	st	Z, r20
    3f00:	51 83       	std	Z+1, r21	; 0x01
    3f02:	62 83       	std	Z+2, r22	; 0x02
    3f04:	73 83       	std	Z+3, r23	; 0x03
	pos = (unsigned int)(7 - hs64->byte_position_m);
    3f06:	e1 58       	subi	r30, 0x81	; 129
    3f08:	f1 09       	sbc	r31, r1
    3f0a:	c0 81       	ld	r28, Z
	shift_amount = pos << 3;
	hs64->m[hs64->index_m] |= ((uint64_t)byte << shift_amount);
    3f0c:	31 97       	sbiw	r30, 0x01	; 1
    3f0e:	f0 80       	ld	r15, Z
    3f10:	fc 01       	movw	r30, r24
    3f12:	88 e0       	ldi	r24, 0x08	; 8
    3f14:	f8 9e       	mul	r15, r24
    3f16:	e0 0d       	add	r30, r0
    3f18:	f1 1d       	adc	r31, r1
    3f1a:	11 24       	eor	r1, r1
    3f1c:	ee 5b       	subi	r30, 0xBE	; 190
    3f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f20:	07 e0       	ldi	r16, 0x07	; 7
    3f22:	10 e0       	ldi	r17, 0x00	; 0
    3f24:	0c 1b       	sub	r16, r28
    3f26:	11 09       	sbc	r17, r1
    3f28:	00 0f       	add	r16, r16
    3f2a:	11 1f       	adc	r17, r17
    3f2c:	00 0f       	add	r16, r16
    3f2e:	11 1f       	adc	r17, r17
    3f30:	00 0f       	add	r16, r16
    3f32:	11 1f       	adc	r17, r17
    3f34:	30 e0       	ldi	r19, 0x00	; 0
    3f36:	40 e0       	ldi	r20, 0x00	; 0
    3f38:	50 e0       	ldi	r21, 0x00	; 0
    3f3a:	60 e0       	ldi	r22, 0x00	; 0
    3f3c:	70 e0       	ldi	r23, 0x00	; 0
    3f3e:	80 e0       	ldi	r24, 0x00	; 0
    3f40:	90 e0       	ldi	r25, 0x00	; 0
    3f42:	0e 94 b3 3d 	call	0x7b66	; 0x7b66 <__ashldi3>
    3f46:	d0 81       	ld	r29, Z
    3f48:	2d 2b       	or	r18, r29
    3f4a:	d1 81       	ldd	r29, Z+1	; 0x01
    3f4c:	3d 2b       	or	r19, r29
    3f4e:	d2 81       	ldd	r29, Z+2	; 0x02
    3f50:	4d 2b       	or	r20, r29
    3f52:	d3 81       	ldd	r29, Z+3	; 0x03
    3f54:	5d 2b       	or	r21, r29
    3f56:	d4 81       	ldd	r29, Z+4	; 0x04
    3f58:	6d 2b       	or	r22, r29
    3f5a:	d5 81       	ldd	r29, Z+5	; 0x05
    3f5c:	7d 2b       	or	r23, r29
    3f5e:	d6 81       	ldd	r29, Z+6	; 0x06
    3f60:	8d 2b       	or	r24, r29
    3f62:	d7 81       	ldd	r29, Z+7	; 0x07
    3f64:	9d 2b       	or	r25, r29
    3f66:	20 83       	st	Z, r18
    3f68:	31 83       	std	Z+1, r19	; 0x01
    3f6a:	42 83       	std	Z+2, r20	; 0x02
    3f6c:	53 83       	std	Z+3, r21	; 0x03
    3f6e:	64 83       	std	Z+4, r22	; 0x04
    3f70:	75 83       	std	Z+5, r23	; 0x05
    3f72:	86 83       	std	Z+6, r24	; 0x06
    3f74:	97 83       	std	Z+7, r25	; 0x07

	if (hs64->byte_position_m == 7)
    3f76:	c7 30       	cpi	r28, 0x07	; 7
    3f78:	29 f4       	brne	.+10     	; 0x3f84 <sha512WriteByte+0xaa>
	{
		hs64->index_m++;
    3f7a:	fd 01       	movw	r30, r26
    3f7c:	e0 5c       	subi	r30, 0xC0	; 192
    3f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f80:	f3 94       	inc	r15
    3f82:	f0 82       	st	Z, r15
	}
	hs64->byte_position_m = (uint8_t)((hs64->byte_position_m + 1) & 7);
    3f84:	fd 01       	movw	r30, r26
    3f86:	ef 5b       	subi	r30, 0xBF	; 191
    3f88:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8a:	cf 5f       	subi	r28, 0xFF	; 255
    3f8c:	c7 70       	andi	r28, 0x07	; 7
    3f8e:	c0 83       	st	Z, r28
	if (hs64->index_m == 16)
    3f90:	31 97       	sbiw	r30, 0x01	; 1
    3f92:	80 81       	ld	r24, Z
    3f94:	80 31       	cpi	r24, 0x10	; 16
    3f96:	31 f4       	brne	.+12     	; 0x3fa4 <sha512WriteByte+0xca>
    3f98:	ed 01       	movw	r28, r26
	{
		sha512Block(hs64);
    3f9a:	cd 01       	movw	r24, r26
    3f9c:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <sha512Block>
		clearM64(hs64);
    3fa0:	ce 01       	movw	r24, r28
    3fa2:	07 df       	rcall	.-498    	; 0x3db2 <clearM64>
	}
}
    3fa4:	df 91       	pop	r29
    3fa6:	cf 91       	pop	r28
    3fa8:	1f 91       	pop	r17
    3faa:	0f 91       	pop	r16
    3fac:	ff 90       	pop	r15
    3fae:	08 95       	ret

00003fb0 <sha512Finish>:
  * \param out A byte array where the final SHA-512 hash value will be written
  *            into. This must have space for #SHA512_HASH_LENGTH bytes.
  * \param hs64 The 64 bit hash state to act on.
  */
static void sha512Finish(uint8_t *out, HashState64 *hs64)
{
    3fb0:	6f 92       	push	r6
    3fb2:	7f 92       	push	r7
    3fb4:	8f 92       	push	r8
    3fb6:	9f 92       	push	r9
    3fb8:	af 92       	push	r10
    3fba:	bf 92       	push	r11
    3fbc:	cf 92       	push	r12
    3fbe:	df 92       	push	r13
    3fc0:	ef 92       	push	r14
    3fc2:	ff 92       	push	r15
    3fc4:	0f 93       	push	r16
    3fc6:	1f 93       	push	r17
    3fc8:	cf 93       	push	r28
    3fca:	df 93       	push	r29
    3fcc:	cd b7       	in	r28, 0x3d	; 61
    3fce:	de b7       	in	r29, 0x3e	; 62
    3fd0:	60 97       	sbiw	r28, 0x10	; 16
    3fd2:	0f b6       	in	r0, 0x3f	; 63
    3fd4:	f8 94       	cli
    3fd6:	de bf       	out	0x3e, r29	; 62
    3fd8:	0f be       	out	0x3f, r0	; 63
    3fda:	cd bf       	out	0x3d, r28	; 61
    3fdc:	68 2e       	mov	r6, r24
    3fde:	79 2e       	mov	r7, r25
    3fe0:	8b 01       	movw	r16, r22
	uint8_t buffer[16];

	// Subsequent calls to sha512WriteByte() will keep incrementing
	// message_length, so the calculation of length (in bits) must be
	// done before padding.
	length_bits = hs64->message_length << 3;
    3fe2:	fb 01       	movw	r30, r22
    3fe4:	ee 53       	subi	r30, 0x3E	; 62
    3fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe8:	80 80       	ld	r8, Z
    3fea:	91 80       	ldd	r9, Z+1	; 0x01
    3fec:	a2 80       	ldd	r10, Z+2	; 0x02
    3fee:	b3 80       	ldd	r11, Z+3	; 0x03
    3ff0:	88 0c       	add	r8, r8
    3ff2:	99 1c       	adc	r9, r9
    3ff4:	aa 1c       	adc	r10, r10
    3ff6:	bb 1c       	adc	r11, r11
    3ff8:	88 0c       	add	r8, r8
    3ffa:	99 1c       	adc	r9, r9
    3ffc:	aa 1c       	adc	r10, r10
    3ffe:	bb 1c       	adc	r11, r11
    4000:	88 0c       	add	r8, r8
    4002:	99 1c       	adc	r9, r9
    4004:	aa 1c       	adc	r10, r10
    4006:	bb 1c       	adc	r11, r11

	// Pad using a 1 bit followed by enough 0 bits to get the message buffer
	// to exactly 896 bits full.
	sha512WriteByte(hs64, (uint8_t)0x80);
    4008:	60 e8       	ldi	r22, 0x80	; 128
    400a:	c8 01       	movw	r24, r16
    400c:	66 df       	rcall	.-308    	; 0x3eda <sha512WriteByte>
	while ((hs64->index_m != 14) || (hs64->byte_position_m != 0))
    400e:	78 01       	movw	r14, r16
    4010:	80 e4       	ldi	r24, 0x40	; 64
    4012:	e8 0e       	add	r14, r24
    4014:	f1 1c       	adc	r15, r1
    4016:	68 01       	movw	r12, r16
    4018:	91 e4       	ldi	r25, 0x41	; 65
    401a:	c9 0e       	add	r12, r25
    401c:	d1 1c       	adc	r13, r1
    401e:	03 c0       	rjmp	.+6      	; 0x4026 <sha512Finish+0x76>
	{
		sha512WriteByte(hs64, 0);
    4020:	60 e0       	ldi	r22, 0x00	; 0
    4022:	c8 01       	movw	r24, r16
    4024:	5a df       	rcall	.-332    	; 0x3eda <sha512WriteByte>
	length_bits = hs64->message_length << 3;

	// Pad using a 1 bit followed by enough 0 bits to get the message buffer
	// to exactly 896 bits full.
	sha512WriteByte(hs64, (uint8_t)0x80);
	while ((hs64->index_m != 14) || (hs64->byte_position_m != 0))
    4026:	f7 01       	movw	r30, r14
    4028:	80 81       	ld	r24, Z
    402a:	8e 30       	cpi	r24, 0x0E	; 14
    402c:	c9 f7       	brne	.-14     	; 0x4020 <sha512Finish+0x70>
    402e:	f6 01       	movw	r30, r12
    4030:	80 81       	ld	r24, Z
    4032:	81 11       	cpse	r24, r1
    4034:	f5 cf       	rjmp	.-22     	; 0x4020 <sha512Finish+0x70>
	{
		sha512WriteByte(hs64, 0);
	}
	// Write 128 bit length (in bits).
	memset(buffer, 0, 16);
    4036:	ce 01       	movw	r24, r28
    4038:	01 96       	adiw	r24, 0x01	; 1
    403a:	7c 01       	movw	r14, r24
    403c:	80 e1       	ldi	r24, 0x10	; 16
    403e:	f7 01       	movw	r30, r14
    4040:	11 92       	st	Z+, r1
    4042:	8a 95       	dec	r24
    4044:	e9 f7       	brne	.-6      	; 0x4040 <sha512Finish+0x90>
	writeU32BigEndian(&(buffer[12]), length_bits);
    4046:	b5 01       	movw	r22, r10
    4048:	a4 01       	movw	r20, r8
    404a:	ce 01       	movw	r24, r28
    404c:	0d 96       	adiw	r24, 0x0d	; 13
    404e:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <writeU32BigEndian>
    4052:	6e 01       	movw	r12, r28
    4054:	f1 e1       	ldi	r31, 0x11	; 17
    4056:	cf 0e       	add	r12, r31
    4058:	d1 1c       	adc	r13, r1
	for (i = 0; i < 16; i++)
	{
		sha512WriteByte(hs64, buffer[i]);
    405a:	f7 01       	movw	r30, r14
    405c:	61 91       	ld	r22, Z+
    405e:	7f 01       	movw	r14, r30
    4060:	c8 01       	movw	r24, r16
    4062:	3b df       	rcall	.-394    	; 0x3eda <sha512WriteByte>
		sha512WriteByte(hs64, 0);
	}
	// Write 128 bit length (in bits).
	memset(buffer, 0, 16);
	writeU32BigEndian(&(buffer[12]), length_bits);
	for (i = 0; i < 16; i++)
    4064:	ec 14       	cp	r14, r12
    4066:	fd 04       	cpc	r15, r13
    4068:	c1 f7       	brne	.-16     	; 0x405a <sha512Finish+0xaa>
    406a:	c6 2c       	mov	r12, r6
    406c:	d7 2c       	mov	r13, r7
    406e:	78 01       	movw	r14, r16
    4070:	48 01       	movw	r8, r16
    4072:	f0 e4       	ldi	r31, 0x40	; 64
    4074:	8f 0e       	add	r8, r31
    4076:	91 1c       	adc	r9, r1
    4078:	57 01       	movw	r10, r14
	{
		sha512WriteByte(hs64, buffer[i]);
	}
	for (i = 0; i < 8; i++)
	{
		writeU32BigEndian(&(out[i * 8]), (uint32_t)(hs64->h[i] >> 32));
    407a:	f7 01       	movw	r30, r14
    407c:	20 81       	ld	r18, Z
    407e:	31 81       	ldd	r19, Z+1	; 0x01
    4080:	42 81       	ldd	r20, Z+2	; 0x02
    4082:	53 81       	ldd	r21, Z+3	; 0x03
    4084:	64 81       	ldd	r22, Z+4	; 0x04
    4086:	75 81       	ldd	r23, Z+5	; 0x05
    4088:	86 81       	ldd	r24, Z+6	; 0x06
    408a:	97 81       	ldd	r25, Z+7	; 0x07
    408c:	00 e2       	ldi	r16, 0x20	; 32
    408e:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <__lshrdi3>
    4092:	64 2f       	mov	r22, r20
    4094:	75 2f       	mov	r23, r21
    4096:	42 2f       	mov	r20, r18
    4098:	53 2f       	mov	r21, r19
    409a:	c6 01       	movw	r24, r12
    409c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <writeU32BigEndian>
    40a0:	f8 e0       	ldi	r31, 0x08	; 8
    40a2:	ef 0e       	add	r14, r31
    40a4:	f1 1c       	adc	r15, r1
		writeU32BigEndian(&(out[i * 8 + 4]), (uint32_t)hs64->h[i]);
    40a6:	f5 01       	movw	r30, r10
    40a8:	40 81       	ld	r20, Z
    40aa:	51 81       	ldd	r21, Z+1	; 0x01
    40ac:	62 81       	ldd	r22, Z+2	; 0x02
    40ae:	73 81       	ldd	r23, Z+3	; 0x03
    40b0:	c6 01       	movw	r24, r12
    40b2:	04 96       	adiw	r24, 0x04	; 4
    40b4:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <writeU32BigEndian>
    40b8:	f8 e0       	ldi	r31, 0x08	; 8
    40ba:	cf 0e       	add	r12, r31
    40bc:	d1 1c       	adc	r13, r1
	writeU32BigEndian(&(buffer[12]), length_bits);
	for (i = 0; i < 16; i++)
	{
		sha512WriteByte(hs64, buffer[i]);
	}
	for (i = 0; i < 8; i++)
    40be:	e8 14       	cp	r14, r8
    40c0:	f9 04       	cpc	r15, r9
    40c2:	d1 f6       	brne	.-76     	; 0x4078 <sha512Finish+0xc8>
	{
		writeU32BigEndian(&(out[i * 8]), (uint32_t)(hs64->h[i] >> 32));
		writeU32BigEndian(&(out[i * 8 + 4]), (uint32_t)hs64->h[i]);
	}
}
    40c4:	60 96       	adiw	r28, 0x10	; 16
    40c6:	0f b6       	in	r0, 0x3f	; 63
    40c8:	f8 94       	cli
    40ca:	de bf       	out	0x3e, r29	; 62
    40cc:	0f be       	out	0x3f, r0	; 63
    40ce:	cd bf       	out	0x3d, r28	; 61
    40d0:	df 91       	pop	r29
    40d2:	cf 91       	pop	r28
    40d4:	1f 91       	pop	r17
    40d6:	0f 91       	pop	r16
    40d8:	ff 90       	pop	r15
    40da:	ef 90       	pop	r14
    40dc:	df 90       	pop	r13
    40de:	cf 90       	pop	r12
    40e0:	bf 90       	pop	r11
    40e2:	af 90       	pop	r10
    40e4:	9f 90       	pop	r9
    40e6:	8f 90       	pop	r8
    40e8:	7f 90       	pop	r7
    40ea:	6f 90       	pop	r6
    40ec:	08 95       	ret

000040ee <hmacSha512>:
  * \param text A byte array containing the message to use in the HMAC-SHA512
  *             calculation. The message can be of any length.
  * \param text_length The length, in bytes, of the message.
  */
void hmacSha512(uint8_t *out, const uint8_t *key, const unsigned int key_length, const uint8_t *text, const unsigned int text_length)
{
    40ee:	5f 92       	push	r5
    40f0:	6f 92       	push	r6
    40f2:	7f 92       	push	r7
    40f4:	8f 92       	push	r8
    40f6:	9f 92       	push	r9
    40f8:	af 92       	push	r10
    40fa:	bf 92       	push	r11
    40fc:	cf 92       	push	r12
    40fe:	df 92       	push	r13
    4100:	ef 92       	push	r14
    4102:	ff 92       	push	r15
    4104:	0f 93       	push	r16
    4106:	1f 93       	push	r17
    4108:	cf 93       	push	r28
    410a:	df 93       	push	r29
    410c:	cd b7       	in	r28, 0x3d	; 61
    410e:	de b7       	in	r29, 0x3e	; 62
    4110:	c6 58       	subi	r28, 0x86	; 134
    4112:	d1 40       	sbci	r29, 0x01	; 1
    4114:	0f b6       	in	r0, 0x3f	; 63
    4116:	f8 94       	cli
    4118:	de bf       	out	0x3e, r29	; 62
    411a:	0f be       	out	0x3f, r0	; 63
    411c:	cd bf       	out	0x3d, r28	; 61
    411e:	4c 01       	movw	r8, r24
    4120:	5b 01       	movw	r10, r22
    4122:	6a 01       	movw	r12, r20
    4124:	39 01       	movw	r6, r18
	uint8_t hash[SHA512_HASH_LENGTH];
	uint8_t padded_key[128];
	HashState64 hs64;

	// Determine key.
	memset(padded_key, 0, sizeof(padded_key));
    4126:	fe 01       	movw	r30, r28
    4128:	ef 5b       	subi	r30, 0xBF	; 191
    412a:	ff 4f       	sbci	r31, 0xFF	; 255
    412c:	80 e8       	ldi	r24, 0x80	; 128
    412e:	df 01       	movw	r26, r30
    4130:	1d 92       	st	X+, r1
    4132:	8a 95       	dec	r24
    4134:	e9 f7       	brne	.-6      	; 0x4130 <hmacSha512+0x42>
	if (key_length <= sizeof(padded_key))
    4136:	41 38       	cpi	r20, 0x81	; 129
    4138:	51 05       	cpc	r21, r1
    413a:	20 f4       	brcc	.+8      	; 0x4144 <hmacSha512+0x56>
	{
		memcpy(padded_key, key, key_length);
    413c:	cf 01       	movw	r24, r30
    413e:	0e 94 83 3e 	call	0x7d06	; 0x7d06 <memcpy>
    4142:	1b c0       	rjmp	.+54     	; 0x417a <hmacSha512+0x8c>
	}
	else
	{
		sha512Begin(&hs64);
    4144:	ce 01       	movw	r24, r28
    4146:	8f 53       	subi	r24, 0x3F	; 63
    4148:	9f 4f       	sbci	r25, 0xFF	; 255
    414a:	40 de       	rcall	.-896    	; 0x3dcc <sha512Begin>
		for (i = 0; i < key_length; i++)
    414c:	c1 14       	cp	r12, r1
    414e:	d1 04       	cpc	r13, r1
    4150:	69 f0       	breq	.+26     	; 0x416c <hmacSha512+0x7e>
    4152:	75 01       	movw	r14, r10
    4154:	ca 0c       	add	r12, r10
    4156:	db 1c       	adc	r13, r11
		{
			sha512WriteByte(&hs64, key[i]);
    4158:	f7 01       	movw	r30, r14
    415a:	61 91       	ld	r22, Z+
    415c:	7f 01       	movw	r14, r30
    415e:	ce 01       	movw	r24, r28
    4160:	8f 53       	subi	r24, 0x3F	; 63
    4162:	9f 4f       	sbci	r25, 0xFF	; 255
    4164:	ba de       	rcall	.-652    	; 0x3eda <sha512WriteByte>
		memcpy(padded_key, key, key_length);
	}
	else
	{
		sha512Begin(&hs64);
		for (i = 0; i < key_length; i++)
    4166:	ce 14       	cp	r12, r14
    4168:	df 04       	cpc	r13, r15
    416a:	b1 f7       	brne	.-20     	; 0x4158 <hmacSha512+0x6a>
		{
			sha512WriteByte(&hs64, key[i]);
		}
		sha512Finish(padded_key, &hs64);
    416c:	be 01       	movw	r22, r28
    416e:	6f 53       	subi	r22, 0x3F	; 63
    4170:	7f 4f       	sbci	r23, 0xFF	; 255
    4172:	ce 01       	movw	r24, r28
    4174:	8f 5b       	subi	r24, 0xBF	; 191
    4176:	9f 4f       	sbci	r25, 0xFF	; 255
    4178:	1b df       	rcall	.-458    	; 0x3fb0 <sha512Finish>
	}
	// Calculate hash = H((K_0 XOR ipad) || text).
	sha512Begin(&hs64);
    417a:	ce 01       	movw	r24, r28
    417c:	8f 53       	subi	r24, 0x3F	; 63
    417e:	9f 4f       	sbci	r25, 0xFF	; 255
    4180:	25 de       	rcall	.-950    	; 0x3dcc <sha512Begin>
    4182:	7e 01       	movw	r14, r28
    4184:	f1 e4       	ldi	r31, 0x41	; 65
    4186:	ef 0e       	add	r14, r31
    4188:	f1 1c       	adc	r15, r1
    418a:	5e 01       	movw	r10, r28
    418c:	81 ec       	ldi	r24, 0xC1	; 193
    418e:	a8 0e       	add	r10, r24
    4190:	b1 1c       	adc	r11, r1
    4192:	67 01       	movw	r12, r14
	for (i = 0; i < sizeof(padded_key); i++)
	{
		sha512WriteByte(&hs64, (uint8_t)(padded_key[i] ^ 0x36));
    4194:	0f 2e       	mov	r0, r31
    4196:	f6 e3       	ldi	r31, 0x36	; 54
    4198:	5f 2e       	mov	r5, r31
    419a:	f0 2d       	mov	r31, r0
    419c:	d6 01       	movw	r26, r12
    419e:	6d 91       	ld	r22, X+
    41a0:	6d 01       	movw	r12, r26
    41a2:	65 25       	eor	r22, r5
    41a4:	ce 01       	movw	r24, r28
    41a6:	8f 53       	subi	r24, 0x3F	; 63
    41a8:	9f 4f       	sbci	r25, 0xFF	; 255
    41aa:	97 de       	rcall	.-722    	; 0x3eda <sha512WriteByte>
		}
		sha512Finish(padded_key, &hs64);
	}
	// Calculate hash = H((K_0 XOR ipad) || text).
	sha512Begin(&hs64);
	for (i = 0; i < sizeof(padded_key); i++)
    41ac:	ac 14       	cp	r10, r12
    41ae:	bd 04       	cpc	r11, r13
    41b0:	a9 f7       	brne	.-22     	; 0x419c <hmacSha512+0xae>
	{
		sha512WriteByte(&hs64, (uint8_t)(padded_key[i] ^ 0x36));
	}
	for (i = 0; i < text_length; i++)
    41b2:	01 15       	cp	r16, r1
    41b4:	11 05       	cpc	r17, r1
    41b6:	69 f0       	breq	.+26     	; 0x41d2 <hmacSha512+0xe4>
    41b8:	63 01       	movw	r12, r6
    41ba:	06 0d       	add	r16, r6
    41bc:	17 1d       	adc	r17, r7
	{
		sha512WriteByte(&hs64, text[i]);
    41be:	f6 01       	movw	r30, r12
    41c0:	61 91       	ld	r22, Z+
    41c2:	6f 01       	movw	r12, r30
    41c4:	ce 01       	movw	r24, r28
    41c6:	8f 53       	subi	r24, 0x3F	; 63
    41c8:	9f 4f       	sbci	r25, 0xFF	; 255
    41ca:	87 de       	rcall	.-754    	; 0x3eda <sha512WriteByte>
	sha512Begin(&hs64);
	for (i = 0; i < sizeof(padded_key); i++)
	{
		sha512WriteByte(&hs64, (uint8_t)(padded_key[i] ^ 0x36));
	}
	for (i = 0; i < text_length; i++)
    41cc:	0c 15       	cp	r16, r12
    41ce:	1d 05       	cpc	r17, r13
	{
		sha512WriteByte(&hs64, text[i]);
	}
	sha512Finish(hash, &hs64);
    41d0:	b1 f7       	brne	.-20     	; 0x41be <hmacSha512+0xd0>
    41d2:	be 01       	movw	r22, r28
    41d4:	6f 53       	subi	r22, 0x3F	; 63
    41d6:	7f 4f       	sbci	r23, 0xFF	; 255
    41d8:	ce 01       	movw	r24, r28
    41da:	01 96       	adiw	r24, 0x01	; 1
	// Calculate H((K_0 XOR opad) || hash).
	sha512Begin(&hs64);
    41dc:	e9 de       	rcall	.-558    	; 0x3fb0 <sha512Finish>
    41de:	ce 01       	movw	r24, r28
    41e0:	8f 53       	subi	r24, 0x3F	; 63
    41e2:	9f 4f       	sbci	r25, 0xFF	; 255
    41e4:	f3 dd       	rcall	.-1050   	; 0x3dcc <sha512Begin>
	for (i = 0; i < sizeof(padded_key); i++)
	{
		sha512WriteByte(&hs64, (uint8_t)(padded_key[i] ^ 0x5c));
    41e6:	1c e5       	ldi	r17, 0x5C	; 92
    41e8:	d7 01       	movw	r26, r14
    41ea:	6d 91       	ld	r22, X+
    41ec:	7d 01       	movw	r14, r26
    41ee:	61 27       	eor	r22, r17
    41f0:	ce 01       	movw	r24, r28
    41f2:	8f 53       	subi	r24, 0x3F	; 63
    41f4:	9f 4f       	sbci	r25, 0xFF	; 255
    41f6:	71 de       	rcall	.-798    	; 0x3eda <sha512WriteByte>
		sha512WriteByte(&hs64, text[i]);
	}
	sha512Finish(hash, &hs64);
	// Calculate H((K_0 XOR opad) || hash).
	sha512Begin(&hs64);
	for (i = 0; i < sizeof(padded_key); i++)
    41f8:	ae 14       	cp	r10, r14
    41fa:	bf 04       	cpc	r11, r15
    41fc:	a9 f7       	brne	.-22     	; 0x41e8 <hmacSha512+0xfa>
    41fe:	8e 01       	movw	r16, r28
    4200:	0f 5f       	subi	r16, 0xFF	; 255
    4202:	1f 4f       	sbci	r17, 0xFF	; 255
    4204:	7e 01       	movw	r14, r28
    4206:	b1 e4       	ldi	r27, 0x41	; 65
    4208:	eb 0e       	add	r14, r27
	{
		sha512WriteByte(&hs64, (uint8_t)(padded_key[i] ^ 0x5c));
	}
	for (i = 0; i < sizeof(hash); i++)
	{
		sha512WriteByte(&hs64, hash[i]);
    420a:	f1 1c       	adc	r15, r1
    420c:	f8 01       	movw	r30, r16
    420e:	61 91       	ld	r22, Z+
    4210:	8f 01       	movw	r16, r30
    4212:	ce 01       	movw	r24, r28
    4214:	8f 53       	subi	r24, 0x3F	; 63
    4216:	9f 4f       	sbci	r25, 0xFF	; 255
	sha512Begin(&hs64);
	for (i = 0; i < sizeof(padded_key); i++)
	{
		sha512WriteByte(&hs64, (uint8_t)(padded_key[i] ^ 0x5c));
	}
	for (i = 0; i < sizeof(hash); i++)
    4218:	60 de       	rcall	.-832    	; 0x3eda <sha512WriteByte>
    421a:	0e 15       	cp	r16, r14
    421c:	1f 05       	cpc	r17, r15
	{
		sha512WriteByte(&hs64, hash[i]);
	}
	sha512Finish(out, &hs64);
    421e:	b1 f7       	brne	.-20     	; 0x420c <hmacSha512+0x11e>
    4220:	be 01       	movw	r22, r28
    4222:	6f 53       	subi	r22, 0x3F	; 63
    4224:	7f 4f       	sbci	r23, 0xFF	; 255
    4226:	c4 01       	movw	r24, r8
    4228:	c3 de       	rcall	.-634    	; 0x3fb0 <sha512Finish>
}
    422a:	ca 57       	subi	r28, 0x7A	; 122
    422c:	de 4f       	sbci	r29, 0xFE	; 254
    422e:	0f b6       	in	r0, 0x3f	; 63
    4230:	f8 94       	cli
    4232:	de bf       	out	0x3e, r29	; 62
    4234:	0f be       	out	0x3f, r0	; 63
    4236:	cd bf       	out	0x3d, r28	; 61
    4238:	df 91       	pop	r29
    423a:	cf 91       	pop	r28
    423c:	1f 91       	pop	r17
    423e:	0f 91       	pop	r16
    4240:	ff 90       	pop	r15
    4242:	ef 90       	pop	r14
    4244:	df 90       	pop	r13
    4246:	cf 90       	pop	r12
    4248:	bf 90       	pop	r11
    424a:	af 90       	pop	r10
    424c:	9f 90       	pop	r9
    424e:	8f 90       	pop	r8
    4250:	7f 90       	pop	r7
    4252:	6f 90       	pop	r6
    4254:	5f 90       	pop	r5
    4256:	08 95       	ret

00004258 <tx0Char>:
}

// UART0 을 이용한 출력
void tx0Char(char message)
{
	while (((UCSR0A>>UDRE0)&0x01) == 0) ;  // UDRE, data register empty
    4258:	5d 9b       	sbis	0x0b, 5	; 11
    425a:	fe cf       	rjmp	.-4      	; 0x4258 <tx0Char>
	UDR0 = message;
    425c:	8c b9       	out	0x0c, r24	; 12
    425e:	08 95       	ret

00004260 <tx1Char>:
}

// UART1 을 이용한 출력
void tx1Char(char message)
{
	while (((UCSR1A>>UDRE1)&0x01) == 0) ;  // UDRE, data register empty
    4260:	eb e9       	ldi	r30, 0x9B	; 155
    4262:	f0 e0       	ldi	r31, 0x00	; 0
    4264:	90 81       	ld	r25, Z
    4266:	95 ff       	sbrs	r25, 5
    4268:	fd cf       	rjmp	.-6      	; 0x4264 <tx1Char+0x4>
	UDR1 = message;
    426a:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    426e:	08 95       	ret

00004270 <Putchar>:
//static int Putchar(char c, FILE *stream);
void tx0Char(char message);
void tx1Char(char message);

static int Putchar(char c, FILE *stream)
{
    4270:	cf 93       	push	r28
    4272:	c8 2f       	mov	r28, r24
	// UART 두 개에 다 메시지를 출력함
	tx0Char(c);
    4274:	f1 df       	rcall	.-30     	; 0x4258 <tx0Char>
	tx1Char(c);
    4276:	8c 2f       	mov	r24, r28
    4278:	f3 df       	rcall	.-26     	; 0x4260 <tx1Char>
	return 0;
}
    427a:	80 e0       	ldi	r24, 0x00	; 0
    427c:	90 e0       	ldi	r25, 0x00	; 0
    427e:	cf 91       	pop	r28
    4280:	08 95       	ret

00004282 <port_init>:
	UDR1 = message;
}

void port_init(void)
{		
	PORTA = 0x00;
    4282:	1b ba       	out	0x1b, r1	; 27
	DDRA  = 0x00;
    4284:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00;
    4286:	18 ba       	out	0x18, r1	; 24
	DDRB  = 0x00;
    4288:	17 ba       	out	0x17, r1	; 23
	PORTC = 0x00; //m103 output only
    428a:	15 ba       	out	0x15, r1	; 21
	DDRC  = 0x00;
    428c:	14 ba       	out	0x14, r1	; 20
	PORTD = 0x00;
    428e:	12 ba       	out	0x12, r1	; 18
	DDRD  = 0x00;
    4290:	11 ba       	out	0x11, r1	; 17
	PORTE = 0x00;
    4292:	13 b8       	out	0x03, r1	; 3
	DDRE  = 0x00;
    4294:	12 b8       	out	0x02, r1	; 2
	PORTF = 0x00;
    4296:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	DDRF  = 0x00;
    429a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	PORTG = 0x00;
    429e:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
	DDRG  = 0x00;
    42a2:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
    42a6:	08 95       	ret

000042a8 <uart0_init>:
// actual: baud rate:9615 (0.2%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
	UCSR0B = 0x00; //disable while setting baud rate
    42a8:	1a b8       	out	0x0a, r1	; 10
	UCSR0A = 0x00;
    42aa:	1b b8       	out	0x0b, r1	; 11
	UCSR0C = 0x06;   // 0000_0110
    42ac:	86 e0       	ldi	r24, 0x06	; 6
    42ae:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UBRR0L = 0x67; //set baud rate lo
    42b2:	87 e6       	ldi	r24, 0x67	; 103
    42b4:	89 b9       	out	0x09, r24	; 9
	UBRR0H = 0x00; //set baud rate hi
    42b6:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	//UCSR0B = 0x18;  // 수신가능
	UCSR0B= (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
    42ba:	88 e9       	ldi	r24, 0x98	; 152
    42bc:	8a b9       	out	0x0a, r24	; 10
    42be:	08 95       	ret

000042c0 <uart1_init>:
// actual baud rate:9615 (0.2%)
// char size: 8 bit
// parity: Disabled
void uart1_init(void)
{
	UCSR1B = 0x00; //disable while setting baud rate
    42c0:	ea e9       	ldi	r30, 0x9A	; 154
    42c2:	f0 e0       	ldi	r31, 0x00	; 0
    42c4:	10 82       	st	Z, r1
	UCSR1A = 0x00;
    42c6:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
	UCSR1C = 0x06;
    42ca:	86 e0       	ldi	r24, 0x06	; 6
    42cc:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	// UBRR1L = 0x2F; //set baud rate lo 7.3728 MHz
	// UBRR1L = 0x47; //set baud rate lo 11.0592 Mhz
	UBRR1L = 0x67; //set baud rate lo 16Mhz
    42d0:	87 e6       	ldi	r24, 0x67	; 103
    42d2:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	UBRR1H = 0x00; //set baud rate hi
    42d6:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UCSR1B = 0x18;
    42da:	88 e1       	ldi	r24, 0x18	; 24
    42dc:	80 83       	st	Z, r24
    42de:	08 95       	ret

000042e0 <init_devices>:

//call this routine to initialize all peripherals
void init_devices(void)
{
	//stop errant interrupts until set up
	cli(); //disable all interrupts
    42e0:	f8 94       	cli
	XMCRA = 0x00; //external memory
    42e2:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
	XMCRB = 0x00; //external memory
    42e6:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	port_init();
    42ea:	cb df       	rcall	.-106    	; 0x4282 <port_init>
	uart0_init();
    42ec:	dd df       	rcall	.-70     	; 0x42a8 <uart0_init>
	uart1_init();
    42ee:	e8 df       	rcall	.-48     	; 0x42c0 <uart1_init>
    42f0:	60 e0       	ldi	r22, 0x00	; 0
	fdevopen(Putchar,0);
    42f2:	70 e0       	ldi	r23, 0x00	; 0
    42f4:	88 e3       	ldi	r24, 0x38	; 56
    42f6:	91 e2       	ldi	r25, 0x21	; 33
    42f8:	0e 94 93 3e 	call	0x7d26	; 0x7d26 <fdevopen>
    42fc:	15 be       	out	0x35, r1	; 53
 
	MCUCR = 0x00;
    42fe:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRA = 0x00; //extended ext ints
    4302:	1a be       	out	0x3a, r1	; 58
	EICRB = 0x00; //extended ext ints
    4304:	19 be       	out	0x39, r1	; 57
	EIMSK = 0x00;
    4306:	17 be       	out	0x37, r1	; 55
	TIMSK = 0x00; //timer interrupt sources
    4308:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <__TEXT_REGION_LENGTH__+0x7e007d>
	ETIMSK = 0x00; //SREG 직접 설정 대신 모듈화 호출
    430c:	78 94       	sei
	sei(); //re-enable interrupts
    430e:	08 95       	ret

00004310 <delay_us>:
    4310:	18 16       	cp	r1, r24

// 시간 지연 함수
void delay_us(int time_us)
{
	register int i;
	for(i=0; i<time_us; i++){   // 4 cycle +
    4312:	19 06       	cpc	r1, r25
    4314:	5c f4       	brge	.+22     	; 0x432c <delay_us+0x1c>
    4316:	20 e0       	ldi	r18, 0x00	; 0
    4318:	30 e0       	ldi	r19, 0x00	; 0
		asm("PUSH   R0");        // 2 cycle +
    431a:	0f 92       	push	r0
		asm("POP    R0");        // 2 cycle +
    431c:	0f 90       	pop	r0
		asm("PUSH   R0");        // 2 cycle +
    431e:	0f 92       	push	r0
		asm("POP    R0");        // 2 cycle +
    4320:	0f 90       	pop	r0

// 시간 지연 함수
void delay_us(int time_us)
{
	register int i;
	for(i=0; i<time_us; i++){   // 4 cycle +
    4322:	2f 5f       	subi	r18, 0xFF	; 255
    4324:	3f 4f       	sbci	r19, 0xFF	; 255
    4326:	82 17       	cp	r24, r18
    4328:	93 07       	cpc	r25, r19
    432a:	b9 f7       	brne	.-18     	; 0x431a <delay_us+0xa>
    432c:	08 95       	ret

0000432e <delay_ms>:
		asm("POP    R0");        // 2 cycle   = 16 cycle = 1us for 16MHz*/
	}
}

void delay_ms(int time_ms)
{
    432e:	0f 93       	push	r16
    4330:	1f 93       	push	r17
    4332:	cf 93       	push	r28
    4334:	df 93       	push	r29
	register int i;
	for(i=0;i<time_ms;i++) delay_us(1000);
    4336:	18 16       	cp	r1, r24
    4338:	19 06       	cpc	r1, r25
    433a:	54 f4       	brge	.+20     	; 0x4350 <delay_ms+0x22>
    433c:	8c 01       	movw	r16, r24
    433e:	c0 e0       	ldi	r28, 0x00	; 0
    4340:	d0 e0       	ldi	r29, 0x00	; 0
    4342:	88 ee       	ldi	r24, 0xE8	; 232
    4344:	93 e0       	ldi	r25, 0x03	; 3
    4346:	e4 df       	rcall	.-56     	; 0x4310 <delay_us>
    4348:	21 96       	adiw	r28, 0x01	; 1
    434a:	0c 17       	cp	r16, r28
    434c:	1d 07       	cpc	r17, r29
    434e:	c9 f7       	brne	.-14     	; 0x4342 <delay_ms+0x14>
}
    4350:	df 91       	pop	r29
    4352:	cf 91       	pop	r28
    4354:	1f 91       	pop	r17
    4356:	0f 91       	pop	r16
    4358:	08 95       	ret

0000435a <main>:
const uint8_t test_password1[] = "ABCDEFGHJ!!!!";
const uint8_t new_test_password[] = "new password";
/** Entry point. This is the first thing which is called after startup code.
  * This never returns. */
int main(void)
{
    435a:	af 92       	push	r10
    435c:	bf 92       	push	r11
    435e:	cf 92       	push	r12
    4360:	df 92       	push	r13
    4362:	ef 92       	push	r14
    4364:	ff 92       	push	r15
    4366:	0f 93       	push	r16
    4368:	1f 93       	push	r17
    436a:	cf 93       	push	r28
    436c:	df 93       	push	r29
    436e:	cd b7       	in	r28, 0x3d	; 61
    4370:	de b7       	in	r29, 0x3e	; 62
    4372:	ce 5b       	subi	r28, 0xBE	; 190
    4374:	d5 40       	sbci	r29, 0x05	; 5
    4376:	0f b6       	in	r0, 0x3f	; 63
    4378:	f8 94       	cli
    437a:	de bf       	out	0x3e, r29	; 62
    437c:	0f be       	out	0x3f, r0	; 63
    437e:	cd bf       	out	0x3d, r28	; 61


	init_devices();
    4380:	af df       	rcall	.-162    	; 0x42e0 <init_devices>
	//insert your functional code here...
	
	printf("testing...");
    4382:	8b e6       	ldi	r24, 0x6B	; 107
    4384:	91 e0       	ldi	r25, 0x01	; 1
    4386:	9f 93       	push	r25
    4388:	8f 93       	push	r24
    438a:	0e 94 dd 3e 	call	0x7dba	; 0x7dba <printf>
	delay_ms(1200);
    438e:	80 eb       	ldi	r24, 0xB0	; 176
    4390:	94 e0       	ldi	r25, 0x04	; 4
    4392:	cd df       	rcall	.-102    	; 0x432e <delay_ms>
	printf("$$CS\r");		// 화면 클리어
    4394:	86 e7       	ldi	r24, 0x76	; 118
    4396:	91 e0       	ldi	r25, 0x01	; 1
    4398:	9f 93       	push	r25
    439a:	8f 93       	push	r24
    439c:	0e 94 dd 3e 	call	0x7dba	; 0x7dba <printf>

	delay_ms(2400);
    43a0:	80 e6       	ldi	r24, 0x60	; 96
    43a2:	99 e0       	ldi	r25, 0x09	; 9
    43a4:	c4 df       	rcall	.-120    	; 0x432e <delay_ms>
	printf("$$L1\r");		// 백라이트 on
    43a6:	8c e7       	ldi	r24, 0x7C	; 124
    43a8:	91 e0       	ldi	r25, 0x01	; 1
    43aa:	9f 93       	push	r25
    43ac:	8f 93       	push	r24
    43ae:	0e 94 dd 3e 	call	0x7dba	; 0x7dba <printf>
	delay_ms(1200);
    43b2:	80 eb       	ldi	r24, 0xB0	; 176
    43b4:	94 e0       	ldi	r25, 0x04	; 4
    43b6:	bb df       	rcall	.-138    	; 0x432e <delay_ms>
	printf("$$BB\r");		// 커서 Blink
    43b8:	82 e8       	ldi	r24, 0x82	; 130
    43ba:	91 e0       	ldi	r25, 0x01	; 1
    43bc:	9f 93       	push	r25
    43be:	8f 93       	push	r24
    43c0:	0e 94 dd 3e 	call	0x7dba	; 0x7dba <printf>
	delay_ms(1200);
    43c4:	80 eb       	ldi	r24, 0xB0	; 176
    43c6:	94 e0       	ldi	r25, 0x04	; 4
 	uint32_t histogram_count;
 	uint8_t copy_of_nv[TEST_GLOBAL_PARTITION_SIZE + TEST_ACCOUNTS_PARTITION_SIZE];
 	uint8_t copy_of_nv2[TEST_GLOBAL_PARTITION_SIZE + TEST_ACCOUNTS_PARTITION_SIZE];
 	uint8_t pool_state[ENTROPY_POOL_LENGTH];

 	initTests(__FILE__);
    43c8:	b2 df       	rcall	.-156    	; 0x432e <delay_ms>
    43ca:	88 e8       	ldi	r24, 0x88	; 136
    43cc:	91 e0       	ldi	r25, 0x01	; 1
    43ce:	0e 94 2c 31 	call	0x6258	; 0x6258 <initTests>

// 	initWalletTest();
 	initialiseDefaultEntropyPool();
    43d2:	13 d5       	rcall	.+2598   	; 0x4dfa <initialiseDefaultEntropyPool>
 	suppress_set_entropy_pool = false;
 	// Blank out non-volatile storage area (set to all nulls).
 	temp[0] = 0;
    43d4:	19 82       	std	Y+1, r1	; 0x01


	// Check that sanitiseEverything() is able to function with NV
	// storage in this state.
	minimum_address_written[PARTITION_GLOBAL] = 0xffffffff;
    43d6:	a5 ec       	ldi	r26, 0xC5	; 197
    43d8:	b7 e0       	ldi	r27, 0x07	; 7
    43da:	4f ef       	ldi	r20, 0xFF	; 255
    43dc:	5f ef       	ldi	r21, 0xFF	; 255
    43de:	ba 01       	movw	r22, r20
    43e0:	4d 93       	st	X+, r20
    43e2:	5d 93       	st	X+, r21
    43e4:	6d 93       	st	X+, r22
    43e6:	7c 93       	st	X, r23
    43e8:	13 97       	sbiw	r26, 0x03	; 3
	maximum_address_written[PARTITION_GLOBAL] = 0;
    43ea:	ed ec       	ldi	r30, 0xCD	; 205
    43ec:	f7 e0       	ldi	r31, 0x07	; 7
    43ee:	10 82       	st	Z, r1
    43f0:	11 82       	std	Z+1, r1	; 0x01
    43f2:	12 82       	std	Z+2, r1	; 0x02
    43f4:	13 82       	std	Z+3, r1	; 0x03
	minimum_address_written[PARTITION_ACCOUNTS] = 0xffffffff;
    43f6:	14 96       	adiw	r26, 0x04	; 4
    43f8:	4d 93       	st	X+, r20
    43fa:	5d 93       	st	X+, r21
    43fc:	6d 93       	st	X+, r22
    43fe:	7c 93       	st	X, r23
    4400:	17 97       	sbiw	r26, 0x07	; 7
	maximum_address_written[PARTITION_ACCOUNTS] = 0;
    4402:	14 82       	std	Z+4, r1	; 0x04
    4404:	15 82       	std	Z+5, r1	; 0x05
    4406:	16 82       	std	Z+6, r1	; 0x06
    4408:	17 82       	std	Z+7, r1	; 0x07
	if (sanitiseEverything() == WALLET_NO_ERROR)
    440a:	0e 94 50 36 	call	0x6ca0	; 0x6ca0 <sanitiseEverything>
    440e:	0f b6       	in	r0, 0x3f	; 63
    4410:	f8 94       	cli
    4412:	de bf       	out	0x3e, r29	; 62
    4414:	0f be       	out	0x3f, r0	; 63
    4416:	cd bf       	out	0x3d, r28	; 61
    4418:	81 11       	cpse	r24, r1
    441a:	03 c0       	rjmp	.+6      	; 0x4422 <main+0xc8>
	{
		reportSuccess();
    441c:	0e 94 18 31 	call	0x6230	; 0x6230 <reportSuccess>
    4420:	06 c0       	rjmp	.+12     	; 0x442e <main+0xd4>
	}
	else
	{
		printf("Cannot nuke NV storage using sanitiseEverything()\n");
    4422:	84 e9       	ldi	r24, 0x94	; 148
    4424:	91 e0       	ldi	r25, 0x01	; 1
    4426:	0e 94 f5 3e 	call	0x7dea	; 0x7dea <puts>
		reportFailure();
    442a:	0e 94 22 31 	call	0x6244	; 0x6244 <reportFailure>
	}

	// Check that sanitiseNonVolatileStorage() overwrote (almost) everything
	// with random data.
	memset(histogram, 0, sizeof(histogram));
    442e:	fe 01       	movw	r30, r28
    4430:	e2 50       	subi	r30, 0x02	; 2
    4432:	ff 4f       	sbci	r31, 0xFF	; 255
    4434:	80 e0       	ldi	r24, 0x00	; 0
    4436:	94 e0       	ldi	r25, 0x04	; 4
    4438:	df 01       	movw	r26, r30
    443a:	9c 01       	movw	r18, r24
    443c:	1d 92       	st	X+, r1
    443e:	21 50       	subi	r18, 0x01	; 1
    4440:	30 40       	sbci	r19, 0x00	; 0
    4442:	e1 f7       	brne	.-8      	; 0x443c <main+0xe2>
	histogram_count = 0;
	//	fseek(wallet_test_file, 0, SEEK_SET);
	for (i = 0; i < (TEST_GLOBAL_PARTITION_SIZE + TEST_ACCOUNTS_PARTITION_SIZE); i++)
	{
//		fread(temp, 1, 1, wallet_test_file);
		histogram[temp[0]]++;
    4444:	89 81       	ldd	r24, Y+1	; 0x01
    4446:	28 2f       	mov	r18, r24
    4448:	30 e0       	ldi	r19, 0x00	; 0
    444a:	94 e0       	ldi	r25, 0x04	; 4
    444c:	89 9f       	mul	r24, r25
    444e:	e0 0d       	add	r30, r0
    4450:	f1 1d       	adc	r31, r1
    4452:	11 24       	eor	r1, r1
    4454:	40 81       	ld	r20, Z
    4456:	51 81       	ldd	r21, Z+1	; 0x01
    4458:	62 81       	ldd	r22, Z+2	; 0x02
    445a:	73 81       	ldd	r23, Z+3	; 0x03
    445c:	80 e0       	ldi	r24, 0x00	; 0
    445e:	96 e0       	ldi	r25, 0x06	; 6
    4460:	01 97       	sbiw	r24, 0x01	; 1
	// Check that sanitiseNonVolatileStorage() overwrote (almost) everything
	// with random data.
	memset(histogram, 0, sizeof(histogram));
	histogram_count = 0;
	//	fseek(wallet_test_file, 0, SEEK_SET);
	for (i = 0; i < (TEST_GLOBAL_PARTITION_SIZE + TEST_ACCOUNTS_PARTITION_SIZE); i++)
    4462:	f1 f7       	brne	.-4      	; 0x4460 <main+0x106>
    4464:	22 0f       	add	r18, r18
    4466:	33 1f       	adc	r19, r19
    4468:	22 0f       	add	r18, r18
    446a:	33 1f       	adc	r19, r19
    446c:	ee ef       	ldi	r30, 0xFE	; 254
    446e:	f0 e0       	ldi	r31, 0x00	; 0
    4470:	ec 0f       	add	r30, r28
    4472:	fd 1f       	adc	r31, r29
    4474:	e2 0f       	add	r30, r18
    4476:	f3 1f       	adc	r31, r19
    4478:	5a 5f       	subi	r21, 0xFA	; 250
    447a:	6f 4f       	sbci	r22, 0xFF	; 255
    447c:	7f 4f       	sbci	r23, 0xFF	; 255
    447e:	40 83       	st	Z, r20
    4480:	51 83       	std	Z+1, r21	; 0x01
    4482:	62 83       	std	Z+2, r22	; 0x02
    4484:	73 83       	std	Z+3, r23	; 0x03
    4486:	de 01       	movw	r26, r28
    4488:	a2 50       	subi	r26, 0x02	; 2
    448a:	bf 4f       	sbci	r27, 0xFF	; 255
    448c:	7d 01       	movw	r14, r26
    448e:	00 e0       	ldi	r16, 0x00	; 0
    4490:	10 e0       	ldi	r17, 0x00	; 0
    4492:	20 e0       	ldi	r18, 0x00	; 0
	abort = false;
	for (i = 0; i < 256; i++)
	{
		if (histogram[i] > (histogram_count / 16))
		{
			printf("sanitiseNonVolatileStorage() causes %02x to appear improbably often\n", i);
    4494:	0f 2e       	mov	r0, r31
    4496:	f6 ec       	ldi	r31, 0xC6	; 198
    4498:	cf 2e       	mov	r12, r31
    449a:	f1 e0       	ldi	r31, 0x01	; 1
    449c:	df 2e       	mov	r13, r31
    449e:	f0 2d       	mov	r31, r0
			reportFailure();
			abort = true;
    44a0:	bb 24       	eor	r11, r11
    44a2:	b3 94       	inc	r11
	}
	// "Random data" here is defined as: no value appears more than 1/16 of the time.
	abort = false;
	for (i = 0; i < 256; i++)
	{
		if (histogram[i] > (histogram_count / 16))
    44a4:	f7 01       	movw	r30, r14
    44a6:	81 91       	ld	r24, Z+
    44a8:	91 91       	ld	r25, Z+
    44aa:	a1 91       	ld	r26, Z+
    44ac:	b1 91       	ld	r27, Z+
    44ae:	7f 01       	movw	r14, r30
    44b0:	81 36       	cpi	r24, 0x61	; 97
    44b2:	91 05       	cpc	r25, r1
    44b4:	a1 05       	cpc	r26, r1
    44b6:	b1 05       	cpc	r27, r1
    44b8:	68 f0       	brcs	.+26     	; 0x44d4 <main+0x17a>
		{
			printf("sanitiseNonVolatileStorage() causes %02x to appear improbably often\n", i);
    44ba:	1f 93       	push	r17
    44bc:	0f 93       	push	r16
    44be:	df 92       	push	r13
    44c0:	cf 92       	push	r12
    44c2:	0e 94 dd 3e 	call	0x7dba	; 0x7dba <printf>
			reportFailure();
    44c6:	0e 94 22 31 	call	0x6244	; 0x6244 <reportFailure>
    44ca:	0f 90       	pop	r0
    44cc:	0f 90       	pop	r0
    44ce:	0f 90       	pop	r0
    44d0:	0f 90       	pop	r0
			abort = true;
    44d2:	2b 2d       	mov	r18, r11
		histogram[temp[0]]++;
		histogram_count++;
	}
	// "Random data" here is defined as: no value appears more than 1/16 of the time.
	abort = false;
	for (i = 0; i < 256; i++)
    44d4:	0f 5f       	subi	r16, 0xFF	; 255
    44d6:	1f 4f       	sbci	r17, 0xFF	; 255
    44d8:	01 15       	cp	r16, r1
    44da:	f1 e0       	ldi	r31, 0x01	; 1
    44dc:	1f 07       	cpc	r17, r31
    44de:	11 f7       	brne	.-60     	; 0x44a4 <main+0x14a>
			printf("sanitiseNonVolatileStorage() causes %02x to appear improbably often\n", i);
			reportFailure();
			abort = true;
		}
	}
	if (!abort)
    44e0:	21 11       	cpse	r18, r1
    44e2:	02 c0       	rjmp	.+4      	; 0x44e8 <main+0x18e>
	{
		reportSuccess();
    44e4:	0e 94 18 31 	call	0x6230	; 0x6230 <reportSuccess>
	}
	
	
	// Check that sanitiseEverything() overwrote everything.
	if ((minimum_address_written[PARTITION_GLOBAL] != 0)
    44e8:	80 91 c5 07 	lds	r24, 0x07C5	; 0x8007c5 <minimum_address_written>
    44ec:	90 91 c6 07 	lds	r25, 0x07C6	; 0x8007c6 <minimum_address_written+0x1>
    44f0:	a0 91 c7 07 	lds	r26, 0x07C7	; 0x8007c7 <minimum_address_written+0x2>
    44f4:	b0 91 c8 07 	lds	r27, 0x07C8	; 0x8007c8 <minimum_address_written+0x3>
    44f8:	89 2b       	or	r24, r25
    44fa:	8a 2b       	or	r24, r26
    44fc:	8b 2b       	or	r24, r27
    44fe:	31 f5       	brne	.+76     	; 0x454c <main+0x1f2>
	|| (maximum_address_written[PARTITION_GLOBAL] != (TEST_GLOBAL_PARTITION_SIZE - 1))
    4500:	80 91 cd 07 	lds	r24, 0x07CD	; 0x8007cd <maximum_address_written>
    4504:	90 91 ce 07 	lds	r25, 0x07CE	; 0x8007ce <maximum_address_written+0x1>
    4508:	a0 91 cf 07 	lds	r26, 0x07CF	; 0x8007cf <maximum_address_written+0x2>
    450c:	b0 91 d0 07 	lds	r27, 0x07D0	; 0x8007d0 <maximum_address_written+0x3>
    4510:	8f 3f       	cpi	r24, 0xFF	; 255
    4512:	91 40       	sbci	r25, 0x01	; 1
    4514:	a1 05       	cpc	r26, r1
    4516:	b1 05       	cpc	r27, r1
    4518:	c9 f4       	brne	.+50     	; 0x454c <main+0x1f2>
	|| (minimum_address_written[PARTITION_ACCOUNTS] != 0)
    451a:	80 91 c9 07 	lds	r24, 0x07C9	; 0x8007c9 <minimum_address_written+0x4>
    451e:	90 91 ca 07 	lds	r25, 0x07CA	; 0x8007ca <minimum_address_written+0x5>
    4522:	a0 91 cb 07 	lds	r26, 0x07CB	; 0x8007cb <minimum_address_written+0x6>
    4526:	b0 91 cc 07 	lds	r27, 0x07CC	; 0x8007cc <minimum_address_written+0x7>
    452a:	89 2b       	or	r24, r25
    452c:	8a 2b       	or	r24, r26
    452e:	8b 2b       	or	r24, r27
    4530:	69 f4       	brne	.+26     	; 0x454c <main+0x1f2>
	|| (maximum_address_written[PARTITION_ACCOUNTS] != (TEST_ACCOUNTS_PARTITION_SIZE - 1)))
    4532:	80 91 d1 07 	lds	r24, 0x07D1	; 0x8007d1 <maximum_address_written+0x4>
    4536:	90 91 d2 07 	lds	r25, 0x07D2	; 0x8007d2 <maximum_address_written+0x5>
    453a:	a0 91 d3 07 	lds	r26, 0x07D3	; 0x8007d3 <maximum_address_written+0x6>
    453e:	b0 91 d4 07 	lds	r27, 0x07D4	; 0x8007d4 <maximum_address_written+0x7>
    4542:	8f 3f       	cpi	r24, 0xFF	; 255
    4544:	93 40       	sbci	r25, 0x03	; 3
    4546:	a1 05       	cpc	r26, r1
    4548:	b1 05       	cpc	r27, r1
    454a:	39 f0       	breq	.+14     	; 0x455a <main+0x200>
	{
		printf("sanitiseEverything() did not overwrite everything\n");
    454c:	8b e0       	ldi	r24, 0x0B	; 11
    454e:	92 e0       	ldi	r25, 0x02	; 2
    4550:	0e 94 f5 3e 	call	0x7dea	; 0x7dea <puts>
		reportFailure();
    4554:	0e 94 22 31 	call	0x6244	; 0x6244 <reportFailure>
    4558:	02 c0       	rjmp	.+4      	; 0x455e <main+0x204>
	}
	else
	{
		reportSuccess();
    455a:	0e 94 18 31 	call	0x6230	; 0x6230 <reportSuccess>
	}

	// Check that the version field is "wallet not there".
	if (getWalletInfo(&version, temp, wallet_uuid, 0) == WALLET_NO_ERROR)
    455e:	00 e0       	ldi	r16, 0x00	; 0
    4560:	10 e0       	ldi	r17, 0x00	; 0
    4562:	98 01       	movw	r18, r16
    4564:	ae 01       	movw	r20, r28
    4566:	47 55       	subi	r20, 0x57	; 87
    4568:	5f 4f       	sbci	r21, 0xFF	; 255
    456a:	be 01       	movw	r22, r28
    456c:	6f 5f       	subi	r22, 0xFF	; 255
    456e:	7f 4f       	sbci	r23, 0xFF	; 255
    4570:	ce 01       	movw	r24, r28
    4572:	87 54       	subi	r24, 0x47	; 71
    4574:	9f 4f       	sbci	r25, 0xFF	; 255
    4576:	0e 94 dc 37 	call	0x6fb8	; 0x6fb8 <getWalletInfo>
    457a:	81 11       	cpse	r24, r1
    457c:	03 c0       	rjmp	.+6      	; 0x4584 <main+0x22a>
	{
		reportSuccess();
    457e:	0e 94 18 31 	call	0x6230	; 0x6230 <reportSuccess>
    4582:	06 c0       	rjmp	.+12     	; 0x4590 <main+0x236>
	}
	else
	{
		printf("getWalletInfo() failed after sanitiseNonVolatileStorage() was called\n");
    4584:	8d e3       	ldi	r24, 0x3D	; 61
    4586:	92 e0       	ldi	r25, 0x02	; 2
    4588:	0e 94 f5 3e 	call	0x7dea	; 0x7dea <puts>
		reportFailure();
    458c:	0e 94 22 31 	call	0x6244	; 0x6244 <reportFailure>
	}
	if (version == VERSION_NOTHING_THERE)
    4590:	c7 54       	subi	r28, 0x47	; 71
    4592:	df 4f       	sbci	r29, 0xFF	; 255
    4594:	88 81       	ld	r24, Y
    4596:	99 81       	ldd	r25, Y+1	; 0x01
    4598:	aa 81       	ldd	r26, Y+2	; 0x02
    459a:	bb 81       	ldd	r27, Y+3	; 0x03
    459c:	c9 5b       	subi	r28, 0xB9	; 185
    459e:	d0 40       	sbci	r29, 0x00	; 0
    45a0:	89 2b       	or	r24, r25
    45a2:	8a 2b       	or	r24, r26
    45a4:	8b 2b       	or	r24, r27
    45a6:	19 f4       	brne	.+6      	; 0x45ae <main+0x254>
	{
		reportSuccess();
    45a8:	0e 94 18 31 	call	0x6230	; 0x6230 <reportSuccess>
    45ac:	06 c0       	rjmp	.+12     	; 0x45ba <main+0x260>
	}
	else
	{
		printf("sanitiseNonVolatileStorage() does not set version to nothing there\n");
    45ae:	82 e8       	ldi	r24, 0x82	; 130
    45b0:	92 e0       	ldi	r25, 0x02	; 2
    45b2:	0e 94 f5 3e 	call	0x7dea	; 0x7dea <puts>
		reportFailure();
    45b6:	0e 94 22 31 	call	0x6244	; 0x6244 <reportFailure>
	uint32_t check_num_addresses;
	AddressHandle ah;
	PointAffine public_key;

	// newWallet() not tested because it calls initWallet() when it's done.
	ah = makeNewAddress(temp, &public_key);
    45ba:	be 01       	movw	r22, r28
    45bc:	62 58       	subi	r22, 0x82	; 130
    45be:	7a 4f       	sbci	r23, 0xFA	; 250
    45c0:	ce 01       	movw	r24, r28
    45c2:	82 50       	subi	r24, 0x02	; 2
    45c4:	9b 4f       	sbci	r25, 0xFB	; 251
    45c6:	0e 94 92 36 	call	0x6d24	; 0x6d24 <makeNewAddress>
	if ((ah == BAD_ADDRESS_HANDLE) && (walletGetLastError() == WALLET_NOT_LOADED))
    45ca:	6f 3f       	cpi	r22, 0xFF	; 255
    45cc:	7f 4f       	sbci	r23, 0xFF	; 255
    45ce:	8f 4f       	sbci	r24, 0xFF	; 255
    45d0:	9f 4f       	sbci	r25, 0xFF	; 255
    45d2:	39 f4       	brne	.+14     	; 0x45e2 <main+0x288>
    45d4:	0e 94 e6 31 	call	0x63cc	; 0x63cc <walletGetLastError>
    45d8:	87 30       	cpi	r24, 0x07	; 7
    45da:	19 f4       	brne	.+6      	; 0x45e2 <main+0x288>
	{
		reportSuccess();
    45dc:	0e 94 18 31 	call	0x6230	; 0x6230 <reportSuccess>
    45e0:	06 c0       	rjmp	.+12     	; 0x45ee <main+0x294>
	}
	else
	{
		printf("makeNewAddress() doesn't recognise when wallet isn't loaded\n");
    45e2:	85 ec       	ldi	r24, 0xC5	; 197
    45e4:	92 e0       	ldi	r25, 0x02	; 2
    45e6:	0e 94 f5 3e 	call	0x7dea	; 0x7dea <puts>
		reportFailure();
    45ea:	0e 94 22 31 	call	0x6244	; 0x6244 <reportFailure>
	}
	check_num_addresses = getNumAddresses();
    45ee:	0e 94 4e 32 	call	0x649c	; 0x649c <getNumAddresses>
	if ((check_num_addresses == 0) && (walletGetLastError() == WALLET_NOT_LOADED))
    45f2:	67 2b       	or	r22, r23
    45f4:	68 2b       	or	r22, r24
    45f6:	69 2b       	or	r22, r25
    45f8:	39 f4       	brne	.+14     	; 0x4608 <main+0x2ae>
    45fa:	0e 94 e6 31 	call	0x63cc	; 0x63cc <walletGetLastError>
    45fe:	87 30       	cpi	r24, 0x07	; 7
    4600:	19 f4       	brne	.+6      	; 0x4608 <main+0x2ae>
	{
		reportSuccess();
    4602:	0e 94 18 31 	call	0x6230	; 0x6230 <reportSuccess>
    4606:	06 c0       	rjmp	.+12     	; 0x4614 <main+0x2ba>
	}
	else
	{
		printf("getNumAddresses() doesn't recognise when wallet isn't loaded\n");
    4608:	81 e0       	ldi	r24, 0x01	; 1
    460a:	93 e0       	ldi	r25, 0x03	; 3
    460c:	0e 94 f5 3e 	call	0x7dea	; 0x7dea <puts>
		reportFailure();
    4610:	0e 94 22 31 	call	0x6244	; 0x6244 <reportFailure>
	}
	if (getAddressAndPublicKey(temp, &public_key, 0) == WALLET_NOT_LOADED)
    4614:	20 e0       	ldi	r18, 0x00	; 0
    4616:	30 e0       	ldi	r19, 0x00	; 0
    4618:	a9 01       	movw	r20, r18
    461a:	be 01       	movw	r22, r28
    461c:	62 58       	subi	r22, 0x82	; 130
    461e:	7a 4f       	sbci	r23, 0xFA	; 250
    4620:	ce 01       	movw	r24, r28
    4622:	82 50       	subi	r24, 0x02	; 2
    4624:	9b 4f       	sbci	r25, 0xFB	; 251
    4626:	0e 94 b1 32 	call	0x6562	; 0x6562 <getAddressAndPublicKey>
    462a:	87 30       	cpi	r24, 0x07	; 7
    462c:	19 f4       	brne	.+6      	; 0x4634 <main+0x2da>
	{
		reportSuccess();
    462e:	0e 94 18 31 	call	0x6230	; 0x6230 <reportSuccess>
    4632:	06 c0       	rjmp	.+12     	; 0x4640 <main+0x2e6>
	}
	else
	{
		printf("getAddressAndPublicKey() doesn't recognise when wallet isn't loaded\n");
    4634:	8e e3       	ldi	r24, 0x3E	; 62
    4636:	93 e0       	ldi	r25, 0x03	; 3
    4638:	0e 94 f5 3e 	call	0x7dea	; 0x7dea <puts>
		reportFailure();
    463c:	0e 94 22 31 	call	0x6244	; 0x6244 <reportFailure>
	}
	if (getPrivateKey(temp, 0) == WALLET_NOT_LOADED)
    4640:	40 e0       	ldi	r20, 0x00	; 0
    4642:	50 e0       	ldi	r21, 0x00	; 0
    4644:	ba 01       	movw	r22, r20
    4646:	ce 01       	movw	r24, r28
    4648:	82 50       	subi	r24, 0x02	; 2
    464a:	9b 4f       	sbci	r25, 0xFB	; 251
    464c:	0e 94 6d 32 	call	0x64da	; 0x64da <getPrivateKey>
    4650:	87 30       	cpi	r24, 0x07	; 7
    4652:	19 f4       	brne	.+6      	; 0x465a <main+0x300>
	{
		reportSuccess();
    4654:	0e 94 18 31 	call	0x6230	; 0x6230 <reportSuccess>
    4658:	06 c0       	rjmp	.+12     	; 0x4666 <main+0x30c>
	}
	else
	{
		printf("getPrivateKey() doesn't recognise when wallet isn't loaded\n");
    465a:	82 e8       	ldi	r24, 0x82	; 130
    465c:	93 e0       	ldi	r25, 0x03	; 3
    465e:	0e 94 f5 3e 	call	0x7dea	; 0x7dea <puts>
		reportFailure();
    4662:	0e 94 22 31 	call	0x6244	; 0x6244 <reportFailure>
	}
	if (changeEncryptionKey(temp, 0) == WALLET_NOT_LOADED)
    4666:	60 e0       	ldi	r22, 0x00	; 0
    4668:	70 e0       	ldi	r23, 0x00	; 0
    466a:	ce 01       	movw	r24, r28
    466c:	82 50       	subi	r24, 0x02	; 2
    466e:	9b 4f       	sbci	r25, 0xFB	; 251
    4670:	0e 94 f8 36 	call	0x6df0	; 0x6df0 <changeEncryptionKey>
    4674:	87 30       	cpi	r24, 0x07	; 7
    4676:	19 f4       	brne	.+6      	; 0x467e <main+0x324>
	{
		reportSuccess();
    4678:	0e 94 18 31 	call	0x6230	; 0x6230 <reportSuccess>
    467c:	06 c0       	rjmp	.+12     	; 0x468a <main+0x330>
	}
	else
	{
		printf("changeEncryptionKey() doesn't recognise when wallet isn't loaded\n");
    467e:	8d eb       	ldi	r24, 0xBD	; 189
    4680:	93 e0       	ldi	r25, 0x03	; 3
    4682:	0e 94 f5 3e 	call	0x7dea	; 0x7dea <puts>
		reportFailure();
    4686:	0e 94 22 31 	call	0x6244	; 0x6244 <reportFailure>
	}
	if (changeWalletName(temp) == WALLET_NOT_LOADED)
    468a:	ce 01       	movw	r24, r28
    468c:	82 50       	subi	r24, 0x02	; 2
    468e:	9b 4f       	sbci	r25, 0xFB	; 251
    4690:	0e 94 1f 37 	call	0x6e3e	; 0x6e3e <changeWalletName>
    4694:	87 30       	cpi	r24, 0x07	; 7
    4696:	19 f4       	brne	.+6      	; 0x469e <main+0x344>
	{
		reportSuccess();
    4698:	0e 94 18 31 	call	0x6230	; 0x6230 <reportSuccess>
    469c:	06 c0       	rjmp	.+12     	; 0x46aa <main+0x350>
	}
	else
	{
		printf("changeWalletName() doesn't recognise when wallet isn't loaded\n");
    469e:	8e ef       	ldi	r24, 0xFE	; 254
    46a0:	93 e0       	ldi	r25, 0x03	; 3
    46a2:	0e 94 f5 3e 	call	0x7dea	; 0x7dea <puts>
		reportFailure();
    46a6:	0e 94 22 31 	call	0x6244	; 0x6244 <reportFailure>
	}
	if (backupWallet(false, 0) == WALLET_NOT_LOADED)
    46aa:	40 e0       	ldi	r20, 0x00	; 0
    46ac:	50 e0       	ldi	r21, 0x00	; 0
    46ae:	ba 01       	movw	r22, r20
    46b0:	80 e0       	ldi	r24, 0x00	; 0
    46b2:	0e 94 8f 3a 	call	0x751e	; 0x751e <backupWallet>
    46b6:	87 30       	cpi	r24, 0x07	; 7
    46b8:	19 f4       	brne	.+6      	; 0x46c0 <main+0x366>
	{
		reportSuccess();
    46ba:	0e 94 18 31 	call	0x6230	; 0x6230 <reportSuccess>
    46be:	06 c0       	rjmp	.+12     	; 0x46cc <main+0x372>
	}
	else
	{
		printf("backupWallet() doesn't recognise when wallet isn't loaded\n");
    46c0:	8c e3       	ldi	r24, 0x3C	; 60
    46c2:	94 e0       	ldi	r25, 0x04	; 4
    46c4:	0e 94 f5 3e 	call	0x7dea	; 0x7dea <puts>
		reportFailure();
    46c8:	0e 94 22 31 	call	0x6244	; 0x6244 <reportFailure>
	}
	if (getMasterPublicKey(&public_key, temp) == WALLET_NOT_LOADED)
    46cc:	be 01       	movw	r22, r28
    46ce:	62 50       	subi	r22, 0x02	; 2
    46d0:	7b 4f       	sbci	r23, 0xFB	; 251
    46d2:	ce 01       	movw	r24, r28
    46d4:	82 58       	subi	r24, 0x82	; 130
    46d6:	9a 4f       	sbci	r25, 0xFA	; 250
    46d8:	0e 94 02 32 	call	0x6404	; 0x6404 <getMasterPublicKey>
    46dc:	87 30       	cpi	r24, 0x07	; 7
    46de:	19 f4       	brne	.+6      	; 0x46e6 <main+0x38c>
	{
		reportSuccess();
    46e0:	0e 94 18 31 	call	0x6230	; 0x6230 <reportSuccess>
    46e4:	06 c0       	rjmp	.+12     	; 0x46f2 <main+0x398>
	}
	else
	{
		printf("getMasterPublicKey() doesn't recognise when wallet isn't loaded\n");
    46e6:	86 e7       	ldi	r24, 0x76	; 118
    46e8:	94 e0       	ldi	r25, 0x04	; 4
    46ea:	0e 94 f5 3e 	call	0x7dea	; 0x7dea <puts>
		reportFailure();
    46ee:	0e 94 22 31 	call	0x6244	; 0x6244 <reportFailure>
	// return WALLET_NOT_THERE somehow.
	checkFunctionsReturnWalletNotLoaded();

	// The non-volatile storage area was blanked out, so there shouldn't be a
	// (valid) wallet there.
	if (initWallet(0, NULL, 0) == WALLET_NOT_THERE)
    46f2:	20 e0       	ldi	r18, 0x00	; 0
    46f4:	30 e0       	ldi	r19, 0x00	; 0
    46f6:	40 e0       	ldi	r20, 0x00	; 0
    46f8:	50 e0       	ldi	r21, 0x00	; 0
    46fa:	60 e0       	ldi	r22, 0x00	; 0
    46fc:	70 e0       	ldi	r23, 0x00	; 0
    46fe:	cb 01       	movw	r24, r22
    4700:	0e 94 52 38 	call	0x70a4	; 0x70a4 <initWallet>
    4704:	86 30       	cpi	r24, 0x06	; 6
    4706:	19 f4       	brne	.+6      	; 0x470e <main+0x3b4>
	{
		reportSuccess();
    4708:	0e 94 18 31 	call	0x6230	; 0x6230 <reportSuccess>
    470c:	06 c0       	rjmp	.+12     	; 0x471a <main+0x3c0>
	}
	else
	{
		printf("initWallet() doesn't recognise when wallet isn't there\n");
    470e:	86 eb       	ldi	r24, 0xB6	; 182
    4710:	94 e0       	ldi	r25, 0x04	; 4
    4712:	0e 94 f5 3e 	call	0x7dea	; 0x7dea <puts>
		reportFailure();
    4716:	0e 94 22 31 	call	0x6244	; 0x6244 <reportFailure>
	}

	// Try creating a wallet and testing initWallet() on it.
	memcpy(name, "123456789012345678901234567890abcdefghij", NAME_LENGTH);
    471a:	88 e2       	ldi	r24, 0x28	; 40
    471c:	ed ee       	ldi	r30, 0xED	; 237
    471e:	f4 e0       	ldi	r31, 0x04	; 4
    4720:	de 01       	movw	r26, r28
    4722:	af 57       	subi	r26, 0x7F	; 127
    4724:	bf 4f       	sbci	r27, 0xFF	; 255
    4726:	01 90       	ld	r0, Z+
    4728:	0d 92       	st	X+, r0
    472a:	8a 95       	dec	r24
    472c:	e1 f7       	brne	.-8      	; 0x4726 <main+0x3cc>
	if (newWallet(0, name, false, NULL, false, NULL, 0) == WALLET_NO_ERROR)
    472e:	a1 2c       	mov	r10, r1
    4730:	b1 2c       	mov	r11, r1
    4732:	c1 2c       	mov	r12, r1
    4734:	d1 2c       	mov	r13, r1
    4736:	e1 2c       	mov	r14, r1
    4738:	00 e0       	ldi	r16, 0x00	; 0
    473a:	10 e0       	ldi	r17, 0x00	; 0
    473c:	20 e0       	ldi	r18, 0x00	; 0
    473e:	ae 01       	movw	r20, r28
    4740:	4f 57       	subi	r20, 0x7F	; 127
    4742:	5f 4f       	sbci	r21, 0xFF	; 255
    4744:	60 e0       	ldi	r22, 0x00	; 0
    4746:	70 e0       	ldi	r23, 0x00	; 0
    4748:	cb 01       	movw	r24, r22
    474a:	0e 94 20 39 	call	0x7240	; 0x7240 <newWallet>
    474e:	81 11       	cpse	r24, r1
    4750:	03 c0       	rjmp	.+6      	; 0x4758 <main+0x3fe>
	{
		reportSuccess();
    4752:	0e 94 18 31 	call	0x6230	; 0x6230 <reportSuccess>
    4756:	06 c0       	rjmp	.+12     	; 0x4764 <main+0x40a>
	}
	else
	{
		printf("Could not create new wallet\n");
    4758:	86 e1       	ldi	r24, 0x16	; 22
    475a:	95 e0       	ldi	r25, 0x05	; 5
    475c:	0e 94 f5 3e 	call	0x7dea	; 0x7dea <puts>
		reportFailure();
    4760:	0e 94 22 31 	call	0x6244	; 0x6244 <reportFailure>
	}
	if (initWallet(0, NULL, 0) == WALLET_NO_ERROR)
    4764:	20 e0       	ldi	r18, 0x00	; 0
    4766:	30 e0       	ldi	r19, 0x00	; 0
    4768:	40 e0       	ldi	r20, 0x00	; 0
    476a:	50 e0       	ldi	r21, 0x00	; 0
    476c:	60 e0       	ldi	r22, 0x00	; 0
    476e:	70 e0       	ldi	r23, 0x00	; 0
    4770:	cb 01       	movw	r24, r22
    4772:	0e 94 52 38 	call	0x70a4	; 0x70a4 <initWallet>
    4776:	81 11       	cpse	r24, r1
    4778:	03 c0       	rjmp	.+6      	; 0x4780 <main+0x426>
	{
		reportSuccess();
    477a:	0e 94 18 31 	call	0x6230	; 0x6230 <reportSuccess>
    477e:	06 c0       	rjmp	.+12     	; 0x478c <main+0x432>
	}
	else
	{
		printf("initWallet() does not recognise new wallet\n");
    4780:	82 e3       	ldi	r24, 0x32	; 50
    4782:	95 e0       	ldi	r25, 0x05	; 5
    4784:	0e 94 f5 3e 	call	0x7dea	; 0x7dea <puts>
		reportFailure();
    4788:	0e 94 22 31 	call	0x6244	; 0x6244 <reportFailure>
	}
	if ((getNumAddresses() == 0) && (walletGetLastError() == WALLET_EMPTY))
    478c:	0e 94 4e 32 	call	0x649c	; 0x649c <getNumAddresses>
    4790:	67 2b       	or	r22, r23
    4792:	68 2b       	or	r22, r24
    4794:	69 2b       	or	r22, r25
    4796:	39 f4       	brne	.+14     	; 0x47a6 <main+0x44c>
    4798:	0e 94 e6 31 	call	0x63cc	; 0x63cc <walletGetLastError>
    479c:	82 30       	cpi	r24, 0x02	; 2
    479e:	19 f4       	brne	.+6      	; 0x47a6 <main+0x44c>
	{
		reportSuccess();
    47a0:	0e 94 18 31 	call	0x6230	; 0x6230 <reportSuccess>
    47a4:	06 c0       	rjmp	.+12     	; 0x47b2 <main+0x458>
	}
	else
	{
		printf("New wallet isn't empty\n");
    47a6:	8d e5       	ldi	r24, 0x5D	; 93
    47a8:	95 e0       	ldi	r25, 0x05	; 5
    47aa:	0e 94 f5 3e 	call	0x7dea	; 0x7dea <puts>
		reportFailure();
    47ae:	0e 94 22 31 	call	0x6244	; 0x6244 <reportFailure>
	}

	// Check that the version field is "unencrypted wallet".
	if (getWalletInfo(&version, temp, wallet_uuid, 0) == WALLET_NO_ERROR)
    47b2:	00 e0       	ldi	r16, 0x00	; 0
    47b4:	10 e0       	ldi	r17, 0x00	; 0
    47b6:	98 01       	movw	r18, r16
    47b8:	ae 01       	movw	r20, r28
    47ba:	47 55       	subi	r20, 0x57	; 87
    47bc:	5f 4f       	sbci	r21, 0xFF	; 255
    47be:	be 01       	movw	r22, r28
    47c0:	6f 5f       	subi	r22, 0xFF	; 255
    47c2:	7f 4f       	sbci	r23, 0xFF	; 255
    47c4:	ce 01       	movw	r24, r28
    47c6:	87 54       	subi	r24, 0x47	; 71
    47c8:	9f 4f       	sbci	r25, 0xFF	; 255
    47ca:	0e 94 dc 37 	call	0x6fb8	; 0x6fb8 <getWalletInfo>
    47ce:	81 11       	cpse	r24, r1
    47d0:	03 c0       	rjmp	.+6      	; 0x47d8 <main+0x47e>
	{
		reportSuccess();
    47d2:	0e 94 18 31 	call	0x6230	; 0x6230 <reportSuccess>
    47d6:	06 c0       	rjmp	.+12     	; 0x47e4 <main+0x48a>
	}
	else
	{
		printf("getWalletInfo() failed after newWallet() was called\n");
    47d8:	84 e7       	ldi	r24, 0x74	; 116
    47da:	95 e0       	ldi	r25, 0x05	; 5
    47dc:	0e 94 f5 3e 	call	0x7dea	; 0x7dea <puts>
		reportFailure();
    47e0:	0e 94 22 31 	call	0x6244	; 0x6244 <reportFailure>
	}
	if (version == VERSION_UNENCRYPTED)
    47e4:	c7 54       	subi	r28, 0x47	; 71
    47e6:	df 4f       	sbci	r29, 0xFF	; 255
    47e8:	88 81       	ld	r24, Y
    47ea:	99 81       	ldd	r25, Y+1	; 0x01
    47ec:	aa 81       	ldd	r26, Y+2	; 0x02
    47ee:	bb 81       	ldd	r27, Y+3	; 0x03
    47f0:	c9 5b       	subi	r28, 0xB9	; 185
    47f2:	d0 40       	sbci	r29, 0x00	; 0
    47f4:	02 97       	sbiw	r24, 0x02	; 2
    47f6:	a1 05       	cpc	r26, r1
    47f8:	b1 05       	cpc	r27, r1
    47fa:	19 f4       	brne	.+6      	; 0x4802 <main+0x4a8>
	{
		reportSuccess();
    47fc:	0e 94 18 31 	call	0x6230	; 0x6230 <reportSuccess>
    4800:	06 c0       	rjmp	.+12     	; 0x480e <main+0x4b4>
	}
	else
	{
		printf("newWallet() does not set version to unencrypted wallet\n");
    4802:	88 ea       	ldi	r24, 0xA8	; 168
    4804:	95 e0       	ldi	r25, 0x05	; 5
    4806:	0e 94 f5 3e 	call	0x7dea	; 0x7dea <puts>
		reportFailure();
    480a:	0e 94 22 31 	call	0x6244	; 0x6244 <reportFailure>
	}

	// Check that sanitise_nv_wallet() deletes wallet.
	if (sanitiseEverything() == WALLET_NO_ERROR)
    480e:	0e 94 50 36 	call	0x6ca0	; 0x6ca0 <sanitiseEverything>
    4812:	81 11       	cpse	r24, r1
    4814:	03 c0       	rjmp	.+6      	; 0x481c <main+0x4c2>
	{
		reportSuccess();
    4816:	0e 94 18 31 	call	0x6230	; 0x6230 <reportSuccess>
    481a:	06 c0       	rjmp	.+12     	; 0x4828 <main+0x4ce>
	}
	else
	{
		printf("Cannot nuke NV storage using sanitiseNonVolatileStorage()\n");
    481c:	8f ed       	ldi	r24, 0xDF	; 223
    481e:	95 e0       	ldi	r25, 0x05	; 5
    4820:	0e 94 f5 3e 	call	0x7dea	; 0x7dea <puts>
		reportFailure();
    4824:	0e 94 22 31 	call	0x6244	; 0x6244 <reportFailure>
	}
	if (initWallet(0, NULL, 0) == WALLET_NOT_THERE)
    4828:	20 e0       	ldi	r18, 0x00	; 0
    482a:	30 e0       	ldi	r19, 0x00	; 0
    482c:	40 e0       	ldi	r20, 0x00	; 0
    482e:	50 e0       	ldi	r21, 0x00	; 0
    4830:	60 e0       	ldi	r22, 0x00	; 0
    4832:	70 e0       	ldi	r23, 0x00	; 0
    4834:	cb 01       	movw	r24, r22
    4836:	0e 94 52 38 	call	0x70a4	; 0x70a4 <initWallet>
    483a:	86 30       	cpi	r24, 0x06	; 6
    483c:	19 f4       	brne	.+6      	; 0x4844 <main+0x4ea>
	{
		reportSuccess();
    483e:	0e 94 18 31 	call	0x6230	; 0x6230 <reportSuccess>
    4842:	06 c0       	rjmp	.+12     	; 0x4850 <main+0x4f6>
	}
	else
	{
		printf("sanitiseEverything() isn't deleting wallet\n");
    4844:	89 e1       	ldi	r24, 0x19	; 25
    4846:	96 e0       	ldi	r25, 0x06	; 6
    4848:	0e 94 f5 3e 	call	0x7dea	; 0x7dea <puts>
		reportFailure();
    484c:	0e 94 22 31 	call	0x6244	; 0x6244 <reportFailure>
	}

	// Check that newWallet() works.
	if (newWallet(0, name, false, NULL, false, NULL, 0) == WALLET_NO_ERROR)
    4850:	a1 2c       	mov	r10, r1
    4852:	b1 2c       	mov	r11, r1
    4854:	c1 2c       	mov	r12, r1
    4856:	d1 2c       	mov	r13, r1
    4858:	e1 2c       	mov	r14, r1
    485a:	00 e0       	ldi	r16, 0x00	; 0
    485c:	10 e0       	ldi	r17, 0x00	; 0
    485e:	20 e0       	ldi	r18, 0x00	; 0
    4860:	ae 01       	movw	r20, r28
    4862:	4f 57       	subi	r20, 0x7F	; 127
    4864:	5f 4f       	sbci	r21, 0xFF	; 255
    4866:	60 e0       	ldi	r22, 0x00	; 0
    4868:	70 e0       	ldi	r23, 0x00	; 0
    486a:	cb 01       	movw	r24, r22
    486c:	0e 94 20 39 	call	0x7240	; 0x7240 <newWallet>
    4870:	81 11       	cpse	r24, r1
    4872:	03 c0       	rjmp	.+6      	; 0x487a <main+0x520>
	{
		reportSuccess();
    4874:	0e 94 18 31 	call	0x6230	; 0x6230 <reportSuccess>
    4878:	06 c0       	rjmp	.+12     	; 0x4886 <main+0x52c>
	}
	else
	{
		printf("newWallet() fails for recently sanitised NV storage\n");
    487a:	84 e4       	ldi	r24, 0x44	; 68
    487c:	96 e0       	ldi	r25, 0x06	; 6
    487e:	0e 94 f5 3e 	call	0x7dea	; 0x7dea <puts>
		reportFailure();
    4882:	0e 94 22 31 	call	0x6244	; 0x6244 <reportFailure>
	}
	if (makeNewAddress(temp, &public_key) != BAD_ADDRESS_HANDLE)
    4886:	be 01       	movw	r22, r28
    4888:	63 54       	subi	r22, 0x43	; 67
    488a:	7f 4f       	sbci	r23, 0xFF	; 255
    488c:	ce 01       	movw	r24, r28
    488e:	01 96       	adiw	r24, 0x01	; 1
    4890:	0e 94 92 36 	call	0x6d24	; 0x6d24 <makeNewAddress>
    4894:	6f 3f       	cpi	r22, 0xFF	; 255
    4896:	7f 4f       	sbci	r23, 0xFF	; 255
    4898:	8f 4f       	sbci	r24, 0xFF	; 255
    489a:	9f 4f       	sbci	r25, 0xFF	; 255
    489c:	19 f0       	breq	.+6      	; 0x48a4 <main+0x54a>
	{
		reportSuccess();
    489e:	0e 94 18 31 	call	0x6230	; 0x6230 <reportSuccess>
    48a2:	06 c0       	rjmp	.+12     	; 0x48b0 <main+0x556>
	}
	else
	{
		printf("Couldn't create new address in new wallet\n");
    48a4:	88 e7       	ldi	r24, 0x78	; 120
    48a6:	96 e0       	ldi	r25, 0x06	; 6
    48a8:	0e 94 f5 3e 	call	0x7dea	; 0x7dea <puts>
		reportFailure();
    48ac:	0e 94 22 31 	call	0x6244	; 0x6244 <reportFailure>
	}

	// newWallet() shouldn't overwrite an existing wallet.
	if (newWallet(0, name, false, NULL, false, NULL, 0) == WALLET_ALREADY_EXISTS)
    48b0:	a1 2c       	mov	r10, r1
    48b2:	b1 2c       	mov	r11, r1
    48b4:	c1 2c       	mov	r12, r1
    48b6:	d1 2c       	mov	r13, r1
    48b8:	e1 2c       	mov	r14, r1
    48ba:	00 e0       	ldi	r16, 0x00	; 0
    48bc:	10 e0       	ldi	r17, 0x00	; 0
    48be:	20 e0       	ldi	r18, 0x00	; 0
    48c0:	ae 01       	movw	r20, r28
    48c2:	4f 57       	subi	r20, 0x7F	; 127
    48c4:	5f 4f       	sbci	r21, 0xFF	; 255
    48c6:	60 e0       	ldi	r22, 0x00	; 0
    48c8:	70 e0       	ldi	r23, 0x00	; 0
    48ca:	cb 01       	movw	r24, r22
    48cc:	0e 94 20 39 	call	0x7240	; 0x7240 <newWallet>
    48d0:	8d 30       	cpi	r24, 0x0D	; 13
    48d2:	19 f4       	brne	.+6      	; 0x48da <main+0x580>
	{
		reportSuccess();
    48d4:	0e 94 18 31 	call	0x6230	; 0x6230 <reportSuccess>
    48d8:	06 c0       	rjmp	.+12     	; 0x48e6 <main+0x58c>
	}
	else
	{
		printf("newWallet() overwrites existing wallet\n");
    48da:	82 ea       	ldi	r24, 0xA2	; 162
    48dc:	96 e0       	ldi	r25, 0x06	; 6
    48de:	0e 94 f5 3e 	call	0x7dea	; 0x7dea <puts>
		reportFailure();
    48e2:	0e 94 22 31 	call	0x6244	; 0x6244 <reportFailure>
		printf("deleteWallet() isn't deleting wallet\n");
		reportFailure();
	}
*/
	
}
    48e6:	80 e0       	ldi	r24, 0x00	; 0
    48e8:	90 e0       	ldi	r25, 0x00	; 0
    48ea:	c2 54       	subi	r28, 0x42	; 66
    48ec:	da 4f       	sbci	r29, 0xFA	; 250
    48ee:	0f b6       	in	r0, 0x3f	; 63
    48f0:	f8 94       	cli
    48f2:	de bf       	out	0x3e, r29	; 62
    48f4:	0f be       	out	0x3f, r0	; 63
    48f6:	cd bf       	out	0x3d, r28	; 61
    48f8:	df 91       	pop	r29
    48fa:	cf 91       	pop	r28
    48fc:	1f 91       	pop	r17
    48fe:	0f 91       	pop	r16
    4900:	ff 90       	pop	r15
    4902:	ef 90       	pop	r14
    4904:	df 90       	pop	r13
    4906:	cf 90       	pop	r12
    4908:	bf 90       	pop	r11
    490a:	af 90       	pop	r10
    490c:	08 95       	ret

0000490e <fatalError>:
/** This will be called whenever something very unexpected occurs. This
  * function must not return. */
void fatalError(void)
{
	//streamError();
	cli();
    490e:	f8 94       	cli
    4910:	ff cf       	rjmp	.-2      	; 0x4910 <fatalError+0x2>

00004912 <pbkdf2>:
  * \param salt_length The length (in bytes) of the salt.
  * \warning salt cannot be too long; salt_length must be less than or equal
  *          to #SHA512_HASH_LENGTH - 4.
  */
void pbkdf2(uint8_t *out, const uint8_t *password, const unsigned int password_length, const uint8_t *salt, const unsigned int salt_length)
{
    4912:	6f 92       	push	r6
    4914:	7f 92       	push	r7
    4916:	8f 92       	push	r8
    4918:	9f 92       	push	r9
    491a:	af 92       	push	r10
    491c:	bf 92       	push	r11
    491e:	cf 92       	push	r12
    4920:	df 92       	push	r13
    4922:	ef 92       	push	r14
    4924:	ff 92       	push	r15
    4926:	0f 93       	push	r16
    4928:	1f 93       	push	r17
    492a:	cf 93       	push	r28
    492c:	df 93       	push	r29
    492e:	cd b7       	in	r28, 0x3d	; 61
    4930:	de b7       	in	r29, 0x3e	; 62
    4932:	c0 58       	subi	r28, 0x80	; 128
    4934:	d1 09       	sbc	r29, r1
    4936:	0f b6       	in	r0, 0x3f	; 63
    4938:	f8 94       	cli
    493a:	de bf       	out	0x3e, r29	; 62
    493c:	0f be       	out	0x3f, r0	; 63
    493e:	cd bf       	out	0x3d, r28	; 61
    4940:	5c 01       	movw	r10, r24
    4942:	4b 01       	movw	r8, r22
    4944:	3a 01       	movw	r6, r20
	unsigned int u_length;
	uint32_t num_iterations;
	uint32_t i;
	unsigned int j;

	memset(out, 0, SHA512_HASH_LENGTH);
    4946:	80 e4       	ldi	r24, 0x40	; 64
    4948:	d5 01       	movw	r26, r10
    494a:	e8 2f       	mov	r30, r24
    494c:	1d 92       	st	X+, r1
    494e:	ea 95       	dec	r30
    4950:	e9 f7       	brne	.-6      	; 0x494c <pbkdf2+0x3a>
	memset(u, 0, sizeof(u));
    4952:	fe 01       	movw	r30, r28
    4954:	31 96       	adiw	r30, 0x01	; 1
    4956:	df 01       	movw	r26, r30
    4958:	1d 92       	st	X+, r1
    495a:	8a 95       	dec	r24
    495c:	e9 f7       	brne	.-6      	; 0x4958 <pbkdf2+0x46>
	if (salt_length > (SHA512_HASH_LENGTH - 4))
    495e:	0d 33       	cpi	r16, 0x3D	; 61
    4960:	11 05       	cpc	r17, r1
    4962:	10 f0       	brcs	.+4      	; 0x4968 <pbkdf2+0x56>
	{
		// Salt too long.
		fatalError();
    4964:	d4 df       	rcall	.-88     	; 0x490e <fatalError>
    4966:	3d c0       	rjmp	.+122    	; 0x49e2 <pbkdf2+0xd0>
	}
	else
	{
		u_length = salt_length;
	}
	memcpy(u, salt, u_length);
    4968:	a8 01       	movw	r20, r16
    496a:	b9 01       	movw	r22, r18
    496c:	ce 01       	movw	r24, r28
    496e:	01 96       	adiw	r24, 0x01	; 1
    4970:	0e 94 83 3e 	call	0x7d06	; 0x7d06 <memcpy>
	writeU32BigEndian(&(u[u_length]), 1);
    4974:	41 e0       	ldi	r20, 0x01	; 1
    4976:	50 e0       	ldi	r21, 0x00	; 0
    4978:	60 e0       	ldi	r22, 0x00	; 0
    497a:	70 e0       	ldi	r23, 0x00	; 0
    497c:	81 e0       	ldi	r24, 0x01	; 1
    497e:	90 e0       	ldi	r25, 0x00	; 0
    4980:	8c 0f       	add	r24, r28
    4982:	9d 1f       	adc	r25, r29
    4984:	80 0f       	add	r24, r16
    4986:	91 1f       	adc	r25, r17
    4988:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <writeU32BigEndian>
	u_length += 4;
    498c:	0c 5f       	subi	r16, 0xFC	; 252
    498e:	1f 4f       	sbci	r17, 0xFF	; 255
    4990:	c1 2c       	mov	r12, r1
    4992:	d1 2c       	mov	r13, r1

	num_iterations = getPBKDF2Iterations();
	for (i = 0; i < num_iterations; i++)
	{
		hmacSha512(hmac_result, password, password_length, u, u_length);
    4994:	7e 01       	movw	r14, r28
    4996:	b1 e4       	ldi	r27, 0x41	; 65
    4998:	eb 0e       	add	r14, r27
    499a:	f1 1c       	adc	r15, r1
    499c:	9e 01       	movw	r18, r28
    499e:	2f 5f       	subi	r18, 0xFF	; 255
    49a0:	3f 4f       	sbci	r19, 0xFF	; 255
    49a2:	a3 01       	movw	r20, r6
    49a4:	b4 01       	movw	r22, r8
    49a6:	c7 01       	movw	r24, r14
    49a8:	a2 db       	rcall	.-2236   	; 0x40ee <hmacSha512>
		memcpy(u, hmac_result, sizeof(u));
    49aa:	80 e4       	ldi	r24, 0x40	; 64
    49ac:	f7 01       	movw	r30, r14
    49ae:	de 01       	movw	r26, r28
    49b0:	11 96       	adiw	r26, 0x01	; 1
    49b2:	01 90       	ld	r0, Z+
    49b4:	0d 92       	st	X+, r0
    49b6:	8a 95       	dec	r24
    49b8:	e1 f7       	brne	.-8      	; 0x49b2 <pbkdf2+0xa0>
    49ba:	de 01       	movw	r26, r28
    49bc:	11 96       	adiw	r26, 0x01	; 1
    49be:	f5 01       	movw	r30, r10
    49c0:	97 01       	movw	r18, r14
		u_length = SHA512_HASH_LENGTH;
		for (j = 0; j < SHA512_HASH_LENGTH; j++)
		{
			out[j] ^= u[j];
    49c2:	8d 91       	ld	r24, X+
    49c4:	90 81       	ld	r25, Z
    49c6:	89 27       	eor	r24, r25
    49c8:	81 93       	st	Z+, r24
	for (i = 0; i < num_iterations; i++)
	{
		hmacSha512(hmac_result, password, password_length, u, u_length);
		memcpy(u, hmac_result, sizeof(u));
		u_length = SHA512_HASH_LENGTH;
		for (j = 0; j < SHA512_HASH_LENGTH; j++)
    49ca:	a2 17       	cp	r26, r18
    49cc:	b3 07       	cpc	r27, r19
    49ce:	c9 f7       	brne	.-14     	; 0x49c2 <pbkdf2+0xb0>
    49d0:	ef ef       	ldi	r30, 0xFF	; 255
    49d2:	ce 1a       	sub	r12, r30
    49d4:	de 0a       	sbc	r13, r30
	num_iterations = getPBKDF2Iterations();
	for (i = 0; i < num_iterations; i++)
	{
		hmacSha512(hmac_result, password, password_length, u, u_length);
		memcpy(u, hmac_result, sizeof(u));
		u_length = SHA512_HASH_LENGTH;
    49d6:	00 e4       	ldi	r16, 0x40	; 64
    49d8:	10 e0       	ldi	r17, 0x00	; 0
	memcpy(u, salt, u_length);
	writeU32BigEndian(&(u[u_length]), 1);
	u_length += 4;

	num_iterations = getPBKDF2Iterations();
	for (i = 0; i < num_iterations; i++)
    49da:	c1 14       	cp	r12, r1
    49dc:	f4 e0       	ldi	r31, 0x04	; 4
    49de:	df 06       	cpc	r13, r31
    49e0:	e9 f6       	brne	.-70     	; 0x499c <pbkdf2+0x8a>
		for (j = 0; j < SHA512_HASH_LENGTH; j++)
		{
			out[j] ^= u[j];
		}
	}
}
    49e2:	c0 58       	subi	r28, 0x80	; 128
    49e4:	df 4f       	sbci	r29, 0xFF	; 255
    49e6:	0f b6       	in	r0, 0x3f	; 63
    49e8:	f8 94       	cli
    49ea:	de bf       	out	0x3e, r29	; 62
    49ec:	0f be       	out	0x3f, r0	; 63
    49ee:	cd bf       	out	0x3d, r28	; 61
    49f0:	df 91       	pop	r29
    49f2:	cf 91       	pop	r28
    49f4:	1f 91       	pop	r17
    49f6:	0f 91       	pop	r16
    49f8:	ff 90       	pop	r15
    49fa:	ef 90       	pop	r14
    49fc:	df 90       	pop	r13
    49fe:	cf 90       	pop	r12
    4a00:	bf 90       	pop	r11
    4a02:	af 90       	pop	r10
    4a04:	9f 90       	pop	r9
    4a06:	8f 90       	pop	r8
    4a08:	7f 90       	pop	r7
    4a0a:	6f 90       	pop	r6
    4a0c:	08 95       	ret

00004a0e <calculateEntropyPoolChecksum>:
	uint8_t one_byte;

	nonVolatileRead(&one_byte, PARTITION_GLOBAL, ADDRESS_POOL_CHECKSUM, 1);
	one_byte = (uint8_t)(one_byte ^ 0xde);
	nonVolatileWrite(&one_byte, PARTITION_GLOBAL, ADDRESS_POOL_CHECKSUM, 1);
}
    4a0e:	cf 92       	push	r12
    4a10:	df 92       	push	r13
    4a12:	ef 92       	push	r14
    4a14:	ff 92       	push	r15
    4a16:	0f 93       	push	r16
    4a18:	1f 93       	push	r17
    4a1a:	cf 93       	push	r28
    4a1c:	df 93       	push	r29
    4a1e:	cd b7       	in	r28, 0x3d	; 61
    4a20:	de b7       	in	r29, 0x3e	; 62
    4a22:	c9 58       	subi	r28, 0x89	; 137
    4a24:	d1 09       	sbc	r29, r1
    4a26:	0f b6       	in	r0, 0x3f	; 63
    4a28:	f8 94       	cli
    4a2a:	de bf       	out	0x3e, r29	; 62
    4a2c:	0f be       	out	0x3f, r0	; 63
    4a2e:	cd bf       	out	0x3d, r28	; 61
    4a30:	6c 01       	movw	r12, r24
    4a32:	7b 01       	movw	r14, r22
    4a34:	ce 01       	movw	r24, r28
    4a36:	01 96       	adiw	r24, 0x01	; 1
    4a38:	84 d6       	rcall	.+3336   	; 0x5742 <ripemd160Begin>
    4a3a:	87 01       	movw	r16, r14
    4a3c:	80 e2       	ldi	r24, 0x20	; 32
    4a3e:	e8 0e       	add	r14, r24
    4a40:	f1 1c       	adc	r15, r1
    4a42:	f8 01       	movw	r30, r16
    4a44:	61 91       	ld	r22, Z+
    4a46:	8f 01       	movw	r16, r30
    4a48:	ce 01       	movw	r24, r28
    4a4a:	01 96       	adiw	r24, 0x01	; 1
    4a4c:	b5 d6       	rcall	.+3434   	; 0x57b8 <ripemd160WriteByte>
    4a4e:	0e 15       	cp	r16, r14
    4a50:	1f 05       	cpc	r17, r15
    4a52:	b9 f7       	brne	.-18     	; 0x4a42 <calculateEntropyPoolChecksum+0x34>
    4a54:	ce 01       	movw	r24, r28
    4a56:	01 96       	adiw	r24, 0x01	; 1
    4a58:	b2 d6       	rcall	.+3428   	; 0x57be <ripemd160Finish>
    4a5a:	41 e0       	ldi	r20, 0x01	; 1
    4a5c:	be 01       	movw	r22, r28
    4a5e:	6f 5f       	subi	r22, 0xFF	; 255
    4a60:	7f 4f       	sbci	r23, 0xFF	; 255
    4a62:	ce 01       	movw	r24, r28
    4a64:	86 59       	subi	r24, 0x96	; 150
    4a66:	9f 4f       	sbci	r25, 0xFF	; 255
    4a68:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <writeHashToByteArray>
    4a6c:	80 e1       	ldi	r24, 0x10	; 16
    4a6e:	fe 01       	movw	r30, r28
    4a70:	e6 59       	subi	r30, 0x96	; 150
    4a72:	ff 4f       	sbci	r31, 0xFF	; 255
    4a74:	d6 01       	movw	r26, r12
    4a76:	01 90       	ld	r0, Z+
    4a78:	0d 92       	st	X+, r0
    4a7a:	8a 95       	dec	r24
    4a7c:	e1 f7       	brne	.-8      	; 0x4a76 <calculateEntropyPoolChecksum+0x68>
    4a7e:	c7 57       	subi	r28, 0x77	; 119
    4a80:	df 4f       	sbci	r29, 0xFF	; 255
    4a82:	0f b6       	in	r0, 0x3f	; 63
    4a84:	f8 94       	cli
    4a86:	de bf       	out	0x3e, r29	; 62
    4a88:	0f be       	out	0x3f, r0	; 63
    4a8a:	cd bf       	out	0x3d, r28	; 61
    4a8c:	df 91       	pop	r29
    4a8e:	cf 91       	pop	r28
    4a90:	1f 91       	pop	r17
    4a92:	0f 91       	pop	r16
    4a94:	ff 90       	pop	r15
    4a96:	ef 90       	pop	r14
    4a98:	df 90       	pop	r13
    4a9a:	cf 90       	pop	r12
    4a9c:	08 95       	ret

00004a9e <clearParentPublicKeyCache>:
    4a9e:	81 e4       	ldi	r24, 0x41	; 65
    4aa0:	e6 ed       	ldi	r30, 0xD6	; 214
    4aa2:	f7 e0       	ldi	r31, 0x07	; 7
    4aa4:	df 01       	movw	r26, r30
    4aa6:	1d 92       	st	X+, r1
    4aa8:	8a 95       	dec	r24
    4aaa:	e9 f7       	brne	.-6      	; 0x4aa6 <clearParentPublicKeyCache+0x8>
    4aac:	10 92 d5 07 	sts	0x07D5, r1	; 0x8007d5 <cached_parent_public_key_valid>
    4ab0:	08 95       	ret

00004ab2 <setEntropyPool>:
    4ab2:	cf 92       	push	r12
    4ab4:	df 92       	push	r13
    4ab6:	ef 92       	push	r14
    4ab8:	ff 92       	push	r15
    4aba:	0f 93       	push	r16
    4abc:	1f 93       	push	r17
    4abe:	cf 93       	push	r28
    4ac0:	df 93       	push	r29
    4ac2:	cd b7       	in	r28, 0x3d	; 61
    4ac4:	de b7       	in	r29, 0x3e	; 62
    4ac6:	60 97       	sbiw	r28, 0x10	; 16
    4ac8:	0f b6       	in	r0, 0x3f	; 63
    4aca:	f8 94       	cli
    4acc:	de bf       	out	0x3e, r29	; 62
    4ace:	0f be       	out	0x3f, r0	; 63
    4ad0:	cd bf       	out	0x3d, r28	; 61
    4ad2:	6c 01       	movw	r12, r24
    4ad4:	10 e2       	ldi	r17, 0x20	; 32
    4ad6:	e1 2e       	mov	r14, r17
    4ad8:	f1 2c       	mov	r15, r1
    4ada:	00 e0       	ldi	r16, 0x00	; 0
    4adc:	10 e0       	ldi	r17, 0x00	; 0
    4ade:	20 e4       	ldi	r18, 0x40	; 64
    4ae0:	30 e0       	ldi	r19, 0x00	; 0
    4ae2:	40 e0       	ldi	r20, 0x00	; 0
    4ae4:	50 e0       	ldi	r21, 0x00	; 0
    4ae6:	60 e0       	ldi	r22, 0x00	; 0
    4ae8:	0e 94 e3 33 	call	0x67c6	; 0x67c6 <nonVolatileWrite>
    4aec:	81 11       	cpse	r24, r1
    4aee:	1b c0       	rjmp	.+54     	; 0x4b26 <setEntropyPool+0x74>
    4af0:	b6 01       	movw	r22, r12
    4af2:	ce 01       	movw	r24, r28
    4af4:	01 96       	adiw	r24, 0x01	; 1
    4af6:	8b df       	rcall	.-234    	; 0x4a0e <calculateEntropyPoolChecksum>
    4af8:	10 e1       	ldi	r17, 0x10	; 16
    4afa:	e1 2e       	mov	r14, r17
    4afc:	f1 2c       	mov	r15, r1
    4afe:	00 e0       	ldi	r16, 0x00	; 0
    4b00:	10 e0       	ldi	r17, 0x00	; 0
    4b02:	20 e6       	ldi	r18, 0x60	; 96
    4b04:	30 e0       	ldi	r19, 0x00	; 0
    4b06:	40 e0       	ldi	r20, 0x00	; 0
    4b08:	50 e0       	ldi	r21, 0x00	; 0
    4b0a:	60 e0       	ldi	r22, 0x00	; 0
    4b0c:	ce 01       	movw	r24, r28
    4b0e:	01 96       	adiw	r24, 0x01	; 1
    4b10:	0e 94 e3 33 	call	0x67c6	; 0x67c6 <nonVolatileWrite>
    4b14:	81 11       	cpse	r24, r1
    4b16:	09 c0       	rjmp	.+18     	; 0x4b2a <setEntropyPool+0x78>
    4b18:	0e 94 4e 3a 	call	0x749c	; 0x749c <nonVolatileFlush>
    4b1c:	91 e0       	ldi	r25, 0x01	; 1
    4b1e:	81 11       	cpse	r24, r1
    4b20:	05 c0       	rjmp	.+10     	; 0x4b2c <setEntropyPool+0x7a>
    4b22:	90 e0       	ldi	r25, 0x00	; 0
    4b24:	03 c0       	rjmp	.+6      	; 0x4b2c <setEntropyPool+0x7a>
    4b26:	91 e0       	ldi	r25, 0x01	; 1
    4b28:	01 c0       	rjmp	.+2      	; 0x4b2c <setEntropyPool+0x7a>
    4b2a:	91 e0       	ldi	r25, 0x01	; 1
    4b2c:	89 2f       	mov	r24, r25
    4b2e:	60 96       	adiw	r28, 0x10	; 16
    4b30:	0f b6       	in	r0, 0x3f	; 63
    4b32:	f8 94       	cli
    4b34:	de bf       	out	0x3e, r29	; 62
    4b36:	0f be       	out	0x3f, r0	; 63
    4b38:	cd bf       	out	0x3d, r28	; 61
    4b3a:	df 91       	pop	r29
    4b3c:	cf 91       	pop	r28
    4b3e:	1f 91       	pop	r17
    4b40:	0f 91       	pop	r16
    4b42:	ff 90       	pop	r15
    4b44:	ef 90       	pop	r14
    4b46:	df 90       	pop	r13
    4b48:	cf 90       	pop	r12
    4b4a:	08 95       	ret

00004b4c <getEntropyPool>:
    4b4c:	cf 92       	push	r12
    4b4e:	df 92       	push	r13
    4b50:	ef 92       	push	r14
    4b52:	ff 92       	push	r15
    4b54:	0f 93       	push	r16
    4b56:	1f 93       	push	r17
    4b58:	cf 93       	push	r28
    4b5a:	df 93       	push	r29
    4b5c:	cd b7       	in	r28, 0x3d	; 61
    4b5e:	de b7       	in	r29, 0x3e	; 62
    4b60:	a0 97       	sbiw	r28, 0x20	; 32
    4b62:	0f b6       	in	r0, 0x3f	; 63
    4b64:	f8 94       	cli
    4b66:	de bf       	out	0x3e, r29	; 62
    4b68:	0f be       	out	0x3f, r0	; 63
    4b6a:	cd bf       	out	0x3d, r28	; 61
    4b6c:	6c 01       	movw	r12, r24
    4b6e:	10 e2       	ldi	r17, 0x20	; 32
    4b70:	e1 2e       	mov	r14, r17
    4b72:	f1 2c       	mov	r15, r1
    4b74:	00 e0       	ldi	r16, 0x00	; 0
    4b76:	10 e0       	ldi	r17, 0x00	; 0
    4b78:	20 e4       	ldi	r18, 0x40	; 64
    4b7a:	30 e0       	ldi	r19, 0x00	; 0
    4b7c:	40 e0       	ldi	r20, 0x00	; 0
    4b7e:	50 e0       	ldi	r21, 0x00	; 0
    4b80:	60 e0       	ldi	r22, 0x00	; 0
    4b82:	0e 94 46 37 	call	0x6e8c	; 0x6e8c <nonVolatileRead>
    4b86:	81 11       	cpse	r24, r1
    4b88:	22 c0       	rjmp	.+68     	; 0x4bce <getEntropyPool+0x82>
    4b8a:	b6 01       	movw	r22, r12
    4b8c:	ce 01       	movw	r24, r28
    4b8e:	41 96       	adiw	r24, 0x11	; 17
    4b90:	3e df       	rcall	.-388    	; 0x4a0e <calculateEntropyPoolChecksum>
    4b92:	10 e1       	ldi	r17, 0x10	; 16
    4b94:	e1 2e       	mov	r14, r17
    4b96:	f1 2c       	mov	r15, r1
    4b98:	00 e0       	ldi	r16, 0x00	; 0
    4b9a:	10 e0       	ldi	r17, 0x00	; 0
    4b9c:	20 e6       	ldi	r18, 0x60	; 96
    4b9e:	30 e0       	ldi	r19, 0x00	; 0
    4ba0:	40 e0       	ldi	r20, 0x00	; 0
    4ba2:	50 e0       	ldi	r21, 0x00	; 0
    4ba4:	60 e0       	ldi	r22, 0x00	; 0
    4ba6:	ce 01       	movw	r24, r28
    4ba8:	01 96       	adiw	r24, 0x01	; 1
    4baa:	0e 94 46 37 	call	0x6e8c	; 0x6e8c <nonVolatileRead>
    4bae:	81 11       	cpse	r24, r1
    4bb0:	10 c0       	rjmp	.+32     	; 0x4bd2 <getEntropyPool+0x86>
    4bb2:	40 e1       	ldi	r20, 0x10	; 16
    4bb4:	50 e0       	ldi	r21, 0x00	; 0
    4bb6:	be 01       	movw	r22, r28
    4bb8:	6f 5e       	subi	r22, 0xEF	; 239
    4bba:	7f 4f       	sbci	r23, 0xFF	; 255
    4bbc:	ce 01       	movw	r24, r28
    4bbe:	01 96       	adiw	r24, 0x01	; 1
    4bc0:	0e 94 76 3e 	call	0x7cec	; 0x7cec <memcmp>
    4bc4:	21 e0       	ldi	r18, 0x01	; 1
    4bc6:	89 2b       	or	r24, r25
    4bc8:	29 f4       	brne	.+10     	; 0x4bd4 <getEntropyPool+0x88>
    4bca:	20 e0       	ldi	r18, 0x00	; 0
    4bcc:	03 c0       	rjmp	.+6      	; 0x4bd4 <getEntropyPool+0x88>
    4bce:	21 e0       	ldi	r18, 0x01	; 1
    4bd0:	01 c0       	rjmp	.+2      	; 0x4bd4 <getEntropyPool+0x88>
    4bd2:	21 e0       	ldi	r18, 0x01	; 1
    4bd4:	82 2f       	mov	r24, r18
    4bd6:	a0 96       	adiw	r28, 0x20	; 32
    4bd8:	0f b6       	in	r0, 0x3f	; 63
    4bda:	f8 94       	cli
    4bdc:	de bf       	out	0x3e, r29	; 62
    4bde:	0f be       	out	0x3f, r0	; 63
    4be0:	cd bf       	out	0x3d, r28	; 61
    4be2:	df 91       	pop	r29
    4be4:	cf 91       	pop	r28
    4be6:	1f 91       	pop	r17
    4be8:	0f 91       	pop	r16
    4bea:	ff 90       	pop	r15
    4bec:	ef 90       	pop	r14
    4bee:	df 90       	pop	r13
    4bf0:	cf 90       	pop	r12
    4bf2:	08 95       	ret

00004bf4 <initialiseEntropyPool>:
    4bf4:	cf 92       	push	r12
    4bf6:	df 92       	push	r13
    4bf8:	ef 92       	push	r14
    4bfa:	ff 92       	push	r15
    4bfc:	0f 93       	push	r16
    4bfe:	1f 93       	push	r17
    4c00:	cf 93       	push	r28
    4c02:	df 93       	push	r29
    4c04:	cd b7       	in	r28, 0x3d	; 61
    4c06:	de b7       	in	r29, 0x3e	; 62
    4c08:	c9 58       	subi	r28, 0x89	; 137
    4c0a:	d1 09       	sbc	r29, r1
    4c0c:	0f b6       	in	r0, 0x3f	; 63
    4c0e:	f8 94       	cli
    4c10:	de bf       	out	0x3e, r29	; 62
    4c12:	0f be       	out	0x3f, r0	; 63
    4c14:	cd bf       	out	0x3d, r28	; 61
    4c16:	c8 2e       	mov	r12, r24
    4c18:	d9 2e       	mov	r13, r25
    4c1a:	ce 01       	movw	r24, r28
    4c1c:	86 59       	subi	r24, 0x96	; 150
    4c1e:	9f 4f       	sbci	r25, 0xFF	; 255
    4c20:	95 df       	rcall	.-214    	; 0x4b4c <getEntropyPool>
    4c22:	88 23       	and	r24, r24
    4c24:	21 f0       	breq	.+8      	; 0x4c2e <initialiseEntropyPool+0x3a>
    4c26:	8c 2d       	mov	r24, r12
    4c28:	9d 2d       	mov	r25, r13
    4c2a:	43 df       	rcall	.-378    	; 0x4ab2 <setEntropyPool>
    4c2c:	2f c0       	rjmp	.+94     	; 0x4c8c <initialiseEntropyPool+0x98>
    4c2e:	ce 01       	movw	r24, r28
    4c30:	01 96       	adiw	r24, 0x01	; 1
    4c32:	0e 94 81 30 	call	0x6102	; 0x6102 <sha256Begin>
    4c36:	8e 01       	movw	r16, r28
    4c38:	06 59       	subi	r16, 0x96	; 150
    4c3a:	1f 4f       	sbci	r17, 0xFF	; 255
    4c3c:	ec 2c       	mov	r14, r12
    4c3e:	fd 2c       	mov	r15, r13
    4c40:	68 01       	movw	r12, r16
    4c42:	80 e2       	ldi	r24, 0x20	; 32
    4c44:	c8 0e       	add	r12, r24
    4c46:	d1 1c       	adc	r13, r1
    4c48:	f8 01       	movw	r30, r16
    4c4a:	61 91       	ld	r22, Z+
    4c4c:	8f 01       	movw	r16, r30
    4c4e:	ce 01       	movw	r24, r28
    4c50:	01 96       	adiw	r24, 0x01	; 1
    4c52:	0e 94 d5 30 	call	0x61aa	; 0x61aa <sha256WriteByte>
    4c56:	f7 01       	movw	r30, r14
    4c58:	61 91       	ld	r22, Z+
    4c5a:	7f 01       	movw	r14, r30
    4c5c:	ce 01       	movw	r24, r28
    4c5e:	01 96       	adiw	r24, 0x01	; 1
    4c60:	0e 94 d5 30 	call	0x61aa	; 0x61aa <sha256WriteByte>
    4c64:	0c 15       	cp	r16, r12
    4c66:	1d 05       	cpc	r17, r13
    4c68:	79 f7       	brne	.-34     	; 0x4c48 <initialiseEntropyPool+0x54>
    4c6a:	ce 01       	movw	r24, r28
    4c6c:	01 96       	adiw	r24, 0x01	; 1
    4c6e:	0e 94 d8 30 	call	0x61b0	; 0x61b0 <sha256Finish>
    4c72:	41 e0       	ldi	r20, 0x01	; 1
    4c74:	be 01       	movw	r22, r28
    4c76:	6f 5f       	subi	r22, 0xFF	; 255
    4c78:	7f 4f       	sbci	r23, 0xFF	; 255
    4c7a:	ce 01       	movw	r24, r28
    4c7c:	86 59       	subi	r24, 0x96	; 150
    4c7e:	9f 4f       	sbci	r25, 0xFF	; 255
    4c80:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <writeHashToByteArray>
    4c84:	ce 01       	movw	r24, r28
    4c86:	86 59       	subi	r24, 0x96	; 150
    4c88:	9f 4f       	sbci	r25, 0xFF	; 255
    4c8a:	13 df       	rcall	.-474    	; 0x4ab2 <setEntropyPool>
    4c8c:	c7 57       	subi	r28, 0x77	; 119
    4c8e:	df 4f       	sbci	r29, 0xFF	; 255
    4c90:	0f b6       	in	r0, 0x3f	; 63
    4c92:	f8 94       	cli
    4c94:	de bf       	out	0x3e, r29	; 62
    4c96:	0f be       	out	0x3f, r0	; 63
    4c98:	cd bf       	out	0x3d, r28	; 61
    4c9a:	df 91       	pop	r29
    4c9c:	cf 91       	pop	r28
    4c9e:	1f 91       	pop	r17
    4ca0:	0f 91       	pop	r16
    4ca2:	ff 90       	pop	r15
    4ca4:	ef 90       	pop	r14
    4ca6:	df 90       	pop	r13
    4ca8:	cf 90       	pop	r12
    4caa:	08 95       	ret

00004cac <generateDeterministic256>:
    4cac:	8f 92       	push	r8
    4cae:	9f 92       	push	r9
    4cb0:	af 92       	push	r10
    4cb2:	bf 92       	push	r11
    4cb4:	ef 92       	push	r14
    4cb6:	ff 92       	push	r15
    4cb8:	0f 93       	push	r16
    4cba:	1f 93       	push	r17
    4cbc:	cf 93       	push	r28
    4cbe:	df 93       	push	r29
    4cc0:	cd b7       	in	r28, 0x3d	; 61
    4cc2:	de b7       	in	r29, 0x3e	; 62
    4cc4:	c5 5a       	subi	r28, 0xA5	; 165
    4cc6:	d1 09       	sbc	r29, r1
    4cc8:	0f b6       	in	r0, 0x3f	; 63
    4cca:	f8 94       	cli
    4ccc:	de bf       	out	0x3e, r29	; 62
    4cce:	0f be       	out	0x3f, r0	; 63
    4cd0:	cd bf       	out	0x3d, r28	; 61
    4cd2:	7c 01       	movw	r14, r24
    4cd4:	8b 01       	movw	r16, r22
    4cd6:	49 01       	movw	r8, r18
    4cd8:	5a 01       	movw	r10, r20
    4cda:	0e 94 b1 0a 	call	0x1562	; 0x1562 <setFieldToN>
    4cde:	80 e2       	ldi	r24, 0x20	; 32
    4ce0:	f8 01       	movw	r30, r16
    4ce2:	de 01       	movw	r26, r28
    4ce4:	11 96       	adiw	r26, 0x01	; 1
    4ce6:	01 90       	ld	r0, Z+
    4ce8:	0d 92       	st	X+, r0
    4cea:	8a 95       	dec	r24
    4cec:	e1 f7       	brne	.-8      	; 0x4ce6 <generateDeterministic256+0x3a>
    4cee:	ce 01       	movw	r24, r28
    4cf0:	01 96       	adiw	r24, 0x01	; 1
    4cf2:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <swapEndian256>
    4cf6:	be 01       	movw	r22, r28
    4cf8:	6f 5f       	subi	r22, 0xFF	; 255
    4cfa:	7f 4f       	sbci	r23, 0xFF	; 255
    4cfc:	cb 01       	movw	r24, r22
    4cfe:	0e 94 44 06 	call	0xc88	; 0xc88 <bigModulo>
    4d02:	ce 01       	movw	r24, r28
    4d04:	01 96       	adiw	r24, 0x01	; 1
    4d06:	0e 94 d2 05 	call	0xba4	; 0xba4 <bigIsZero>
    4d0a:	81 11       	cpse	r24, r1
    4d0c:	63 c0       	rjmp	.+198    	; 0x4dd4 <generateDeterministic256+0x128>
    4d0e:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <cached_parent_public_key_valid>
    4d12:	81 11       	cpse	r24, r1
    4d14:	0e c0       	rjmp	.+28     	; 0x4d32 <generateDeterministic256+0x86>
    4d16:	86 ed       	ldi	r24, 0xD6	; 214
    4d18:	97 e0       	ldi	r25, 0x07	; 7
    4d1a:	0e 94 3f 0b 	call	0x167e	; 0x167e <setToG>
    4d1e:	be 01       	movw	r22, r28
    4d20:	6f 5f       	subi	r22, 0xFF	; 255
    4d22:	7f 4f       	sbci	r23, 0xFF	; 255
    4d24:	86 ed       	ldi	r24, 0xD6	; 214
    4d26:	97 e0       	ldi	r25, 0x07	; 7
    4d28:	0e 94 b8 0a 	call	0x1570	; 0x1570 <pointMultiply>
    4d2c:	81 e0       	ldi	r24, 0x01	; 1
    4d2e:	80 93 d5 07 	sts	0x07D5, r24	; 0x8007d5 <cached_parent_public_key_valid>
    4d32:	de 01       	movw	r26, r28
    4d34:	af 59       	subi	r26, 0x9F	; 159
    4d36:	bf 4f       	sbci	r27, 0xFF	; 255
    4d38:	84 e0       	ldi	r24, 0x04	; 4
    4d3a:	8d 93       	st	X+, r24
    4d3c:	80 e2       	ldi	r24, 0x20	; 32
    4d3e:	e6 ed       	ldi	r30, 0xD6	; 214
    4d40:	f7 e0       	ldi	r31, 0x07	; 7
    4d42:	01 90       	ld	r0, Z+
    4d44:	0d 92       	st	X+, r0
    4d46:	8a 95       	dec	r24
    4d48:	e1 f7       	brne	.-8      	; 0x4d42 <generateDeterministic256+0x96>
    4d4a:	81 e6       	ldi	r24, 0x61	; 97
    4d4c:	90 e0       	ldi	r25, 0x00	; 0
    4d4e:	8c 0f       	add	r24, r28
    4d50:	9d 1f       	adc	r25, r29
    4d52:	01 96       	adiw	r24, 0x01	; 1
    4d54:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <swapEndian256>
    4d58:	80 e2       	ldi	r24, 0x20	; 32
    4d5a:	e6 ef       	ldi	r30, 0xF6	; 246
    4d5c:	f7 e0       	ldi	r31, 0x07	; 7
    4d5e:	a1 e6       	ldi	r26, 0x61	; 97
    4d60:	b0 e0       	ldi	r27, 0x00	; 0
    4d62:	ac 0f       	add	r26, r28
    4d64:	bd 1f       	adc	r27, r29
    4d66:	91 96       	adiw	r26, 0x21	; 33
    4d68:	01 90       	ld	r0, Z+
    4d6a:	0d 92       	st	X+, r0
    4d6c:	8a 95       	dec	r24
    4d6e:	e1 f7       	brne	.-8      	; 0x4d68 <generateDeterministic256+0xbc>
    4d70:	81 e6       	ldi	r24, 0x61	; 97
    4d72:	90 e0       	ldi	r25, 0x00	; 0
    4d74:	8c 0f       	add	r24, r28
    4d76:	9d 1f       	adc	r25, r29
    4d78:	81 96       	adiw	r24, 0x21	; 33
    4d7a:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <swapEndian256>
    4d7e:	b5 01       	movw	r22, r10
    4d80:	a4 01       	movw	r20, r8
    4d82:	ce 01       	movw	r24, r28
    4d84:	8e 55       	subi	r24, 0x5E	; 94
    4d86:	9f 4f       	sbci	r25, 0xFF	; 255
    4d88:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <writeU32BigEndian>
    4d8c:	b8 01       	movw	r22, r16
    4d8e:	60 5e       	subi	r22, 0xE0	; 224
    4d90:	7f 4f       	sbci	r23, 0xFF	; 255
    4d92:	05 e4       	ldi	r16, 0x45	; 69
    4d94:	10 e0       	ldi	r17, 0x00	; 0
    4d96:	9e 01       	movw	r18, r28
    4d98:	2f 59       	subi	r18, 0x9F	; 159
    4d9a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d9c:	40 e2       	ldi	r20, 0x20	; 32
    4d9e:	50 e0       	ldi	r21, 0x00	; 0
    4da0:	ce 01       	movw	r24, r28
    4da2:	81 96       	adiw	r24, 0x21	; 33
    4da4:	a4 d9       	rcall	.-3256   	; 0x40ee <hmacSha512>
    4da6:	0e 94 b1 0a 	call	0x1562	; 0x1562 <setFieldToN>
    4daa:	ce 01       	movw	r24, r28
    4dac:	81 96       	adiw	r24, 0x21	; 33
    4dae:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <swapEndian256>
    4db2:	be 01       	movw	r22, r28
    4db4:	6f 5d       	subi	r22, 0xDF	; 223
    4db6:	7f 4f       	sbci	r23, 0xFF	; 255
    4db8:	cb 01       	movw	r24, r22
    4dba:	0e 94 44 06 	call	0xc88	; 0xc88 <bigModulo>
    4dbe:	ae 01       	movw	r20, r28
    4dc0:	4f 5f       	subi	r20, 0xFF	; 255
    4dc2:	5f 4f       	sbci	r21, 0xFF	; 255
    4dc4:	be 01       	movw	r22, r28
    4dc6:	6f 5d       	subi	r22, 0xDF	; 223
    4dc8:	7f 4f       	sbci	r23, 0xFF	; 255
    4dca:	c7 01       	movw	r24, r14
    4dcc:	0e 94 92 07 	call	0xf24	; 0xf24 <bigMultiply>
    4dd0:	80 e0       	ldi	r24, 0x00	; 0
    4dd2:	01 c0       	rjmp	.+2      	; 0x4dd6 <generateDeterministic256+0x12a>
    4dd4:	81 e0       	ldi	r24, 0x01	; 1
    4dd6:	cb 55       	subi	r28, 0x5B	; 91
    4dd8:	df 4f       	sbci	r29, 0xFF	; 255
    4dda:	0f b6       	in	r0, 0x3f	; 63
    4ddc:	f8 94       	cli
    4dde:	de bf       	out	0x3e, r29	; 62
    4de0:	0f be       	out	0x3f, r0	; 63
    4de2:	cd bf       	out	0x3d, r28	; 61
    4de4:	df 91       	pop	r29
    4de6:	cf 91       	pop	r28
    4de8:	1f 91       	pop	r17
    4dea:	0f 91       	pop	r16
    4dec:	ff 90       	pop	r15
    4dee:	ef 90       	pop	r14
    4df0:	bf 90       	pop	r11
    4df2:	af 90       	pop	r10
    4df4:	9f 90       	pop	r9
    4df6:	8f 90       	pop	r8
    4df8:	08 95       	ret

00004dfa <initialiseDefaultEntropyPool>:
    4dfa:	cf 93       	push	r28
    4dfc:	df 93       	push	r29
    4dfe:	cd b7       	in	r28, 0x3d	; 61
    4e00:	de b7       	in	r29, 0x3e	; 62
    4e02:	a0 97       	sbiw	r28, 0x20	; 32
    4e04:	0f b6       	in	r0, 0x3f	; 63
    4e06:	f8 94       	cli
    4e08:	de bf       	out	0x3e, r29	; 62
    4e0a:	0f be       	out	0x3f, r0	; 63
    4e0c:	cd bf       	out	0x3d, r28	; 61
    4e0e:	ce 01       	movw	r24, r28
    4e10:	01 96       	adiw	r24, 0x01	; 1
    4e12:	20 e2       	ldi	r18, 0x20	; 32
    4e14:	fc 01       	movw	r30, r24
    4e16:	11 92       	st	Z+, r1
    4e18:	2a 95       	dec	r18
    4e1a:	e9 f7       	brne	.-6      	; 0x4e16 <initialiseDefaultEntropyPool+0x1c>
    4e1c:	eb de       	rcall	.-554    	; 0x4bf4 <initialiseEntropyPool>
    4e1e:	a0 96       	adiw	r28, 0x20	; 32
    4e20:	0f b6       	in	r0, 0x3f	; 63
    4e22:	f8 94       	cli
    4e24:	de bf       	out	0x3e, r29	; 62
    4e26:	0f be       	out	0x3f, r0	; 63
    4e28:	cd bf       	out	0x3d, r28	; 61
    4e2a:	df 91       	pop	r29
    4e2c:	cf 91       	pop	r28
    4e2e:	08 95       	ret

00004e30 <hardwareRandom32Bytes>:
  *               bytes.
  * \return A stupid estimate of the total number of bits (not bytes) of
  *         entropy in the buffer.
  */
int hardwareRandom32Bytes(uint8_t *buffer)
{
    4e30:	cf 93       	push	r28
    4e32:	df 93       	push	r29
    4e34:	ec 01       	movw	r28, r24
	memset(buffer, 0, 32);
    4e36:	80 e2       	ldi	r24, 0x20	; 32
    4e38:	fe 01       	movw	r30, r28
    4e3a:	11 92       	st	Z+, r1
    4e3c:	8a 95       	dec	r24
    4e3e:	e9 f7       	brne	.-6      	; 0x4e3a <hardwareRandom32Bytes+0xa>
	if (!broken_hwrng)
	{
		buffer[0] = (uint8_t)rand();
    4e40:	0e 94 64 3e 	call	0x7cc8	; 0x7cc8 <rand>
    4e44:	88 83       	st	Y, r24
	}
	return 8;
}
    4e46:	88 e0       	ldi	r24, 0x08	; 8
    4e48:	90 e0       	ldi	r25, 0x00	; 0
    4e4a:	df 91       	pop	r29
    4e4c:	cf 91       	pop	r28
    4e4e:	08 95       	ret

00004e50 <getRandom256Internal>:
  *                       but non-volatile memory is being cleared.
  * \return false on success, true if an error (couldn't access
  *         non-volatile memory, or invalid entropy pool checksum) occurred.
  */
static bool getRandom256Internal(BigNum256 n, uint8_t *pool_state, bool use_pool_state)
{
    4e50:	2f 92       	push	r2
    4e52:	3f 92       	push	r3
    4e54:	4f 92       	push	r4
    4e56:	5f 92       	push	r5
    4e58:	7f 92       	push	r7
    4e5a:	8f 92       	push	r8
    4e5c:	9f 92       	push	r9
    4e5e:	af 92       	push	r10
    4e60:	bf 92       	push	r11
    4e62:	cf 92       	push	r12
    4e64:	df 92       	push	r13
    4e66:	ef 92       	push	r14
    4e68:	ff 92       	push	r15
    4e6a:	0f 93       	push	r16
    4e6c:	1f 93       	push	r17
    4e6e:	cf 93       	push	r28
    4e70:	df 93       	push	r29
    4e72:	cd b7       	in	r28, 0x3d	; 61
    4e74:	de b7       	in	r29, 0x3e	; 62
    4e76:	c9 5a       	subi	r28, 0xA9	; 169
    4e78:	d1 09       	sbc	r29, r1
    4e7a:	0f b6       	in	r0, 0x3f	; 63
    4e7c:	f8 94       	cli
    4e7e:	de bf       	out	0x3e, r29	; 62
    4e80:	0f be       	out	0x3f, r0	; 63
    4e82:	cd bf       	out	0x3d, r28	; 61
    4e84:	2c 01       	movw	r4, r24
    4e86:	1b 01       	movw	r2, r22
    4e88:	74 2e       	mov	r7, r20

	// Hash in HWRNG randomness until we've reached the entropy required.
	// This needs to happen before hashing the pool itself due to the
	// possibility of length extension attacks; see below.
	total_entropy = 0;
	sha256Begin(&hs);
    4e8a:	ce 01       	movw	r24, r28
    4e8c:	8f 5b       	subi	r24, 0xBF	; 191
    4e8e:	9f 4f       	sbci	r25, 0xFF	; 255
    4e90:	0e 94 81 30 	call	0x6102	; 0x6102 <sha256Begin>
	uint8_t i;

	// Hash in HWRNG randomness until we've reached the entropy required.
	// This needs to happen before hashing the pool itself due to the
	// possibility of length extension attacks; see below.
	total_entropy = 0;
    4e94:	a1 2c       	mov	r10, r1
    4e96:	b1 2c       	mov	r11, r1
    4e98:	7e 01       	movw	r14, r28
    4e9a:	81 e2       	ldi	r24, 0x21	; 33
    4e9c:	e8 0e       	add	r14, r24
    4e9e:	f1 1c       	adc	r15, r1
	sha256Begin(&hs);
	while (total_entropy < (256 * ENTROPY_SAFETY_FACTOR))
	{
		r = hardwareRandom32Bytes(random_bytes);
    4ea0:	ce 01       	movw	r24, r28
    4ea2:	01 96       	adiw	r24, 0x01	; 1
    4ea4:	c5 df       	rcall	.-118    	; 0x4e30 <hardwareRandom32Bytes>
		if (r < 0)
    4ea6:	99 23       	and	r25, r25
    4ea8:	0c f4       	brge	.+2      	; 0x4eac <getRandom256Internal+0x5c>
    4eaa:	9a c0       	rjmp	.+308    	; 0x4fe0 <getRandom256Internal+0x190>
		// Sometimes hardwareRandom32Bytes() returns 0, which signifies that
		// more samples are needed in order to do statistical testing.
		// hardwareRandom32Bytes() assumes it will be repeatedly called until
		// it returns a non-zero value. If anything in this while loop is
		// changed, make sure the code still respects this assumption.
		total_entropy = (uint16_t)(total_entropy + r);
    4eac:	a8 0e       	add	r10, r24
    4eae:	b9 1e       	adc	r11, r25
    4eb0:	fe 01       	movw	r30, r28
    4eb2:	31 96       	adiw	r30, 0x01	; 1
    4eb4:	6f 01       	movw	r12, r30
    4eb6:	47 01       	movw	r8, r14
    4eb8:	8f 01       	movw	r16, r30
		for (i = 0; i < 32; i++)
		{
			sha256WriteByte(&hs, random_bytes[i]);
    4eba:	f8 01       	movw	r30, r16
    4ebc:	61 91       	ld	r22, Z+
    4ebe:	8f 01       	movw	r16, r30
    4ec0:	ce 01       	movw	r24, r28
    4ec2:	8f 5b       	subi	r24, 0xBF	; 191
    4ec4:	9f 4f       	sbci	r25, 0xFF	; 255
    4ec6:	0e 94 d5 30 	call	0x61aa	; 0x61aa <sha256WriteByte>
		// more samples are needed in order to do statistical testing.
		// hardwareRandom32Bytes() assumes it will be repeatedly called until
		// it returns a non-zero value. If anything in this while loop is
		// changed, make sure the code still respects this assumption.
		total_entropy = (uint16_t)(total_entropy + r);
		for (i = 0; i < 32; i++)
    4eca:	e0 16       	cp	r14, r16
    4ecc:	f1 06       	cpc	r15, r17
    4ece:	a9 f7       	brne	.-22     	; 0x4eba <getRandom256Internal+0x6a>
	// Hash in HWRNG randomness until we've reached the entropy required.
	// This needs to happen before hashing the pool itself due to the
	// possibility of length extension attacks; see below.
	total_entropy = 0;
	sha256Begin(&hs);
	while (total_entropy < (256 * ENTROPY_SAFETY_FACTOR))
    4ed0:	a1 14       	cp	r10, r1
    4ed2:	f2 e0       	ldi	r31, 0x02	; 2
    4ed4:	bf 06       	cpc	r11, r31
    4ed6:	20 f3       	brcs	.-56     	; 0x4ea0 <getRandom256Internal+0x50>
			sha256WriteByte(&hs, random_bytes[i]);
		}
	}

	// Now include the previous state of the pool.
	if (use_pool_state)
    4ed8:	77 20       	and	r7, r7
    4eda:	49 f0       	breq	.+18     	; 0x4eee <getRandom256Internal+0x9e>
	{
		memcpy(random_bytes, pool_state, ENTROPY_POOL_LENGTH);
    4edc:	80 e2       	ldi	r24, 0x20	; 32
    4ede:	f1 01       	movw	r30, r2
    4ee0:	de 01       	movw	r26, r28
    4ee2:	11 96       	adiw	r26, 0x01	; 1
    4ee4:	01 90       	ld	r0, Z+
    4ee6:	0d 92       	st	X+, r0
    4ee8:	8a 95       	dec	r24
    4eea:	e1 f7       	brne	.-8      	; 0x4ee4 <getRandom256Internal+0x94>
    4eec:	05 c0       	rjmp	.+10     	; 0x4ef8 <getRandom256Internal+0xa8>
	}
	else
	{
		if (getEntropyPool(random_bytes))
    4eee:	ce 01       	movw	r24, r28
    4ef0:	01 96       	adiw	r24, 0x01	; 1
    4ef2:	2c de       	rcall	.-936    	; 0x4b4c <getEntropyPool>
    4ef4:	81 11       	cpse	r24, r1
    4ef6:	75 c0       	rjmp	.+234    	; 0x4fe2 <getRandom256Internal+0x192>
			return true; // error reading from non-volatile memory, or invalid checksum
		}
	}
	for (i = 0; i < ENTROPY_POOL_LENGTH; i++)
	{
		sha256WriteByte(&hs, random_bytes[i]);
    4ef8:	f6 01       	movw	r30, r12
    4efa:	61 91       	ld	r22, Z+
    4efc:	6f 01       	movw	r12, r30
    4efe:	ce 01       	movw	r24, r28
    4f00:	8f 5b       	subi	r24, 0xBF	; 191
    4f02:	9f 4f       	sbci	r25, 0xFF	; 255
    4f04:	0e 94 d5 30 	call	0x61aa	; 0x61aa <sha256WriteByte>
		if (getEntropyPool(random_bytes))
		{
			return true; // error reading from non-volatile memory, or invalid checksum
		}
	}
	for (i = 0; i < ENTROPY_POOL_LENGTH; i++)
    4f08:	8c 14       	cp	r8, r12
    4f0a:	9d 04       	cpc	r9, r13
    4f0c:	a9 f7       	brne	.-22     	; 0x4ef8 <getRandom256Internal+0xa8>
	{
		sha256WriteByte(&hs, random_bytes[i]);
	}
	sha256Finish(&hs);
    4f0e:	ce 01       	movw	r24, r28
    4f10:	8f 5b       	subi	r24, 0xBF	; 191
    4f12:	9f 4f       	sbci	r25, 0xFF	; 255
    4f14:	0e 94 d8 30 	call	0x61b0	; 0x61b0 <sha256Finish>
	writeHashToByteArray(intermediate, &hs, true);
    4f18:	41 e0       	ldi	r20, 0x01	; 1
    4f1a:	be 01       	movw	r22, r28
    4f1c:	6f 5b       	subi	r22, 0xBF	; 191
    4f1e:	7f 4f       	sbci	r23, 0xFF	; 255
    4f20:	ce 01       	movw	r24, r28
    4f22:	81 96       	adiw	r24, 0x21	; 33
    4f24:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <writeHashToByteArray>

	// Calculate new pool state.
	// We can't use the intermediate state as the new pool state, or an
	// attacker who obtained access to the pool state could determine
	// the most recent returned random output.
	sha256Begin(&hs);
    4f28:	ce 01       	movw	r24, r28
    4f2a:	8f 5b       	subi	r24, 0xBF	; 191
    4f2c:	9f 4f       	sbci	r25, 0xFF	; 255
    4f2e:	0e 94 81 30 	call	0x6102	; 0x6102 <sha256Begin>
    4f32:	ce 01       	movw	r24, r28
    4f34:	81 96       	adiw	r24, 0x21	; 33
    4f36:	7c 01       	movw	r14, r24
    4f38:	6c 01       	movw	r12, r24
    4f3a:	90 e2       	ldi	r25, 0x20	; 32
    4f3c:	c9 0e       	add	r12, r25
    4f3e:	d1 1c       	adc	r13, r1
    4f40:	87 01       	movw	r16, r14
	for (i = 0; i < 32; i++)
	{
		sha256WriteByte(&hs, intermediate[i]);
    4f42:	f8 01       	movw	r30, r16
    4f44:	61 91       	ld	r22, Z+
    4f46:	8f 01       	movw	r16, r30
    4f48:	ce 01       	movw	r24, r28
    4f4a:	8f 5b       	subi	r24, 0xBF	; 191
    4f4c:	9f 4f       	sbci	r25, 0xFF	; 255
    4f4e:	0e 94 d5 30 	call	0x61aa	; 0x61aa <sha256WriteByte>
	// Calculate new pool state.
	// We can't use the intermediate state as the new pool state, or an
	// attacker who obtained access to the pool state could determine
	// the most recent returned random output.
	sha256Begin(&hs);
	for (i = 0; i < 32; i++)
    4f52:	0c 15       	cp	r16, r12
    4f54:	1d 05       	cpc	r17, r13
    4f56:	a9 f7       	brne	.-22     	; 0x4f42 <getRandom256Internal+0xf2>
    4f58:	10 e2       	ldi	r17, 0x20	; 32
	{
		sha256WriteByte(&hs, intermediate[i]);
	}
	for (i = 0; i < 32; i++)
	{
		sha256WriteByte(&hs, 0x42); // padding
    4f5a:	62 e4       	ldi	r22, 0x42	; 66
    4f5c:	ce 01       	movw	r24, r28
    4f5e:	8f 5b       	subi	r24, 0xBF	; 191
    4f60:	9f 4f       	sbci	r25, 0xFF	; 255
    4f62:	0e 94 d5 30 	call	0x61aa	; 0x61aa <sha256WriteByte>
    4f66:	11 50       	subi	r17, 0x01	; 1
	sha256Begin(&hs);
	for (i = 0; i < 32; i++)
	{
		sha256WriteByte(&hs, intermediate[i]);
	}
	for (i = 0; i < 32; i++)
    4f68:	c1 f7       	brne	.-16     	; 0x4f5a <getRandom256Internal+0x10a>
	{
		sha256WriteByte(&hs, 0x42); // padding
	}
	sha256Finish(&hs);
    4f6a:	ce 01       	movw	r24, r28
    4f6c:	8f 5b       	subi	r24, 0xBF	; 191
    4f6e:	9f 4f       	sbci	r25, 0xFF	; 255
    4f70:	0e 94 d8 30 	call	0x61b0	; 0x61b0 <sha256Finish>
	writeHashToByteArray(random_bytes, &hs, true);
    4f74:	41 e0       	ldi	r20, 0x01	; 1
    4f76:	be 01       	movw	r22, r28
    4f78:	6f 5b       	subi	r22, 0xBF	; 191
    4f7a:	7f 4f       	sbci	r23, 0xFF	; 255
    4f7c:	ce 01       	movw	r24, r28
    4f7e:	01 96       	adiw	r24, 0x01	; 1
    4f80:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <writeHashToByteArray>

	// Save the pool state to non-volatile memory immediately as we don't want
	// it to be possible to reuse the pool state.
	if (use_pool_state)
    4f84:	77 20       	and	r7, r7
    4f86:	49 f0       	breq	.+18     	; 0x4f9a <getRandom256Internal+0x14a>
	{
		memcpy(pool_state, random_bytes, ENTROPY_POOL_LENGTH);
    4f88:	80 e2       	ldi	r24, 0x20	; 32
    4f8a:	fe 01       	movw	r30, r28
    4f8c:	31 96       	adiw	r30, 0x01	; 1
    4f8e:	d1 01       	movw	r26, r2
    4f90:	01 90       	ld	r0, Z+
    4f92:	0d 92       	st	X+, r0
    4f94:	8a 95       	dec	r24
    4f96:	e1 f7       	brne	.-8      	; 0x4f90 <getRandom256Internal+0x140>
    4f98:	05 c0       	rjmp	.+10     	; 0x4fa4 <getRandom256Internal+0x154>
	}
	else
	{
		if (setEntropyPool(random_bytes))
    4f9a:	ce 01       	movw	r24, r28
    4f9c:	01 96       	adiw	r24, 0x01	; 1
    4f9e:	89 dd       	rcall	.-1262   	; 0x4ab2 <setEntropyPool>
    4fa0:	81 11       	cpse	r24, r1
    4fa2:	1f c0       	rjmp	.+62     	; 0x4fe2 <getRandom256Internal+0x192>
	// next output. Outputting H(intermediate) is another possibility, but
	// that's kinda cutting it close though, as we're outputting
	// H(intermediate) while the next pool state will be
	// H(intermediate | padding). We've prevented a length extension
	// attack as described above, but there may be other attacks.
	sha256Begin(&hs);
    4fa4:	ce 01       	movw	r24, r28
    4fa6:	8f 5b       	subi	r24, 0xBF	; 191
    4fa8:	9f 4f       	sbci	r25, 0xFF	; 255
    4faa:	0e 94 81 30 	call	0x6102	; 0x6102 <sha256Begin>
	for (i = 0; i < ENTROPY_POOL_LENGTH; i++)
	{
		sha256WriteByte(&hs, intermediate[i]);
    4fae:	f7 01       	movw	r30, r14
    4fb0:	61 91       	ld	r22, Z+
    4fb2:	7f 01       	movw	r14, r30
    4fb4:	ce 01       	movw	r24, r28
    4fb6:	8f 5b       	subi	r24, 0xBF	; 191
    4fb8:	9f 4f       	sbci	r25, 0xFF	; 255
    4fba:	0e 94 d5 30 	call	0x61aa	; 0x61aa <sha256WriteByte>
	// that's kinda cutting it close though, as we're outputting
	// H(intermediate) while the next pool state will be
	// H(intermediate | padding). We've prevented a length extension
	// attack as described above, but there may be other attacks.
	sha256Begin(&hs);
	for (i = 0; i < ENTROPY_POOL_LENGTH; i++)
    4fbe:	ec 14       	cp	r14, r12
    4fc0:	fd 04       	cpc	r15, r13
    4fc2:	a9 f7       	brne	.-22     	; 0x4fae <getRandom256Internal+0x15e>
	{
		sha256WriteByte(&hs, intermediate[i]);
	}
	sha256FinishDouble(&hs);
    4fc4:	ce 01       	movw	r24, r28
    4fc6:	8f 5b       	subi	r24, 0xBF	; 191
    4fc8:	9f 4f       	sbci	r25, 0xFF	; 255
    4fca:	0e 94 db 30 	call	0x61b6	; 0x61b6 <sha256FinishDouble>
	writeHashToByteArray(n, &hs, true);
    4fce:	41 e0       	ldi	r20, 0x01	; 1
    4fd0:	be 01       	movw	r22, r28
    4fd2:	6f 5b       	subi	r22, 0xBF	; 191
    4fd4:	7f 4f       	sbci	r23, 0xFF	; 255
    4fd6:	c2 01       	movw	r24, r4
    4fd8:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <writeHashToByteArray>
	return false; // success
    4fdc:	80 e0       	ldi	r24, 0x00	; 0
    4fde:	01 c0       	rjmp	.+2      	; 0x4fe2 <getRandom256Internal+0x192>
	while (total_entropy < (256 * ENTROPY_SAFETY_FACTOR))
	{
		r = hardwareRandom32Bytes(random_bytes);
		if (r < 0)
		{
			return true; // HWRNG failure
    4fe0:	81 e0       	ldi	r24, 0x01	; 1
		sha256WriteByte(&hs, intermediate[i]);
	}
	sha256FinishDouble(&hs);
	writeHashToByteArray(n, &hs, true);
	return false; // success
}
    4fe2:	c7 55       	subi	r28, 0x57	; 87
    4fe4:	df 4f       	sbci	r29, 0xFF	; 255
    4fe6:	0f b6       	in	r0, 0x3f	; 63
    4fe8:	f8 94       	cli
    4fea:	de bf       	out	0x3e, r29	; 62
    4fec:	0f be       	out	0x3f, r0	; 63
    4fee:	cd bf       	out	0x3d, r28	; 61
    4ff0:	df 91       	pop	r29
    4ff2:	cf 91       	pop	r28
    4ff4:	1f 91       	pop	r17
    4ff6:	0f 91       	pop	r16
    4ff8:	ff 90       	pop	r15
    4ffa:	ef 90       	pop	r14
    4ffc:	df 90       	pop	r13
    4ffe:	cf 90       	pop	r12
    5000:	bf 90       	pop	r11
    5002:	af 90       	pop	r10
    5004:	9f 90       	pop	r9
    5006:	8f 90       	pop	r8
    5008:	7f 90       	pop	r7
    500a:	5f 90       	pop	r5
    500c:	4f 90       	pop	r4
    500e:	3f 90       	pop	r3
    5010:	2f 90       	pop	r2
    5012:	08 95       	ret

00005014 <getRandom256>:
  * \param n See getRandom256Internal()
  * \return See getRandom256Internal()
  */
bool getRandom256(BigNum256 n)
{
	return getRandom256Internal(n, NULL, false);
    5014:	40 e0       	ldi	r20, 0x00	; 0
    5016:	60 e0       	ldi	r22, 0x00	; 0
    5018:	70 e0       	ldi	r23, 0x00	; 0
    501a:	1a cf       	rjmp	.-460    	; 0x4e50 <getRandom256Internal>
}
    501c:	08 95       	ret

0000501e <getRandom256TemporaryPool>:
  *                   be both read from and written to.
  * \return See getRandom256Internal()
  */
bool getRandom256TemporaryPool(BigNum256 n, uint8_t *pool_state)
{
	return getRandom256Internal(n, pool_state, true);
    501e:	41 e0       	ldi	r20, 0x01	; 1
    5020:	17 cf       	rjmp	.-466    	; 0x4e50 <getRandom256Internal>
}
    5022:	08 95       	ret

00005024 <ripemd160Block>:
/** Update hash value based on the contents of a full message buffer.
  * This is an implementation of HashState#hashBlock().
  * \param hs The hash state to update.
  */
static void ripemd160Block(HashState *hs)
{
    5024:	2f 92       	push	r2
    5026:	3f 92       	push	r3
    5028:	4f 92       	push	r4
    502a:	5f 92       	push	r5
    502c:	6f 92       	push	r6
    502e:	7f 92       	push	r7
    5030:	8f 92       	push	r8
    5032:	9f 92       	push	r9
    5034:	af 92       	push	r10
    5036:	bf 92       	push	r11
    5038:	cf 92       	push	r12
    503a:	df 92       	push	r13
    503c:	ef 92       	push	r14
    503e:	ff 92       	push	r15
    5040:	0f 93       	push	r16
    5042:	1f 93       	push	r17
    5044:	cf 93       	push	r28
    5046:	df 93       	push	r29
    5048:	cd b7       	in	r28, 0x3d	; 61
    504a:	de b7       	in	r29, 0x3e	; 62
    504c:	c5 54       	subi	r28, 0x45	; 69
    504e:	d1 09       	sbc	r29, r1
    5050:	0f b6       	in	r0, 0x3f	; 63
    5052:	f8 94       	cli
    5054:	de bf       	out	0x3e, r29	; 62
    5056:	0f be       	out	0x3f, r0	; 63
    5058:	cd bf       	out	0x3d, r28	; 61
    505a:	1c 01       	movw	r2, r24
	uint32_t T;
	uint32_t K1, K2, R1, R2;
	uint8_t j;
	uint8_t fn_selector;

	A1 = hs->h[0];
    505c:	dc 01       	movw	r26, r24
    505e:	cd 90       	ld	r12, X+
    5060:	dd 90       	ld	r13, X+
    5062:	ed 90       	ld	r14, X+
    5064:	fc 90       	ld	r15, X
    5066:	13 97       	sbiw	r26, 0x03	; 3
    5068:	cc a6       	std	Y+44, r12	; 0x2c
    506a:	dd a6       	std	Y+45, r13	; 0x2d
    506c:	ee a6       	std	Y+46, r14	; 0x2e
    506e:	ff a6       	std	Y+47, r15	; 0x2f
	A2 = A1;
	B1 = hs->h[1];
    5070:	14 96       	adiw	r26, 0x04	; 4
    5072:	cd 90       	ld	r12, X+
    5074:	dd 90       	ld	r13, X+
    5076:	ed 90       	ld	r14, X+
    5078:	fc 90       	ld	r15, X
    507a:	17 97       	sbiw	r26, 0x07	; 7
    507c:	c8 aa       	std	Y+48, r12	; 0x30
    507e:	d9 aa       	std	Y+49, r13	; 0x31
    5080:	ea aa       	std	Y+50, r14	; 0x32
    5082:	fb aa       	std	Y+51, r15	; 0x33
	B2 = B1;
	C1 = hs->h[2];
    5084:	18 96       	adiw	r26, 0x08	; 8
    5086:	cd 90       	ld	r12, X+
    5088:	dd 90       	ld	r13, X+
    508a:	ed 90       	ld	r14, X+
    508c:	fc 90       	ld	r15, X
    508e:	1b 97       	sbiw	r26, 0x0b	; 11
    5090:	cc aa       	std	Y+52, r12	; 0x34
    5092:	dd aa       	std	Y+53, r13	; 0x35
    5094:	ee aa       	std	Y+54, r14	; 0x36
    5096:	ff aa       	std	Y+55, r15	; 0x37
	C2 = C1;
	D1 = hs->h[3];
    5098:	1c 96       	adiw	r26, 0x0c	; 12
    509a:	cd 90       	ld	r12, X+
    509c:	dd 90       	ld	r13, X+
    509e:	ed 90       	ld	r14, X+
    50a0:	fc 90       	ld	r15, X
    50a2:	1f 97       	sbiw	r26, 0x0f	; 15
    50a4:	c8 ae       	std	Y+56, r12	; 0x38
    50a6:	d9 ae       	std	Y+57, r13	; 0x39
    50a8:	ea ae       	std	Y+58, r14	; 0x3a
    50aa:	fb ae       	std	Y+59, r15	; 0x3b
	D2 = D1;
	E1 = hs->h[4];
    50ac:	50 96       	adiw	r26, 0x10	; 16
    50ae:	cd 90       	ld	r12, X+
    50b0:	dd 90       	ld	r13, X+
    50b2:	ed 90       	ld	r14, X+
    50b4:	fc 90       	ld	r15, X
    50b6:	53 97       	sbiw	r26, 0x13	; 19
    50b8:	cc ae       	std	Y+60, r12	; 0x3c
    50ba:	dd ae       	std	Y+61, r13	; 0x3d
    50bc:	ee ae       	std	Y+62, r14	; 0x3e
    50be:	ff ae       	std	Y+63, r15	; 0x3f
    50c0:	0c e1       	ldi	r16, 0x1C	; 28
    50c2:	14 e0       	ldi	r17, 0x04	; 4
    50c4:	1b 8b       	std	Y+19, r17	; 0x13
    50c6:	0a 8b       	std	Y+18, r16	; 0x12
    50c8:	2c eb       	ldi	r18, 0xBC	; 188
    50ca:	34 e0       	ldi	r19, 0x04	; 4
    50cc:	39 8b       	std	Y+17, r19	; 0x11
    50ce:	28 8b       	std	Y+16, r18	; 0x10
    50d0:	4c ec       	ldi	r20, 0xCC	; 204
    50d2:	53 e0       	ldi	r21, 0x03	; 3
    50d4:	5f 87       	std	Y+15, r21	; 0x0f
    50d6:	4e 87       	std	Y+14, r20	; 0x0e
    50d8:	8c e6       	ldi	r24, 0x6C	; 108
    50da:	94 e0       	ldi	r25, 0x04	; 4
	E2 = E1;
    50dc:	c8 8e       	std	Y+24, r12	; 0x18
    50de:	d9 8e       	std	Y+25, r13	; 0x19
    50e0:	ea 8e       	std	Y+26, r14	; 0x1a
    50e2:	fb 8e       	std	Y+27, r15	; 0x1b
	B1 = hs->h[1];
	B2 = B1;
	C1 = hs->h[2];
	C2 = C1;
	D1 = hs->h[3];
	D2 = D1;
    50e4:	c8 ac       	ldd	r12, Y+56	; 0x38
    50e6:	d9 ac       	ldd	r13, Y+57	; 0x39
    50e8:	ea ac       	ldd	r14, Y+58	; 0x3a
    50ea:	fb ac       	ldd	r15, Y+59	; 0x3b
    50ec:	ce 82       	std	Y+6, r12	; 0x06
    50ee:	df 82       	std	Y+7, r13	; 0x07
    50f0:	e8 86       	std	Y+8, r14	; 0x08
    50f2:	f9 86       	std	Y+9, r15	; 0x09
	A1 = hs->h[0];
	A2 = A1;
	B1 = hs->h[1];
	B2 = B1;
	C1 = hs->h[2];
	C2 = C1;
    50f4:	4c a9       	ldd	r20, Y+52	; 0x34
    50f6:	5d a9       	ldd	r21, Y+53	; 0x35
    50f8:	6e a9       	ldd	r22, Y+54	; 0x36
    50fa:	7f a9       	ldd	r23, Y+55	; 0x37
	uint8_t fn_selector;

	A1 = hs->h[0];
	A2 = A1;
	B1 = hs->h[1];
	B2 = B1;
    50fc:	e8 a8       	ldd	r14, Y+48	; 0x30
    50fe:	f9 a8       	ldd	r15, Y+49	; 0x31
    5100:	0a a9       	ldd	r16, Y+50	; 0x32
    5102:	1b a9       	ldd	r17, Y+51	; 0x33
    5104:	e8 a2       	std	Y+32, r14	; 0x20
    5106:	f9 a2       	std	Y+33, r15	; 0x21
    5108:	0a a3       	std	Y+34, r16	; 0x22
    510a:	1b a3       	std	Y+35, r17	; 0x23
	uint32_t K1, K2, R1, R2;
	uint8_t j;
	uint8_t fn_selector;

	A1 = hs->h[0];
	A2 = A1;
    510c:	0c a5       	ldd	r16, Y+44	; 0x2c
    510e:	1d a5       	ldd	r17, Y+45	; 0x2d
    5110:	2e a5       	ldd	r18, Y+46	; 0x2e
    5112:	3f a5       	ldd	r19, Y+47	; 0x2f
    5114:	08 a7       	std	Y+40, r16	; 0x28
    5116:	19 a7       	std	Y+41, r17	; 0x29
    5118:	2a a7       	std	Y+42, r18	; 0x2a
    511a:	3b a7       	std	Y+43, r19	; 0x2b
	B2 = B1;
	C1 = hs->h[2];
	C2 = C1;
	D1 = hs->h[3];
	D2 = D1;
	E1 = hs->h[4];
    511c:	cc ac       	ldd	r12, Y+60	; 0x3c
    511e:	dd ac       	ldd	r13, Y+61	; 0x3d
    5120:	ee ac       	ldd	r14, Y+62	; 0x3e
    5122:	ff ac       	ldd	r15, Y+63	; 0x3f
    5124:	cc 8a       	std	Y+20, r12	; 0x14
    5126:	dd 8a       	std	Y+21, r13	; 0x15
    5128:	ee 8a       	std	Y+22, r14	; 0x16
    512a:	ff 8a       	std	Y+23, r15	; 0x17
	A2 = A1;
	B1 = hs->h[1];
	B2 = B1;
	C1 = hs->h[2];
	C2 = C1;
	D1 = hs->h[3];
    512c:	e8 ac       	ldd	r14, Y+56	; 0x38
    512e:	f9 ac       	ldd	r15, Y+57	; 0x39
    5130:	0a ad       	ldd	r16, Y+58	; 0x3a
    5132:	1b ad       	ldd	r17, Y+59	; 0x3b
    5134:	ea 86       	std	Y+10, r14	; 0x0a
    5136:	fb 86       	std	Y+11, r15	; 0x0b
    5138:	0c 87       	std	Y+12, r16	; 0x0c
    513a:	1d 87       	std	Y+13, r17	; 0x0d

	A1 = hs->h[0];
	A2 = A1;
	B1 = hs->h[1];
	B2 = B1;
	C1 = hs->h[2];
    513c:	6a 01       	movw	r12, r20
    513e:	7b 01       	movw	r14, r22
	uint8_t j;
	uint8_t fn_selector;

	A1 = hs->h[0];
	A2 = A1;
	B1 = hs->h[1];
    5140:	08 a9       	ldd	r16, Y+48	; 0x30
    5142:	19 a9       	ldd	r17, Y+49	; 0x31
    5144:	2a a9       	ldd	r18, Y+50	; 0x32
    5146:	3b a9       	ldd	r19, Y+51	; 0x33
    5148:	0c 8f       	std	Y+28, r16	; 0x1c
    514a:	1d 8f       	std	Y+29, r17	; 0x1d
    514c:	2e 8f       	std	Y+30, r18	; 0x1e
    514e:	3f 8f       	std	Y+31, r19	; 0x1f
	uint32_t T;
	uint32_t K1, K2, R1, R2;
	uint8_t j;
	uint8_t fn_selector;

	A1 = hs->h[0];
    5150:	0c a5       	ldd	r16, Y+44	; 0x2c
    5152:	1d a5       	ldd	r17, Y+45	; 0x2d
    5154:	2e a5       	ldd	r18, Y+46	; 0x2e
    5156:	3f a5       	ldd	r19, Y+47	; 0x2f
    5158:	0c a3       	std	Y+36, r16	; 0x24
    515a:	1d a3       	std	Y+37, r17	; 0x25
    515c:	2e a3       	std	Y+38, r18	; 0x26
    515e:	3f a3       	std	Y+39, r19	; 0x27
	C2 = C1;
	D1 = hs->h[3];
	D2 = D1;
	E1 = hs->h[4];
	E2 = E1;
	for (j = 0; j < 80; j++)
    5160:	1d 82       	std	Y+5, r1	; 0x05
    5162:	22 96       	adiw	r28, 0x02	; 2
    5164:	9f af       	std	Y+63, r25	; 0x3f
    5166:	8e af       	std	Y+62, r24	; 0x3e
    5168:	22 97       	sbiw	r28, 0x02	; 2
    516a:	26 c0       	rjmp	.+76     	; 0x51b8 <ripemd160Block+0x194>
    516c:	8e 81       	ldd	r24, Y+6	; 0x06
    516e:	9f 81       	ldd	r25, Y+7	; 0x07
    5170:	a8 85       	ldd	r26, Y+8	; 0x08
    5172:	b9 85       	ldd	r27, Y+9	; 0x09
    5174:	88 8f       	std	Y+24, r24	; 0x18
    5176:	99 8f       	std	Y+25, r25	; 0x19
    5178:	aa 8f       	std	Y+26, r26	; 0x1a
    517a:	bb 8f       	std	Y+27, r27	; 0x1b
  * \param n Number of times to rotate left.
  * \return The rotated integer.
  */
static uint32_t rol(uint32_t x, uint8_t n)
{
	return (x << n) | (x >> (32 - n));
    517c:	0e 83       	std	Y+6, r16	; 0x06
    517e:	1f 83       	std	Y+7, r17	; 0x07
    5180:	28 87       	std	Y+8, r18	; 0x08
    5182:	39 87       	std	Y+9, r19	; 0x09
		A1 = E1;
		E1 = D1;
		D1 = rol(C1, 10);
		C1 = B1;
		B1 = T;
		T = rol(A2 + R2 + hs->m[LOOKUP_BYTE(r2[j])] + K2, LOOKUP_BYTE(s2[j])) + E2;
    5184:	48 a2       	std	Y+32, r4	; 0x20
    5186:	59 a2       	std	Y+33, r5	; 0x21
    5188:	6a a2       	std	Y+34, r6	; 0x22
    518a:	7b a2       	std	Y+35, r7	; 0x23
    518c:	0a 85       	ldd	r16, Y+10	; 0x0a
    518e:	1b 85       	ldd	r17, Y+11	; 0x0b
    5190:	2c 85       	ldd	r18, Y+12	; 0x0c
    5192:	3d 85       	ldd	r19, Y+13	; 0x0d
    5194:	0c 8b       	std	Y+20, r16	; 0x14
    5196:	1d 8b       	std	Y+21, r17	; 0x15
    5198:	2e 8b       	std	Y+22, r18	; 0x16
    519a:	3f 8b       	std	Y+23, r19	; 0x17
  * \param n Number of times to rotate left.
  * \return The rotated integer.
  */
static uint32_t rol(uint32_t x, uint8_t n)
{
	return (x << n) | (x >> (32 - n));
    519c:	8a 86       	std	Y+10, r8	; 0x0a
    519e:	9b 86       	std	Y+11, r9	; 0x0b
    51a0:	ac 86       	std	Y+12, r10	; 0x0c
    51a2:	bd 86       	std	Y+13, r11	; 0x0d
			R2 = f0(B2, C2, D2);
			K1 = 0xa953fd4e;
			K2 = 0x00000000;
			break;
		}
		T = rol(A1 + R1 + hs->m[LOOKUP_BYTE(r1[j])] + K1, LOOKUP_BYTE(s1[j])) + E1;
    51a4:	26 96       	adiw	r28, 0x06	; 6
    51a6:	8c ad       	ldd	r24, Y+60	; 0x3c
    51a8:	9d ad       	ldd	r25, Y+61	; 0x3d
    51aa:	ae ad       	ldd	r26, Y+62	; 0x3e
    51ac:	bf ad       	ldd	r27, Y+63	; 0x3f
    51ae:	26 97       	sbiw	r28, 0x06	; 6
    51b0:	8c 8f       	std	Y+28, r24	; 0x1c
    51b2:	9d 8f       	std	Y+29, r25	; 0x1d
    51b4:	ae 8f       	std	Y+30, r26	; 0x1e
    51b6:	bf 8f       	std	Y+31, r27	; 0x1f
	E1 = hs->h[4];
	E2 = E1;
	for (j = 0; j < 80; j++)
	{
		fn_selector = (uint8_t)(j >> 4);
		switch(fn_selector)
    51b8:	8d 81       	ldd	r24, Y+5	; 0x05
    51ba:	82 95       	swap	r24
    51bc:	8f 70       	andi	r24, 0x0F	; 15
    51be:	81 30       	cpi	r24, 0x01	; 1
    51c0:	c9 f1       	breq	.+114    	; 0x5234 <ripemd160Block+0x210>
    51c2:	38 f0       	brcs	.+14     	; 0x51d2 <ripemd160Block+0x1ae>
    51c4:	82 30       	cpi	r24, 0x02	; 2
    51c6:	09 f4       	brne	.+2      	; 0x51ca <ripemd160Block+0x1a6>
    51c8:	7a c0       	rjmp	.+244    	; 0x52be <ripemd160Block+0x29a>
    51ca:	83 30       	cpi	r24, 0x03	; 3
    51cc:	09 f4       	brne	.+2      	; 0x51d0 <ripemd160Block+0x1ac>
    51ce:	bc c0       	rjmp	.+376    	; 0x5348 <ripemd160Block+0x324>
    51d0:	00 c1       	rjmp	.+512    	; 0x53d2 <ripemd160Block+0x3ae>
  * \param z Third input integer.
  * \return Non-linear combination of x, y and z.
  */
static uint32_t f0(uint32_t x, uint32_t y, uint32_t z)
{
	return x ^ y ^ z;
    51d2:	0c 8d       	ldd	r16, Y+28	; 0x1c
    51d4:	1d 8d       	ldd	r17, Y+29	; 0x1d
    51d6:	2e 8d       	ldd	r18, Y+30	; 0x1e
    51d8:	3f 8d       	ldd	r19, Y+31	; 0x1f
    51da:	0c 25       	eor	r16, r12
    51dc:	1d 25       	eor	r17, r13
    51de:	2e 25       	eor	r18, r14
    51e0:	3f 25       	eor	r19, r15
    51e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    51e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    51e6:	ac 85       	ldd	r26, Y+12	; 0x0c
    51e8:	bd 85       	ldd	r27, Y+13	; 0x0d
    51ea:	08 27       	eor	r16, r24
    51ec:	19 27       	eor	r17, r25
    51ee:	2a 27       	eor	r18, r26
    51f0:	3b 27       	eor	r19, r27
  * \param z Third input integer.
  * \return Non-linear combination of x, y and z.
  */
static uint32_t f4(uint32_t x, uint32_t y, uint32_t z)
{
	return x ^ (y | ~z);
    51f2:	4e 80       	ldd	r4, Y+6	; 0x06
    51f4:	5f 80       	ldd	r5, Y+7	; 0x07
    51f6:	68 84       	ldd	r6, Y+8	; 0x08
    51f8:	79 84       	ldd	r7, Y+9	; 0x09
    51fa:	40 94       	com	r4
    51fc:	50 94       	com	r5
    51fe:	60 94       	com	r6
    5200:	70 94       	com	r7
    5202:	44 2a       	or	r4, r20
    5204:	55 2a       	or	r5, r21
    5206:	66 2a       	or	r6, r22
    5208:	77 2a       	or	r7, r23
    520a:	88 a1       	ldd	r24, Y+32	; 0x20
    520c:	99 a1       	ldd	r25, Y+33	; 0x21
    520e:	aa a1       	ldd	r26, Y+34	; 0x22
    5210:	bb a1       	ldd	r27, Y+35	; 0x23
    5212:	48 26       	eor	r4, r24
    5214:	59 26       	eor	r5, r25
    5216:	6a 26       	eor	r6, r26
    5218:	7b 26       	eor	r7, r27
		{
		case 0:
			R1 = f0(B1, C1, D1);
			R2 = f4(B2, C2, D2);
			K1 = 0x00000000;
			K2 = 0x50a28be6;
    521a:	96 ee       	ldi	r25, 0xE6	; 230
    521c:	99 83       	std	Y+1, r25	; 0x01
    521e:	ab e8       	ldi	r26, 0x8B	; 139
    5220:	aa 83       	std	Y+2, r26	; 0x02
    5222:	b2 ea       	ldi	r27, 0xA2	; 162
    5224:	bb 83       	std	Y+3, r27	; 0x03
    5226:	e0 e5       	ldi	r30, 0x50	; 80
    5228:	ec 83       	std	Y+4, r30	; 0x04
		switch(fn_selector)
		{
		case 0:
			R1 = f0(B1, C1, D1);
			R2 = f4(B2, C2, D2);
			K1 = 0x00000000;
    522a:	81 2c       	mov	r8, r1
    522c:	91 2c       	mov	r9, r1
    522e:	a1 2c       	mov	r10, r1
    5230:	b1 2c       	mov	r11, r1
			K2 = 0x50a28be6;
			break;
    5232:	07 c1       	rjmp	.+526    	; 0x5442 <ripemd160Block+0x41e>
  * \param z Third input integer.
  * \return Non-linear combination of x, y and z.
  */
static uint32_t f1(uint32_t x, uint32_t y, uint32_t z)
{
	return (x & y) | (~x & z);
    5234:	0a 85       	ldd	r16, Y+10	; 0x0a
    5236:	1b 85       	ldd	r17, Y+11	; 0x0b
    5238:	2c 85       	ldd	r18, Y+12	; 0x0c
    523a:	3d 85       	ldd	r19, Y+13	; 0x0d
    523c:	0c 25       	eor	r16, r12
    523e:	1d 25       	eor	r17, r13
    5240:	2e 25       	eor	r18, r14
    5242:	3f 25       	eor	r19, r15
    5244:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5246:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5248:	ae 8d       	ldd	r26, Y+30	; 0x1e
    524a:	bf 8d       	ldd	r27, Y+31	; 0x1f
    524c:	08 23       	and	r16, r24
    524e:	19 23       	and	r17, r25
    5250:	2a 23       	and	r18, r26
    5252:	3b 23       	and	r19, r27
    5254:	8a 85       	ldd	r24, Y+10	; 0x0a
    5256:	9b 85       	ldd	r25, Y+11	; 0x0b
    5258:	ac 85       	ldd	r26, Y+12	; 0x0c
    525a:	bd 85       	ldd	r27, Y+13	; 0x0d
    525c:	08 27       	eor	r16, r24
    525e:	19 27       	eor	r17, r25
    5260:	2a 27       	eor	r18, r26
    5262:	3b 27       	eor	r19, r27
  * \param z Third input integer.
  * \return Non-linear combination of x, y and z.
  */
static uint32_t f3(uint32_t x, uint32_t y, uint32_t z)
{
	return (x & z) | (y & ~z);
    5264:	48 a0       	ldd	r4, Y+32	; 0x20
    5266:	59 a0       	ldd	r5, Y+33	; 0x21
    5268:	6a a0       	ldd	r6, Y+34	; 0x22
    526a:	7b a0       	ldd	r7, Y+35	; 0x23
    526c:	44 26       	eor	r4, r20
    526e:	55 26       	eor	r5, r21
    5270:	66 26       	eor	r6, r22
    5272:	77 26       	eor	r7, r23
    5274:	8e 81       	ldd	r24, Y+6	; 0x06
    5276:	9f 81       	ldd	r25, Y+7	; 0x07
    5278:	a8 85       	ldd	r26, Y+8	; 0x08
    527a:	b9 85       	ldd	r27, Y+9	; 0x09
    527c:	48 22       	and	r4, r24
    527e:	59 22       	and	r5, r25
    5280:	6a 22       	and	r6, r26
    5282:	7b 22       	and	r7, r27
    5284:	44 26       	eor	r4, r20
    5286:	55 26       	eor	r5, r21
    5288:	66 26       	eor	r6, r22
    528a:	77 26       	eor	r7, r23
			break;
		case 1:
			R1 = f1(B1, C1, D1);
			R2 = f3(B2, C2, D2);
			K1 = 0x5a827999;
			K2 = 0x5c4dd124;
    528c:	94 e2       	ldi	r25, 0x24	; 36
    528e:	99 83       	std	Y+1, r25	; 0x01
    5290:	a1 ed       	ldi	r26, 0xD1	; 209
    5292:	aa 83       	std	Y+2, r26	; 0x02
    5294:	bd e4       	ldi	r27, 0x4D	; 77
    5296:	bb 83       	std	Y+3, r27	; 0x03
    5298:	ec e5       	ldi	r30, 0x5C	; 92
    529a:	ec 83       	std	Y+4, r30	; 0x04
			K2 = 0x50a28be6;
			break;
		case 1:
			R1 = f1(B1, C1, D1);
			R2 = f3(B2, C2, D2);
			K1 = 0x5a827999;
    529c:	0f 2e       	mov	r0, r31
    529e:	f9 e9       	ldi	r31, 0x99	; 153
    52a0:	8f 2e       	mov	r8, r31
    52a2:	f0 2d       	mov	r31, r0
    52a4:	0f 2e       	mov	r0, r31
    52a6:	f9 e7       	ldi	r31, 0x79	; 121
    52a8:	9f 2e       	mov	r9, r31
    52aa:	f0 2d       	mov	r31, r0
    52ac:	0f 2e       	mov	r0, r31
    52ae:	f2 e8       	ldi	r31, 0x82	; 130
    52b0:	af 2e       	mov	r10, r31
    52b2:	f0 2d       	mov	r31, r0
    52b4:	0f 2e       	mov	r0, r31
    52b6:	fa e5       	ldi	r31, 0x5A	; 90
    52b8:	bf 2e       	mov	r11, r31
    52ba:	f0 2d       	mov	r31, r0
			K2 = 0x5c4dd124;
			break;
    52bc:	c2 c0       	rjmp	.+388    	; 0x5442 <ripemd160Block+0x41e>
  * \param z Third input integer.
  * \return Non-linear combination of x, y and z.
  */
static uint32_t f2(uint32_t x, uint32_t y, uint32_t z)
{
	return (x | ~y) ^ z;
    52be:	97 01       	movw	r18, r14
    52c0:	86 01       	movw	r16, r12
    52c2:	00 95       	com	r16
    52c4:	10 95       	com	r17
    52c6:	20 95       	com	r18
    52c8:	30 95       	com	r19
    52ca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    52cc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    52ce:	ae 8d       	ldd	r26, Y+30	; 0x1e
    52d0:	bf 8d       	ldd	r27, Y+31	; 0x1f
    52d2:	08 2b       	or	r16, r24
    52d4:	19 2b       	or	r17, r25
    52d6:	2a 2b       	or	r18, r26
    52d8:	3b 2b       	or	r19, r27
    52da:	8a 85       	ldd	r24, Y+10	; 0x0a
    52dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    52de:	ac 85       	ldd	r26, Y+12	; 0x0c
    52e0:	bd 85       	ldd	r27, Y+13	; 0x0d
    52e2:	08 27       	eor	r16, r24
    52e4:	19 27       	eor	r17, r25
    52e6:	2a 27       	eor	r18, r26
    52e8:	3b 27       	eor	r19, r27
    52ea:	2a 01       	movw	r4, r20
    52ec:	3b 01       	movw	r6, r22
    52ee:	40 94       	com	r4
    52f0:	50 94       	com	r5
    52f2:	60 94       	com	r6
    52f4:	70 94       	com	r7
    52f6:	88 a1       	ldd	r24, Y+32	; 0x20
    52f8:	99 a1       	ldd	r25, Y+33	; 0x21
    52fa:	aa a1       	ldd	r26, Y+34	; 0x22
    52fc:	bb a1       	ldd	r27, Y+35	; 0x23
    52fe:	48 2a       	or	r4, r24
    5300:	59 2a       	or	r5, r25
    5302:	6a 2a       	or	r6, r26
    5304:	7b 2a       	or	r7, r27
    5306:	8e 81       	ldd	r24, Y+6	; 0x06
    5308:	9f 81       	ldd	r25, Y+7	; 0x07
    530a:	a8 85       	ldd	r26, Y+8	; 0x08
    530c:	b9 85       	ldd	r27, Y+9	; 0x09
    530e:	48 26       	eor	r4, r24
    5310:	59 26       	eor	r5, r25
    5312:	6a 26       	eor	r6, r26
    5314:	7b 26       	eor	r7, r27
			break;
		case 2:
			R1 = f2(B1, C1, D1);
			R2 = f2(B2, C2, D2);
			K1 = 0x6ed9eba1;
			K2 = 0x6d703ef3;
    5316:	93 ef       	ldi	r25, 0xF3	; 243
    5318:	99 83       	std	Y+1, r25	; 0x01
    531a:	ae e3       	ldi	r26, 0x3E	; 62
    531c:	aa 83       	std	Y+2, r26	; 0x02
    531e:	b0 e7       	ldi	r27, 0x70	; 112
    5320:	bb 83       	std	Y+3, r27	; 0x03
    5322:	ed e6       	ldi	r30, 0x6D	; 109
    5324:	ec 83       	std	Y+4, r30	; 0x04
			K2 = 0x5c4dd124;
			break;
		case 2:
			R1 = f2(B1, C1, D1);
			R2 = f2(B2, C2, D2);
			K1 = 0x6ed9eba1;
    5326:	0f 2e       	mov	r0, r31
    5328:	f1 ea       	ldi	r31, 0xA1	; 161
    532a:	8f 2e       	mov	r8, r31
    532c:	f0 2d       	mov	r31, r0
    532e:	0f 2e       	mov	r0, r31
    5330:	fb ee       	ldi	r31, 0xEB	; 235
    5332:	9f 2e       	mov	r9, r31
    5334:	f0 2d       	mov	r31, r0
    5336:	0f 2e       	mov	r0, r31
    5338:	f9 ed       	ldi	r31, 0xD9	; 217
    533a:	af 2e       	mov	r10, r31
    533c:	f0 2d       	mov	r31, r0
    533e:	0f 2e       	mov	r0, r31
    5340:	fe e6       	ldi	r31, 0x6E	; 110
    5342:	bf 2e       	mov	r11, r31
    5344:	f0 2d       	mov	r31, r0
			K2 = 0x6d703ef3;
			break;
    5346:	7d c0       	rjmp	.+250    	; 0x5442 <ripemd160Block+0x41e>
  * \param z Third input integer.
  * \return Non-linear combination of x, y and z.
  */
static uint32_t f3(uint32_t x, uint32_t y, uint32_t z)
{
	return (x & z) | (y & ~z);
    5348:	0c 8d       	ldd	r16, Y+28	; 0x1c
    534a:	1d 8d       	ldd	r17, Y+29	; 0x1d
    534c:	2e 8d       	ldd	r18, Y+30	; 0x1e
    534e:	3f 8d       	ldd	r19, Y+31	; 0x1f
    5350:	0c 25       	eor	r16, r12
    5352:	1d 25       	eor	r17, r13
    5354:	2e 25       	eor	r18, r14
    5356:	3f 25       	eor	r19, r15
    5358:	8a 85       	ldd	r24, Y+10	; 0x0a
    535a:	9b 85       	ldd	r25, Y+11	; 0x0b
    535c:	ac 85       	ldd	r26, Y+12	; 0x0c
    535e:	bd 85       	ldd	r27, Y+13	; 0x0d
    5360:	08 23       	and	r16, r24
    5362:	19 23       	and	r17, r25
    5364:	2a 23       	and	r18, r26
    5366:	3b 23       	and	r19, r27
    5368:	0c 25       	eor	r16, r12
    536a:	1d 25       	eor	r17, r13
    536c:	2e 25       	eor	r18, r14
    536e:	3f 25       	eor	r19, r15
  * \param z Third input integer.
  * \return Non-linear combination of x, y and z.
  */
static uint32_t f1(uint32_t x, uint32_t y, uint32_t z)
{
	return (x & y) | (~x & z);
    5370:	4e 80       	ldd	r4, Y+6	; 0x06
    5372:	5f 80       	ldd	r5, Y+7	; 0x07
    5374:	68 84       	ldd	r6, Y+8	; 0x08
    5376:	79 84       	ldd	r7, Y+9	; 0x09
    5378:	44 26       	eor	r4, r20
    537a:	55 26       	eor	r5, r21
    537c:	66 26       	eor	r6, r22
    537e:	77 26       	eor	r7, r23
    5380:	88 a1       	ldd	r24, Y+32	; 0x20
    5382:	99 a1       	ldd	r25, Y+33	; 0x21
    5384:	aa a1       	ldd	r26, Y+34	; 0x22
    5386:	bb a1       	ldd	r27, Y+35	; 0x23
    5388:	48 22       	and	r4, r24
    538a:	59 22       	and	r5, r25
    538c:	6a 22       	and	r6, r26
    538e:	7b 22       	and	r7, r27
    5390:	8e 81       	ldd	r24, Y+6	; 0x06
    5392:	9f 81       	ldd	r25, Y+7	; 0x07
    5394:	a8 85       	ldd	r26, Y+8	; 0x08
    5396:	b9 85       	ldd	r27, Y+9	; 0x09
    5398:	48 26       	eor	r4, r24
    539a:	59 26       	eor	r5, r25
    539c:	6a 26       	eor	r6, r26
    539e:	7b 26       	eor	r7, r27
			break;
		case 3:
			R1 = f3(B1, C1, D1);
			R2 = f1(B2, C2, D2);
			K1 = 0x8f1bbcdc;
			K2 = 0x7a6d76e9;
    53a0:	99 ee       	ldi	r25, 0xE9	; 233
    53a2:	99 83       	std	Y+1, r25	; 0x01
    53a4:	a6 e7       	ldi	r26, 0x76	; 118
    53a6:	aa 83       	std	Y+2, r26	; 0x02
    53a8:	bd e6       	ldi	r27, 0x6D	; 109
    53aa:	bb 83       	std	Y+3, r27	; 0x03
    53ac:	ea e7       	ldi	r30, 0x7A	; 122
    53ae:	ec 83       	std	Y+4, r30	; 0x04
			K2 = 0x6d703ef3;
			break;
		case 3:
			R1 = f3(B1, C1, D1);
			R2 = f1(B2, C2, D2);
			K1 = 0x8f1bbcdc;
    53b0:	0f 2e       	mov	r0, r31
    53b2:	fc ed       	ldi	r31, 0xDC	; 220
    53b4:	8f 2e       	mov	r8, r31
    53b6:	f0 2d       	mov	r31, r0
    53b8:	0f 2e       	mov	r0, r31
    53ba:	fc eb       	ldi	r31, 0xBC	; 188
    53bc:	9f 2e       	mov	r9, r31
    53be:	f0 2d       	mov	r31, r0
    53c0:	0f 2e       	mov	r0, r31
    53c2:	fb e1       	ldi	r31, 0x1B	; 27
    53c4:	af 2e       	mov	r10, r31
    53c6:	f0 2d       	mov	r31, r0
    53c8:	0f 2e       	mov	r0, r31
    53ca:	ff e8       	ldi	r31, 0x8F	; 143
    53cc:	bf 2e       	mov	r11, r31
    53ce:	f0 2d       	mov	r31, r0
			K2 = 0x7a6d76e9;
			break;
    53d0:	38 c0       	rjmp	.+112    	; 0x5442 <ripemd160Block+0x41e>
  * \param z Third input integer.
  * \return Non-linear combination of x, y and z.
  */
static uint32_t f4(uint32_t x, uint32_t y, uint32_t z)
{
	return x ^ (y | ~z);
    53d2:	0a 85       	ldd	r16, Y+10	; 0x0a
    53d4:	1b 85       	ldd	r17, Y+11	; 0x0b
    53d6:	2c 85       	ldd	r18, Y+12	; 0x0c
    53d8:	3d 85       	ldd	r19, Y+13	; 0x0d
    53da:	00 95       	com	r16
    53dc:	10 95       	com	r17
    53de:	20 95       	com	r18
    53e0:	30 95       	com	r19
    53e2:	0c 29       	or	r16, r12
    53e4:	1d 29       	or	r17, r13
    53e6:	2e 29       	or	r18, r14
    53e8:	3f 29       	or	r19, r15
    53ea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    53ec:	9d 8d       	ldd	r25, Y+29	; 0x1d
    53ee:	ae 8d       	ldd	r26, Y+30	; 0x1e
    53f0:	bf 8d       	ldd	r27, Y+31	; 0x1f
    53f2:	08 27       	eor	r16, r24
    53f4:	19 27       	eor	r17, r25
    53f6:	2a 27       	eor	r18, r26
    53f8:	3b 27       	eor	r19, r27
  * \param z Third input integer.
  * \return Non-linear combination of x, y and z.
  */
static uint32_t f0(uint32_t x, uint32_t y, uint32_t z)
{
	return x ^ y ^ z;
    53fa:	4e 80       	ldd	r4, Y+6	; 0x06
    53fc:	5f 80       	ldd	r5, Y+7	; 0x07
    53fe:	68 84       	ldd	r6, Y+8	; 0x08
    5400:	79 84       	ldd	r7, Y+9	; 0x09
    5402:	88 a1       	ldd	r24, Y+32	; 0x20
    5404:	99 a1       	ldd	r25, Y+33	; 0x21
    5406:	aa a1       	ldd	r26, Y+34	; 0x22
    5408:	bb a1       	ldd	r27, Y+35	; 0x23
    540a:	48 26       	eor	r4, r24
    540c:	59 26       	eor	r5, r25
    540e:	6a 26       	eor	r6, r26
    5410:	7b 26       	eor	r7, r27
    5412:	44 26       	eor	r4, r20
    5414:	55 26       	eor	r5, r21
    5416:	66 26       	eor	r6, r22
    5418:	77 26       	eor	r7, r23
			break;
		default:
			R1 = f4(B1, C1, D1);
			R2 = f0(B2, C2, D2);
			K1 = 0xa953fd4e;
			K2 = 0x00000000;
    541a:	19 82       	std	Y+1, r1	; 0x01
    541c:	1a 82       	std	Y+2, r1	; 0x02
    541e:	1b 82       	std	Y+3, r1	; 0x03
    5420:	1c 82       	std	Y+4, r1	; 0x04
			K2 = 0x7a6d76e9;
			break;
		default:
			R1 = f4(B1, C1, D1);
			R2 = f0(B2, C2, D2);
			K1 = 0xa953fd4e;
    5422:	0f 2e       	mov	r0, r31
    5424:	fe e4       	ldi	r31, 0x4E	; 78
    5426:	8f 2e       	mov	r8, r31
    5428:	f0 2d       	mov	r31, r0
    542a:	0f 2e       	mov	r0, r31
    542c:	fd ef       	ldi	r31, 0xFD	; 253
    542e:	9f 2e       	mov	r9, r31
    5430:	f0 2d       	mov	r31, r0
    5432:	0f 2e       	mov	r0, r31
    5434:	f3 e5       	ldi	r31, 0x53	; 83
    5436:	af 2e       	mov	r10, r31
    5438:	f0 2d       	mov	r31, r0
    543a:	0f 2e       	mov	r0, r31
    543c:	f9 ea       	ldi	r31, 0xA9	; 169
    543e:	bf 2e       	mov	r11, r31
    5440:	f0 2d       	mov	r31, r0
			K2 = 0x00000000;
			break;
		}
		T = rol(A1 + R1 + hs->m[LOOKUP_BYTE(r1[j])] + K1, LOOKUP_BYTE(s1[j])) + E1;
    5442:	ea 89       	ldd	r30, Y+18	; 0x12
    5444:	fb 89       	ldd	r31, Y+19	; 0x13
    5446:	94 91       	lpm	r25, Z
    5448:	e8 89       	ldd	r30, Y+16	; 0x10
    544a:	f9 89       	ldd	r31, Y+17	; 0x11
    544c:	84 91       	lpm	r24, Z
    544e:	f1 01       	movw	r30, r2
    5450:	a4 e0       	ldi	r26, 0x04	; 4
    5452:	8a 9f       	mul	r24, r26
    5454:	e0 0d       	add	r30, r0
    5456:	f1 1d       	adc	r31, r1
    5458:	11 24       	eor	r1, r1
    545a:	08 0d       	add	r16, r8
    545c:	19 1d       	adc	r17, r9
    545e:	2a 1d       	adc	r18, r10
    5460:	3b 1d       	adc	r19, r11
    5462:	83 a0       	ldd	r8, Z+35	; 0x23
    5464:	94 a0       	ldd	r9, Z+36	; 0x24
    5466:	a5 a0       	ldd	r10, Z+37	; 0x25
    5468:	b6 a0       	ldd	r11, Z+38	; 0x26
    546a:	80 0e       	add	r8, r16
    546c:	91 1e       	adc	r9, r17
    546e:	a2 1e       	adc	r10, r18
    5470:	b3 1e       	adc	r11, r19
    5472:	0c a1       	ldd	r16, Y+36	; 0x24
    5474:	1d a1       	ldd	r17, Y+37	; 0x25
    5476:	2e a1       	ldd	r18, Y+38	; 0x26
    5478:	3f a1       	ldd	r19, Y+39	; 0x27
    547a:	08 0d       	add	r16, r8
    547c:	19 1d       	adc	r17, r9
    547e:	2a 1d       	adc	r18, r10
    5480:	3b 1d       	adc	r19, r11
    5482:	48 01       	movw	r8, r16
    5484:	59 01       	movw	r10, r18
    5486:	09 2e       	mov	r0, r25
    5488:	04 c0       	rjmp	.+8      	; 0x5492 <ripemd160Block+0x46e>
    548a:	88 0c       	add	r8, r8
    548c:	99 1c       	adc	r9, r9
    548e:	aa 1c       	adc	r10, r10
    5490:	bb 1c       	adc	r11, r11
    5492:	0a 94       	dec	r0
    5494:	d2 f7       	brpl	.-12     	; 0x548a <ripemd160Block+0x466>
    5496:	91 95       	neg	r25
    5498:	9f 71       	andi	r25, 0x1F	; 31
    549a:	04 c0       	rjmp	.+8      	; 0x54a4 <ripemd160Block+0x480>
    549c:	36 95       	lsr	r19
    549e:	27 95       	ror	r18
    54a0:	17 95       	ror	r17
    54a2:	07 95       	ror	r16
    54a4:	9a 95       	dec	r25
    54a6:	d2 f7       	brpl	.-12     	; 0x549c <ripemd160Block+0x478>
    54a8:	08 29       	or	r16, r8
    54aa:	19 29       	or	r17, r9
    54ac:	2a 29       	or	r18, r10
    54ae:	3b 29       	or	r19, r11
    54b0:	8c 89       	ldd	r24, Y+20	; 0x14
    54b2:	9d 89       	ldd	r25, Y+21	; 0x15
    54b4:	ae 89       	ldd	r26, Y+22	; 0x16
    54b6:	bf 89       	ldd	r27, Y+23	; 0x17
    54b8:	80 0f       	add	r24, r16
    54ba:	91 1f       	adc	r25, r17
    54bc:	a2 1f       	adc	r26, r18
    54be:	b3 1f       	adc	r27, r19
    54c0:	26 96       	adiw	r28, 0x06	; 6
    54c2:	8c af       	std	Y+60, r24	; 0x3c
    54c4:	9d af       	std	Y+61, r25	; 0x3d
    54c6:	ae af       	std	Y+62, r26	; 0x3e
    54c8:	bf af       	std	Y+63, r27	; 0x3f
    54ca:	26 97       	sbiw	r28, 0x06	; 6
  * \param n Number of times to rotate left.
  * \return The rotated integer.
  */
static uint32_t rol(uint32_t x, uint8_t n)
{
	return (x << n) | (x >> (32 - n));
    54cc:	97 01       	movw	r18, r14
    54ce:	86 01       	movw	r16, r12
    54d0:	0f 2e       	mov	r0, r31
    54d2:	fa e0       	ldi	r31, 0x0A	; 10
    54d4:	00 0f       	add	r16, r16
    54d6:	11 1f       	adc	r17, r17
    54d8:	22 1f       	adc	r18, r18
    54da:	33 1f       	adc	r19, r19
    54dc:	fa 95       	dec	r31
    54de:	d1 f7       	brne	.-12     	; 0x54d4 <ripemd160Block+0x4b0>
    54e0:	f0 2d       	mov	r31, r0
    54e2:	46 01       	movw	r8, r12
    54e4:	57 01       	movw	r10, r14
    54e6:	07 2e       	mov	r0, r23
    54e8:	76 e1       	ldi	r23, 0x16	; 22
    54ea:	b6 94       	lsr	r11
    54ec:	a7 94       	ror	r10
    54ee:	97 94       	ror	r9
    54f0:	87 94       	ror	r8
    54f2:	7a 95       	dec	r23
    54f4:	d1 f7       	brne	.-12     	; 0x54ea <ripemd160Block+0x4c6>
    54f6:	70 2d       	mov	r23, r0
    54f8:	80 2a       	or	r8, r16
    54fa:	91 2a       	or	r9, r17
    54fc:	a2 2a       	or	r10, r18
    54fe:	b3 2a       	or	r11, r19
		A1 = E1;
		E1 = D1;
		D1 = rol(C1, 10);
		C1 = B1;
		B1 = T;
		T = rol(A2 + R2 + hs->m[LOOKUP_BYTE(r2[j])] + K2, LOOKUP_BYTE(s2[j])) + E2;
    5500:	ee 85       	ldd	r30, Y+14	; 0x0e
    5502:	ff 85       	ldd	r31, Y+15	; 0x0f
    5504:	24 91       	lpm	r18, Z
    5506:	22 96       	adiw	r28, 0x02	; 2
    5508:	ee ad       	ldd	r30, Y+62	; 0x3e
    550a:	ff ad       	ldd	r31, Y+63	; 0x3f
    550c:	22 97       	sbiw	r28, 0x02	; 2
    550e:	34 91       	lpm	r19, Z
    5510:	f1 01       	movw	r30, r2
    5512:	04 e0       	ldi	r16, 0x04	; 4
    5514:	30 9f       	mul	r19, r16
    5516:	e0 0d       	add	r30, r0
    5518:	f1 1d       	adc	r31, r1
    551a:	11 24       	eor	r1, r1
    551c:	89 81       	ldd	r24, Y+1	; 0x01
    551e:	9a 81       	ldd	r25, Y+2	; 0x02
    5520:	ab 81       	ldd	r26, Y+3	; 0x03
    5522:	bc 81       	ldd	r27, Y+4	; 0x04
    5524:	48 0e       	add	r4, r24
    5526:	59 1e       	adc	r5, r25
    5528:	6a 1e       	adc	r6, r26
    552a:	7b 1e       	adc	r7, r27
    552c:	c3 a0       	ldd	r12, Z+35	; 0x23
    552e:	d4 a0       	ldd	r13, Z+36	; 0x24
    5530:	e5 a0       	ldd	r14, Z+37	; 0x25
    5532:	f6 a0       	ldd	r15, Z+38	; 0x26
    5534:	c4 0c       	add	r12, r4
    5536:	d5 1c       	adc	r13, r5
    5538:	e6 1c       	adc	r14, r6
    553a:	f7 1c       	adc	r15, r7
    553c:	88 a5       	ldd	r24, Y+40	; 0x28
    553e:	99 a5       	ldd	r25, Y+41	; 0x29
    5540:	aa a5       	ldd	r26, Y+42	; 0x2a
    5542:	bb a5       	ldd	r27, Y+43	; 0x2b
    5544:	c8 0e       	add	r12, r24
    5546:	d9 1e       	adc	r13, r25
    5548:	ea 1e       	adc	r14, r26
    554a:	fb 1e       	adc	r15, r27
    554c:	26 01       	movw	r4, r12
    554e:	37 01       	movw	r6, r14
    5550:	02 2e       	mov	r0, r18
    5552:	04 c0       	rjmp	.+8      	; 0x555c <ripemd160Block+0x538>
    5554:	44 0c       	add	r4, r4
    5556:	55 1c       	adc	r5, r5
    5558:	66 1c       	adc	r6, r6
    555a:	77 1c       	adc	r7, r7
    555c:	0a 94       	dec	r0
    555e:	d2 f7       	brpl	.-12     	; 0x5554 <ripemd160Block+0x530>
    5560:	21 95       	neg	r18
    5562:	2f 71       	andi	r18, 0x1F	; 31
    5564:	04 c0       	rjmp	.+8      	; 0x556e <ripemd160Block+0x54a>
    5566:	f6 94       	lsr	r15
    5568:	e7 94       	ror	r14
    556a:	d7 94       	ror	r13
    556c:	c7 94       	ror	r12
    556e:	2a 95       	dec	r18
    5570:	d2 f7       	brpl	.-12     	; 0x5566 <ripemd160Block+0x542>
    5572:	4c 28       	or	r4, r12
    5574:	5d 28       	or	r5, r13
    5576:	6e 28       	or	r6, r14
    5578:	7f 28       	or	r7, r15
    557a:	c8 8c       	ldd	r12, Y+24	; 0x18
    557c:	d9 8c       	ldd	r13, Y+25	; 0x19
    557e:	ea 8c       	ldd	r14, Y+26	; 0x1a
    5580:	fb 8c       	ldd	r15, Y+27	; 0x1b
    5582:	4c 0c       	add	r4, r12
    5584:	5d 1c       	adc	r5, r13
    5586:	6e 1c       	adc	r6, r14
    5588:	7f 1c       	adc	r7, r15
  * \param n Number of times to rotate left.
  * \return The rotated integer.
  */
static uint32_t rol(uint32_t x, uint8_t n)
{
	return (x << n) | (x >> (32 - n));
    558a:	6a 01       	movw	r12, r20
    558c:	7b 01       	movw	r14, r22
    558e:	0b 2e       	mov	r0, r27
    5590:	ba e0       	ldi	r27, 0x0A	; 10
    5592:	cc 0c       	add	r12, r12
    5594:	dd 1c       	adc	r13, r13
    5596:	ee 1c       	adc	r14, r14
    5598:	ff 1c       	adc	r15, r15
    559a:	ba 95       	dec	r27
    559c:	d1 f7       	brne	.-12     	; 0x5592 <ripemd160Block+0x56e>
    559e:	b0 2d       	mov	r27, r0
    55a0:	8a 01       	movw	r16, r20
    55a2:	9b 01       	movw	r18, r22
    55a4:	0f 2e       	mov	r0, r31
    55a6:	f6 e1       	ldi	r31, 0x16	; 22
    55a8:	36 95       	lsr	r19
    55aa:	27 95       	ror	r18
    55ac:	17 95       	ror	r17
    55ae:	07 95       	ror	r16
    55b0:	fa 95       	dec	r31
    55b2:	d1 f7       	brne	.-12     	; 0x55a8 <ripemd160Block+0x584>
    55b4:	f0 2d       	mov	r31, r0
    55b6:	0c 29       	or	r16, r12
    55b8:	1d 29       	or	r17, r13
    55ba:	2e 29       	or	r18, r14
    55bc:	3f 29       	or	r19, r15
	C2 = C1;
	D1 = hs->h[3];
	D2 = D1;
	E1 = hs->h[4];
	E2 = E1;
	for (j = 0; j < 80; j++)
    55be:	4d 81       	ldd	r20, Y+5	; 0x05
    55c0:	4f 5f       	subi	r20, 0xFF	; 255
    55c2:	4d 83       	std	Y+5, r20	; 0x05
    55c4:	6a 89       	ldd	r22, Y+18	; 0x12
    55c6:	7b 89       	ldd	r23, Y+19	; 0x13
    55c8:	6f 5f       	subi	r22, 0xFF	; 255
    55ca:	7f 4f       	sbci	r23, 0xFF	; 255
    55cc:	7b 8b       	std	Y+19, r23	; 0x13
    55ce:	6a 8b       	std	Y+18, r22	; 0x12
    55d0:	88 89       	ldd	r24, Y+16	; 0x10
    55d2:	99 89       	ldd	r25, Y+17	; 0x11
    55d4:	01 96       	adiw	r24, 0x01	; 1
    55d6:	99 8b       	std	Y+17, r25	; 0x11
    55d8:	88 8b       	std	Y+16, r24	; 0x10
    55da:	ae 85       	ldd	r26, Y+14	; 0x0e
    55dc:	bf 85       	ldd	r27, Y+15	; 0x0f
    55de:	11 96       	adiw	r26, 0x01	; 1
    55e0:	bf 87       	std	Y+15, r27	; 0x0f
    55e2:	ae 87       	std	Y+14, r26	; 0x0e
    55e4:	22 96       	adiw	r28, 0x02	; 2
    55e6:	4e ad       	ldd	r20, Y+62	; 0x3e
    55e8:	5f ad       	ldd	r21, Y+63	; 0x3f
    55ea:	22 97       	sbiw	r28, 0x02	; 2
    55ec:	4f 5f       	subi	r20, 0xFF	; 255
    55ee:	5f 4f       	sbci	r21, 0xFF	; 255
    55f0:	22 96       	adiw	r28, 0x02	; 2
    55f2:	5f af       	std	Y+63, r21	; 0x3f
    55f4:	4e af       	std	Y+62, r20	; 0x3e
    55f6:	22 97       	sbiw	r28, 0x02	; 2
    55f8:	6c 89       	ldd	r22, Y+20	; 0x14
    55fa:	7d 89       	ldd	r23, Y+21	; 0x15
    55fc:	8e 89       	ldd	r24, Y+22	; 0x16
    55fe:	9f 89       	ldd	r25, Y+23	; 0x17
    5600:	6c a3       	std	Y+36, r22	; 0x24
    5602:	7d a3       	std	Y+37, r23	; 0x25
    5604:	8e a3       	std	Y+38, r24	; 0x26
    5606:	9f a3       	std	Y+39, r25	; 0x27
    5608:	cc 8c       	ldd	r12, Y+28	; 0x1c
    560a:	dd 8c       	ldd	r13, Y+29	; 0x1d
    560c:	ee 8c       	ldd	r14, Y+30	; 0x1e
    560e:	ff 8c       	ldd	r15, Y+31	; 0x1f
    5610:	88 8d       	ldd	r24, Y+24	; 0x18
    5612:	99 8d       	ldd	r25, Y+25	; 0x19
    5614:	aa 8d       	ldd	r26, Y+26	; 0x1a
    5616:	bb 8d       	ldd	r27, Y+27	; 0x1b
    5618:	88 a7       	std	Y+40, r24	; 0x28
    561a:	99 a7       	std	Y+41, r25	; 0x29
    561c:	aa a7       	std	Y+42, r26	; 0x2a
    561e:	bb a7       	std	Y+43, r27	; 0x2b
    5620:	48 a1       	ldd	r20, Y+32	; 0x20
    5622:	59 a1       	ldd	r21, Y+33	; 0x21
    5624:	6a a1       	ldd	r22, Y+34	; 0x22
    5626:	7b a1       	ldd	r23, Y+35	; 0x23
    5628:	9d 81       	ldd	r25, Y+5	; 0x05
    562a:	90 35       	cpi	r25, 0x50	; 80
    562c:	09 f0       	breq	.+2      	; 0x5630 <ripemd160Block+0x60c>
    562e:	9e cd       	rjmp	.-1220   	; 0x516c <ripemd160Block+0x148>
    5630:	26 96       	adiw	r28, 0x06	; 6
    5632:	8c ad       	ldd	r24, Y+60	; 0x3c
    5634:	9d ad       	ldd	r25, Y+61	; 0x3d
    5636:	ae ad       	ldd	r26, Y+62	; 0x3e
    5638:	bf ad       	ldd	r27, Y+63	; 0x3f
    563a:	26 97       	sbiw	r28, 0x06	; 6
		D2 = rol(C2, 10);
		C2 = B2;
		B2 = T;
	}
	T = hs->h[1] + C1 + D2;
	hs->h[1] = hs->h[2] + D1 + E2;
    563c:	ce 80       	ldd	r12, Y+6	; 0x06
    563e:	df 80       	ldd	r13, Y+7	; 0x07
    5640:	e8 84       	ldd	r14, Y+8	; 0x08
    5642:	f9 84       	ldd	r15, Y+9	; 0x09
    5644:	8c 0c       	add	r8, r12
    5646:	9d 1c       	adc	r9, r13
    5648:	ae 1c       	adc	r10, r14
    564a:	bf 1c       	adc	r11, r15
    564c:	4c a9       	ldd	r20, Y+52	; 0x34
    564e:	5d a9       	ldd	r21, Y+53	; 0x35
    5650:	6e a9       	ldd	r22, Y+54	; 0x36
    5652:	7f a9       	ldd	r23, Y+55	; 0x37
    5654:	84 0e       	add	r8, r20
    5656:	95 1e       	adc	r9, r21
    5658:	a6 1e       	adc	r10, r22
    565a:	b7 1e       	adc	r11, r23
    565c:	f1 01       	movw	r30, r2
    565e:	84 82       	std	Z+4, r8	; 0x04
    5660:	95 82       	std	Z+5, r9	; 0x05
    5662:	a6 82       	std	Z+6, r10	; 0x06
    5664:	b7 82       	std	Z+7, r11	; 0x07
	hs->h[2] = hs->h[3] + E1 + A2;
    5666:	ca 84       	ldd	r12, Y+10	; 0x0a
    5668:	db 84       	ldd	r13, Y+11	; 0x0b
    566a:	ec 84       	ldd	r14, Y+12	; 0x0c
    566c:	fd 84       	ldd	r15, Y+13	; 0x0d
    566e:	48 8d       	ldd	r20, Y+24	; 0x18
    5670:	59 8d       	ldd	r21, Y+25	; 0x19
    5672:	6a 8d       	ldd	r22, Y+26	; 0x1a
    5674:	7b 8d       	ldd	r23, Y+27	; 0x1b
    5676:	c4 0e       	add	r12, r20
    5678:	d5 1e       	adc	r13, r21
    567a:	e6 1e       	adc	r14, r22
    567c:	f7 1e       	adc	r15, r23
    567e:	48 ad       	ldd	r20, Y+56	; 0x38
    5680:	59 ad       	ldd	r21, Y+57	; 0x39
    5682:	6a ad       	ldd	r22, Y+58	; 0x3a
    5684:	7b ad       	ldd	r23, Y+59	; 0x3b
    5686:	c4 0e       	add	r12, r20
    5688:	d5 1e       	adc	r13, r21
    568a:	e6 1e       	adc	r14, r22
    568c:	f7 1e       	adc	r15, r23
    568e:	c0 86       	std	Z+8, r12	; 0x08
    5690:	d1 86       	std	Z+9, r13	; 0x09
    5692:	e2 86       	std	Z+10, r14	; 0x0a
    5694:	f3 86       	std	Z+11, r15	; 0x0b
	hs->h[3] = hs->h[4] + A1 + B2;
    5696:	4c 89       	ldd	r20, Y+20	; 0x14
    5698:	5d 89       	ldd	r21, Y+21	; 0x15
    569a:	6e 89       	ldd	r22, Y+22	; 0x16
    569c:	7f 89       	ldd	r23, Y+23	; 0x17
    569e:	44 0d       	add	r20, r4
    56a0:	55 1d       	adc	r21, r5
    56a2:	66 1d       	adc	r22, r6
    56a4:	77 1d       	adc	r23, r7
    56a6:	cc ac       	ldd	r12, Y+60	; 0x3c
    56a8:	dd ac       	ldd	r13, Y+61	; 0x3d
    56aa:	ee ac       	ldd	r14, Y+62	; 0x3e
    56ac:	ff ac       	ldd	r15, Y+63	; 0x3f
    56ae:	4c 0d       	add	r20, r12
    56b0:	5d 1d       	adc	r21, r13
    56b2:	6e 1d       	adc	r22, r14
    56b4:	7f 1d       	adc	r23, r15
    56b6:	44 87       	std	Z+12, r20	; 0x0c
    56b8:	55 87       	std	Z+13, r21	; 0x0d
    56ba:	66 87       	std	Z+14, r22	; 0x0e
    56bc:	77 87       	std	Z+15, r23	; 0x0f
	hs->h[4] = hs->h[0] + B1 + C2;
    56be:	c8 a0       	ldd	r12, Y+32	; 0x20
    56c0:	d9 a0       	ldd	r13, Y+33	; 0x21
    56c2:	ea a0       	ldd	r14, Y+34	; 0x22
    56c4:	fb a0       	ldd	r15, Y+35	; 0x23
    56c6:	8c 0d       	add	r24, r12
    56c8:	9d 1d       	adc	r25, r13
    56ca:	ae 1d       	adc	r26, r14
    56cc:	bf 1d       	adc	r27, r15
    56ce:	4c a5       	ldd	r20, Y+44	; 0x2c
    56d0:	5d a5       	ldd	r21, Y+45	; 0x2d
    56d2:	6e a5       	ldd	r22, Y+46	; 0x2e
    56d4:	7f a5       	ldd	r23, Y+47	; 0x2f
    56d6:	84 0f       	add	r24, r20
    56d8:	95 1f       	adc	r25, r21
    56da:	a6 1f       	adc	r26, r22
    56dc:	b7 1f       	adc	r27, r23
    56de:	80 8b       	std	Z+16, r24	; 0x10
    56e0:	91 8b       	std	Z+17, r25	; 0x11
    56e2:	a2 8b       	std	Z+18, r26	; 0x12
    56e4:	b3 8b       	std	Z+19, r27	; 0x13
	hs->h[0] = T;
    56e6:	cc 8c       	ldd	r12, Y+28	; 0x1c
    56e8:	dd 8c       	ldd	r13, Y+29	; 0x1d
    56ea:	ee 8c       	ldd	r14, Y+30	; 0x1e
    56ec:	ff 8c       	ldd	r15, Y+31	; 0x1f
    56ee:	0c 0d       	add	r16, r12
    56f0:	1d 1d       	adc	r17, r13
    56f2:	2e 1d       	adc	r18, r14
    56f4:	3f 1d       	adc	r19, r15
    56f6:	48 a9       	ldd	r20, Y+48	; 0x30
    56f8:	59 a9       	ldd	r21, Y+49	; 0x31
    56fa:	6a a9       	ldd	r22, Y+50	; 0x32
    56fc:	7b a9       	ldd	r23, Y+51	; 0x33
    56fe:	04 0f       	add	r16, r20
    5700:	15 1f       	adc	r17, r21
    5702:	26 1f       	adc	r18, r22
    5704:	37 1f       	adc	r19, r23
    5706:	00 83       	st	Z, r16
    5708:	11 83       	std	Z+1, r17	; 0x01
    570a:	22 83       	std	Z+2, r18	; 0x02
    570c:	33 83       	std	Z+3, r19	; 0x03
}
    570e:	cb 5b       	subi	r28, 0xBB	; 187
    5710:	df 4f       	sbci	r29, 0xFF	; 255
    5712:	0f b6       	in	r0, 0x3f	; 63
    5714:	f8 94       	cli
    5716:	de bf       	out	0x3e, r29	; 62
    5718:	0f be       	out	0x3f, r0	; 63
    571a:	cd bf       	out	0x3d, r28	; 61
    571c:	df 91       	pop	r29
    571e:	cf 91       	pop	r28
    5720:	1f 91       	pop	r17
    5722:	0f 91       	pop	r16
    5724:	ff 90       	pop	r15
    5726:	ef 90       	pop	r14
    5728:	df 90       	pop	r13
    572a:	cf 90       	pop	r12
    572c:	bf 90       	pop	r11
    572e:	af 90       	pop	r10
    5730:	9f 90       	pop	r9
    5732:	8f 90       	pop	r8
    5734:	7f 90       	pop	r7
    5736:	6f 90       	pop	r6
    5738:	5f 90       	pop	r5
    573a:	4f 90       	pop	r4
    573c:	3f 90       	pop	r3
    573e:	2f 90       	pop	r2
    5740:	08 95       	ret

00005742 <ripemd160Begin>:

/** Begin calculating hash for new message.
  * \param hs The hash state to initialise.
  */
void ripemd160Begin(HashState *hs)
{
    5742:	fc 01       	movw	r30, r24
	hs->message_length = 0;
    5744:	dc 01       	movw	r26, r24
    5746:	ad 59       	subi	r26, 0x9D	; 157
    5748:	bf 4f       	sbci	r27, 0xFF	; 255
    574a:	1d 92       	st	X+, r1
    574c:	1d 92       	st	X+, r1
    574e:	1d 92       	st	X+, r1
    5750:	1c 92       	st	X, r1
    5752:	13 97       	sbiw	r26, 0x03	; 3
	hs->hashBlock = ripemd160Block;
    5754:	14 96       	adiw	r26, 0x04	; 4
    5756:	82 e1       	ldi	r24, 0x12	; 18
    5758:	98 e2       	ldi	r25, 0x28	; 40
    575a:	8d 93       	st	X+, r24
    575c:	9c 93       	st	X, r25
	hs->is_big_endian = false;
    575e:	12 a2       	std	Z+34, r1	; 0x22
	hs->h[0] = 0x67452301;
    5760:	81 e0       	ldi	r24, 0x01	; 1
    5762:	93 e2       	ldi	r25, 0x23	; 35
    5764:	a5 e4       	ldi	r26, 0x45	; 69
    5766:	b7 e6       	ldi	r27, 0x67	; 103
    5768:	80 83       	st	Z, r24
    576a:	91 83       	std	Z+1, r25	; 0x01
    576c:	a2 83       	std	Z+2, r26	; 0x02
    576e:	b3 83       	std	Z+3, r27	; 0x03
	hs->h[1] = 0xefcdab89;
    5770:	89 e8       	ldi	r24, 0x89	; 137
    5772:	9b ea       	ldi	r25, 0xAB	; 171
    5774:	ad ec       	ldi	r26, 0xCD	; 205
    5776:	bf ee       	ldi	r27, 0xEF	; 239
    5778:	84 83       	std	Z+4, r24	; 0x04
    577a:	95 83       	std	Z+5, r25	; 0x05
    577c:	a6 83       	std	Z+6, r26	; 0x06
    577e:	b7 83       	std	Z+7, r27	; 0x07
	hs->h[2] = 0x98badcfe;
    5780:	8e ef       	ldi	r24, 0xFE	; 254
    5782:	9c ed       	ldi	r25, 0xDC	; 220
    5784:	aa eb       	ldi	r26, 0xBA	; 186
    5786:	b8 e9       	ldi	r27, 0x98	; 152
    5788:	80 87       	std	Z+8, r24	; 0x08
    578a:	91 87       	std	Z+9, r25	; 0x09
    578c:	a2 87       	std	Z+10, r26	; 0x0a
    578e:	b3 87       	std	Z+11, r27	; 0x0b
	hs->h[3] = 0x10325476;
    5790:	86 e7       	ldi	r24, 0x76	; 118
    5792:	94 e5       	ldi	r25, 0x54	; 84
    5794:	a2 e3       	ldi	r26, 0x32	; 50
    5796:	b0 e1       	ldi	r27, 0x10	; 16
    5798:	84 87       	std	Z+12, r24	; 0x0c
    579a:	95 87       	std	Z+13, r25	; 0x0d
    579c:	a6 87       	std	Z+14, r26	; 0x0e
    579e:	b7 87       	std	Z+15, r27	; 0x0f
	hs->h[4] = 0xc3d2e1f0;
    57a0:	80 ef       	ldi	r24, 0xF0	; 240
    57a2:	91 ee       	ldi	r25, 0xE1	; 225
    57a4:	a2 ed       	ldi	r26, 0xD2	; 210
    57a6:	b3 ec       	ldi	r27, 0xC3	; 195
    57a8:	80 8b       	std	Z+16, r24	; 0x10
    57aa:	91 8b       	std	Z+17, r25	; 0x11
    57ac:	a2 8b       	std	Z+18, r26	; 0x12
    57ae:	b3 8b       	std	Z+19, r27	; 0x13
	clearM(hs);
    57b0:	cf 01       	movw	r24, r30
    57b2:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <clearM>
    57b6:	08 95       	ret

000057b8 <ripemd160WriteByte>:
  *           past.
  * \param byte The byte to add.
  */
void ripemd160WriteByte(HashState *hs, uint8_t byte)
{
	hashWriteByte(hs, byte);
    57b8:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <hashWriteByte>
    57bc:	08 95       	ret

000057be <ripemd160Finish>:
  *           been initialised using ripemd160Begin() at some time in the
  *           past.
  */
void ripemd160Finish(HashState *hs)
{
	hashFinish(hs);
    57be:	0c 94 88 0c 	jmp	0x1910	; 0x1910 <hashFinish>
    57c2:	08 95       	ret

000057c4 <sha256Block>:
  * This is an implementation of HashState#hashBlock().
  * This implements the pseudo-code in section 6.2.2 of FIPS PUB 180-3.
  * \param hs The hash state to update.
  */
static void sha256Block(HashState *hs)
{
    57c4:	2f 92       	push	r2
    57c6:	3f 92       	push	r3
    57c8:	4f 92       	push	r4
    57ca:	5f 92       	push	r5
    57cc:	6f 92       	push	r6
    57ce:	7f 92       	push	r7
    57d0:	8f 92       	push	r8
    57d2:	9f 92       	push	r9
    57d4:	af 92       	push	r10
    57d6:	bf 92       	push	r11
    57d8:	cf 92       	push	r12
    57da:	df 92       	push	r13
    57dc:	ef 92       	push	r14
    57de:	ff 92       	push	r15
    57e0:	0f 93       	push	r16
    57e2:	1f 93       	push	r17
    57e4:	cf 93       	push	r28
    57e6:	df 93       	push	r29
    57e8:	cd b7       	in	r28, 0x3d	; 61
    57ea:	de b7       	in	r29, 0x3e	; 62
    57ec:	c2 54       	subi	r28, 0x42	; 66
    57ee:	d1 40       	sbci	r29, 0x01	; 1
    57f0:	0f b6       	in	r0, 0x3f	; 63
    57f2:	f8 94       	cli
    57f4:	de bf       	out	0x3e, r29	; 62
    57f6:	0f be       	out	0x3f, r0	; 63
    57f8:	cd bf       	out	0x3d, r28	; 61
    57fa:	cf 5d       	subi	r28, 0xDF	; 223
    57fc:	de 4f       	sbci	r29, 0xFE	; 254
    57fe:	99 83       	std	Y+1, r25	; 0x01
    5800:	88 83       	st	Y, r24
    5802:	c1 52       	subi	r28, 0x21	; 33
    5804:	d1 40       	sbci	r29, 0x01	; 1
    5806:	dc 01       	movw	r26, r24
    5808:	93 96       	adiw	r26, 0x23	; 35
    580a:	9e 01       	movw	r18, r28
    580c:	2f 5f       	subi	r18, 0xFF	; 255
    580e:	3f 4f       	sbci	r19, 0xFF	; 255
    5810:	c1 5f       	subi	r28, 0xF1	; 241
    5812:	de 4f       	sbci	r29, 0xFE	; 254
    5814:	39 83       	std	Y+1, r19	; 0x01
    5816:	28 83       	st	Y, r18
    5818:	cf 50       	subi	r28, 0x0F	; 15
    581a:	d1 40       	sbci	r29, 0x01	; 1
    581c:	ce 01       	movw	r24, r28
    581e:	8f 5b       	subi	r24, 0xBF	; 191
    5820:	9f 4f       	sbci	r25, 0xFF	; 255
    5822:	f9 01       	movw	r30, r18
	uint8_t t;
	uint32_t w[64];

	for (t = 0; t < 16; t++)
	{
		w[t] = hs->m[t];
    5824:	4d 91       	ld	r20, X+
    5826:	5d 91       	ld	r21, X+
    5828:	6d 91       	ld	r22, X+
    582a:	7d 91       	ld	r23, X+
    582c:	41 93       	st	Z+, r20
    582e:	51 93       	st	Z+, r21
    5830:	61 93       	st	Z+, r22
    5832:	71 93       	st	Z+, r23
	uint32_t a, b, c, d, e, f, g, h;
	uint32_t t1, t2;
	uint8_t t;
	uint32_t w[64];

	for (t = 0; t < 16; t++)
    5834:	e8 17       	cp	r30, r24
    5836:	f9 07       	cpc	r31, r25
    5838:	a9 f7       	brne	.-22     	; 0x5824 <sha256Block+0x60>
    583a:	1e 01       	movw	r2, r28
    583c:	31 ec       	ldi	r19, 0xC1	; 193
    583e:	23 0e       	add	r2, r19
    5840:	31 1c       	adc	r3, r1
    5842:	c1 5f       	subi	r28, 0xF1	; 241
    5844:	de 4f       	sbci	r29, 0xFE	; 254
    5846:	e8 81       	ld	r30, Y
    5848:	f9 81       	ldd	r31, Y+1	; 0x01
    584a:	cf 50       	subi	r28, 0x0F	; 15
    584c:	d1 40       	sbci	r29, 0x01	; 1
    584e:	cd 5f       	subi	r28, 0xFD	; 253
    5850:	de 4f       	sbci	r29, 0xFE	; 254
    5852:	f9 83       	std	Y+1, r31	; 0x01
    5854:	e8 83       	st	Y, r30
    5856:	c3 50       	subi	r28, 0x03	; 3
    5858:	d1 40       	sbci	r29, 0x01	; 1
    585a:	cd 5f       	subi	r28, 0xFD	; 253
    585c:	de 4f       	sbci	r29, 0xFE	; 254
    585e:	28 81       	ld	r18, Y
    5860:	39 81       	ldd	r19, Y+1	; 0x01
    5862:	c3 50       	subi	r28, 0x03	; 3
    5864:	d1 40       	sbci	r29, 0x01	; 1
	{
		w[t] = hs->m[t];
	}
	for (t = 16; t < 64; t++)
	{
		w[t] = littleSigma1(w[t - 2]) + w[t - 7] + littleSigma0(w[t - 15]) + w[t - 16];
    5866:	d9 01       	movw	r26, r18
    5868:	d8 96       	adiw	r26, 0x38	; 56
    586a:	4d 91       	ld	r20, X+
    586c:	5d 91       	ld	r21, X+
    586e:	6d 91       	ld	r22, X+
    5870:	7c 91       	ld	r23, X
    5872:	db 97       	sbiw	r26, 0x3b	; 59
    5874:	14 96       	adiw	r26, 0x04	; 4
    5876:	8d 91       	ld	r24, X+
    5878:	9d 91       	ld	r25, X+
    587a:	0d 90       	ld	r0, X+
    587c:	bc 91       	ld	r27, X
    587e:	a0 2d       	mov	r26, r0
    5880:	f9 01       	movw	r30, r18
    5882:	34 96       	adiw	r30, 0x04	; 4
    5884:	cd 5f       	subi	r28, 0xFD	; 253
    5886:	de 4f       	sbci	r29, 0xFE	; 254
    5888:	f9 83       	std	Y+1, r31	; 0x01
    588a:	e8 83       	st	Y, r30
    588c:	c3 50       	subi	r28, 0x03	; 3
    588e:	d1 40       	sbci	r29, 0x01	; 1
    5890:	f9 01       	movw	r30, r18
    5892:	c4 a0       	ldd	r12, Z+36	; 0x24
    5894:	d5 a0       	ldd	r13, Z+37	; 0x25
    5896:	e6 a0       	ldd	r14, Z+38	; 0x26
    5898:	f7 a0       	ldd	r15, Z+39	; 0x27
    589a:	00 81       	ld	r16, Z
    589c:	11 81       	ldd	r17, Z+1	; 0x01
    589e:	22 81       	ldd	r18, Z+2	; 0x02
    58a0:	33 81       	ldd	r19, Z+3	; 0x03
    58a2:	c0 0e       	add	r12, r16
    58a4:	d1 1e       	adc	r13, r17
    58a6:	e2 1e       	adc	r14, r18
    58a8:	f3 1e       	adc	r15, r19
    58aa:	2a 01       	movw	r4, r20
    58ac:	3b 01       	movw	r6, r22
    58ae:	03 2e       	mov	r0, r19
    58b0:	3d e0       	ldi	r19, 0x0D	; 13
    58b2:	44 0c       	add	r4, r4
    58b4:	55 1c       	adc	r5, r5
    58b6:	66 1c       	adc	r6, r6
    58b8:	77 1c       	adc	r7, r7
    58ba:	3a 95       	dec	r19
    58bc:	d1 f7       	brne	.-12     	; 0x58b2 <sha256Block+0xee>
    58be:	30 2d       	mov	r19, r0
    58c0:	8a 01       	movw	r16, r20
    58c2:	9b 01       	movw	r18, r22
    58c4:	0f 2e       	mov	r0, r31
    58c6:	f3 e1       	ldi	r31, 0x13	; 19
    58c8:	36 95       	lsr	r19
    58ca:	27 95       	ror	r18
    58cc:	17 95       	ror	r17
    58ce:	07 95       	ror	r16
    58d0:	fa 95       	dec	r31
    58d2:	d1 f7       	brne	.-12     	; 0x58c8 <sha256Block+0x104>
    58d4:	f0 2d       	mov	r31, r0
    58d6:	40 2a       	or	r4, r16
    58d8:	51 2a       	or	r5, r17
    58da:	62 2a       	or	r6, r18
    58dc:	73 2a       	or	r7, r19
    58de:	8a 01       	movw	r16, r20
    58e0:	9b 01       	movw	r18, r22
    58e2:	0f 2e       	mov	r0, r31
    58e4:	ff e0       	ldi	r31, 0x0F	; 15
    58e6:	00 0f       	add	r16, r16
    58e8:	11 1f       	adc	r17, r17
    58ea:	22 1f       	adc	r18, r18
    58ec:	33 1f       	adc	r19, r19
    58ee:	fa 95       	dec	r31
    58f0:	d1 f7       	brne	.-12     	; 0x58e6 <sha256Block+0x122>
    58f2:	f0 2d       	mov	r31, r0
    58f4:	4a 01       	movw	r8, r20
    58f6:	5b 01       	movw	r10, r22
    58f8:	07 2e       	mov	r0, r23
    58fa:	71 e1       	ldi	r23, 0x11	; 17
    58fc:	b6 94       	lsr	r11
    58fe:	a7 94       	ror	r10
    5900:	97 94       	ror	r9
    5902:	87 94       	ror	r8
    5904:	7a 95       	dec	r23
    5906:	d1 f7       	brne	.-12     	; 0x58fc <sha256Block+0x138>
    5908:	70 2d       	mov	r23, r0
    590a:	08 29       	or	r16, r8
    590c:	19 29       	or	r17, r9
    590e:	2a 29       	or	r18, r10
    5910:	3b 29       	or	r19, r11
    5912:	04 25       	eor	r16, r4
    5914:	15 25       	eor	r17, r5
    5916:	26 25       	eor	r18, r6
    5918:	37 25       	eor	r19, r7
    591a:	03 2e       	mov	r0, r19
    591c:	3a e0       	ldi	r19, 0x0A	; 10
    591e:	76 95       	lsr	r23
    5920:	67 95       	ror	r22
    5922:	57 95       	ror	r21
    5924:	47 95       	ror	r20
    5926:	3a 95       	dec	r19
    5928:	d1 f7       	brne	.-12     	; 0x591e <sha256Block+0x15a>
    592a:	30 2d       	mov	r19, r0
    592c:	40 27       	eor	r20, r16
    592e:	51 27       	eor	r21, r17
    5930:	62 27       	eor	r22, r18
    5932:	73 27       	eor	r23, r19
    5934:	97 01       	movw	r18, r14
    5936:	86 01       	movw	r16, r12
    5938:	04 0f       	add	r16, r20
    593a:	15 1f       	adc	r17, r21
    593c:	26 1f       	adc	r18, r22
    593e:	37 1f       	adc	r19, r23
    5940:	6c 01       	movw	r12, r24
    5942:	7d 01       	movw	r14, r26
    5944:	0b 2e       	mov	r0, r27
    5946:	be e0       	ldi	r27, 0x0E	; 14
    5948:	cc 0c       	add	r12, r12
    594a:	dd 1c       	adc	r13, r13
    594c:	ee 1c       	adc	r14, r14
    594e:	ff 1c       	adc	r15, r15
    5950:	ba 95       	dec	r27
    5952:	d1 f7       	brne	.-12     	; 0x5948 <sha256Block+0x184>
    5954:	b0 2d       	mov	r27, r0
    5956:	ac 01       	movw	r20, r24
    5958:	bd 01       	movw	r22, r26
    595a:	03 2e       	mov	r0, r19
    595c:	32 e1       	ldi	r19, 0x12	; 18
    595e:	76 95       	lsr	r23
    5960:	67 95       	ror	r22
    5962:	57 95       	ror	r21
    5964:	47 95       	ror	r20
    5966:	3a 95       	dec	r19
    5968:	d1 f7       	brne	.-12     	; 0x595e <sha256Block+0x19a>
    596a:	30 2d       	mov	r19, r0
    596c:	46 01       	movw	r8, r12
    596e:	57 01       	movw	r10, r14
    5970:	84 2a       	or	r8, r20
    5972:	95 2a       	or	r9, r21
    5974:	a6 2a       	or	r10, r22
    5976:	b7 2a       	or	r11, r23
    5978:	6c 01       	movw	r12, r24
    597a:	7d 01       	movw	r14, r26
    597c:	68 94       	set
    597e:	16 f8       	bld	r1, 6
    5980:	f6 94       	lsr	r15
    5982:	e7 94       	ror	r14
    5984:	d7 94       	ror	r13
    5986:	c7 94       	ror	r12
    5988:	16 94       	lsr	r1
    598a:	d1 f7       	brne	.-12     	; 0x5980 <sha256Block+0x1bc>
    598c:	ac 01       	movw	r20, r24
    598e:	bd 01       	movw	r22, r26
    5990:	03 2e       	mov	r0, r19
    5992:	39 e1       	ldi	r19, 0x19	; 25
    5994:	44 0f       	add	r20, r20
    5996:	55 1f       	adc	r21, r21
    5998:	66 1f       	adc	r22, r22
    599a:	77 1f       	adc	r23, r23
    599c:	3a 95       	dec	r19
    599e:	d1 f7       	brne	.-12     	; 0x5994 <sha256Block+0x1d0>
    59a0:	30 2d       	mov	r19, r0
    59a2:	4c 29       	or	r20, r12
    59a4:	5d 29       	or	r21, r13
    59a6:	6e 29       	or	r22, r14
    59a8:	7f 29       	or	r23, r15
    59aa:	75 01       	movw	r14, r10
    59ac:	64 01       	movw	r12, r8
    59ae:	c4 26       	eor	r12, r20
    59b0:	d5 26       	eor	r13, r21
    59b2:	e6 26       	eor	r14, r22
    59b4:	f7 26       	eor	r15, r23
    59b6:	ac 01       	movw	r20, r24
    59b8:	bd 01       	movw	r22, r26
    59ba:	68 94       	set
    59bc:	12 f8       	bld	r1, 2
    59be:	76 95       	lsr	r23
    59c0:	67 95       	ror	r22
    59c2:	57 95       	ror	r21
    59c4:	47 95       	ror	r20
    59c6:	16 94       	lsr	r1
    59c8:	d1 f7       	brne	.-12     	; 0x59be <sha256Block+0x1fa>
    59ca:	d7 01       	movw	r26, r14
    59cc:	c6 01       	movw	r24, r12
    59ce:	84 27       	eor	r24, r20
    59d0:	95 27       	eor	r25, r21
    59d2:	a6 27       	eor	r26, r22
    59d4:	b7 27       	eor	r27, r23
    59d6:	80 0f       	add	r24, r16
    59d8:	91 1f       	adc	r25, r17
    59da:	a2 1f       	adc	r26, r18
    59dc:	b3 1f       	adc	r27, r19
    59de:	cd 5f       	subi	r28, 0xFD	; 253
    59e0:	de 4f       	sbci	r29, 0xFE	; 254
    59e2:	e8 81       	ld	r30, Y
    59e4:	f9 81       	ldd	r31, Y+1	; 0x01
    59e6:	c3 50       	subi	r28, 0x03	; 3
    59e8:	d1 40       	sbci	r29, 0x01	; 1
    59ea:	84 af       	std	Z+60, r24	; 0x3c
    59ec:	95 af       	std	Z+61, r25	; 0x3d
    59ee:	a6 af       	std	Z+62, r26	; 0x3e
    59f0:	b7 af       	std	Z+63, r27	; 0x3f

	for (t = 0; t < 16; t++)
	{
		w[t] = hs->m[t];
	}
	for (t = 16; t < 64; t++)
    59f2:	e2 15       	cp	r30, r2
    59f4:	f3 05       	cpc	r31, r3
    59f6:	09 f0       	breq	.+2      	; 0x59fa <sha256Block+0x236>
    59f8:	30 cf       	rjmp	.-416    	; 0x585a <sha256Block+0x96>
	{
		w[t] = littleSigma1(w[t - 2]) + w[t - 7] + littleSigma0(w[t - 15]) + w[t - 16];
	}
	a = hs->h[0];
    59fa:	cf 5d       	subi	r28, 0xDF	; 223
    59fc:	de 4f       	sbci	r29, 0xFE	; 254
    59fe:	a8 81       	ld	r26, Y
    5a00:	b9 81       	ldd	r27, Y+1	; 0x01
    5a02:	c1 52       	subi	r28, 0x21	; 33
    5a04:	d1 40       	sbci	r29, 0x01	; 1
    5a06:	8d 90       	ld	r8, X+
    5a08:	9d 90       	ld	r9, X+
    5a0a:	ad 90       	ld	r10, X+
    5a0c:	bc 90       	ld	r11, X
    5a0e:	13 97       	sbiw	r26, 0x03	; 3
    5a10:	cd 5d       	subi	r28, 0xDD	; 221
    5a12:	de 4f       	sbci	r29, 0xFE	; 254
    5a14:	88 82       	st	Y, r8
    5a16:	99 82       	std	Y+1, r9	; 0x01
    5a18:	aa 82       	std	Y+2, r10	; 0x02
    5a1a:	bb 82       	std	Y+3, r11	; 0x03
    5a1c:	c3 52       	subi	r28, 0x23	; 35
    5a1e:	d1 40       	sbci	r29, 0x01	; 1
	b = hs->h[1];
    5a20:	14 96       	adiw	r26, 0x04	; 4
    5a22:	8d 90       	ld	r8, X+
    5a24:	9d 90       	ld	r9, X+
    5a26:	ad 90       	ld	r10, X+
    5a28:	bc 90       	ld	r11, X
    5a2a:	17 97       	sbiw	r26, 0x07	; 7
    5a2c:	c9 5d       	subi	r28, 0xD9	; 217
    5a2e:	de 4f       	sbci	r29, 0xFE	; 254
    5a30:	88 82       	st	Y, r8
    5a32:	99 82       	std	Y+1, r9	; 0x01
    5a34:	aa 82       	std	Y+2, r10	; 0x02
    5a36:	bb 82       	std	Y+3, r11	; 0x03
    5a38:	c7 52       	subi	r28, 0x27	; 39
    5a3a:	d1 40       	sbci	r29, 0x01	; 1
	c = hs->h[2];
    5a3c:	18 96       	adiw	r26, 0x08	; 8
    5a3e:	8d 90       	ld	r8, X+
    5a40:	9d 90       	ld	r9, X+
    5a42:	ad 90       	ld	r10, X+
    5a44:	bc 90       	ld	r11, X
    5a46:	1b 97       	sbiw	r26, 0x0b	; 11
    5a48:	c5 5d       	subi	r28, 0xD5	; 213
    5a4a:	de 4f       	sbci	r29, 0xFE	; 254
    5a4c:	88 82       	st	Y, r8
    5a4e:	99 82       	std	Y+1, r9	; 0x01
    5a50:	aa 82       	std	Y+2, r10	; 0x02
    5a52:	bb 82       	std	Y+3, r11	; 0x03
    5a54:	cb 52       	subi	r28, 0x2B	; 43
    5a56:	d1 40       	sbci	r29, 0x01	; 1
	d = hs->h[3];
    5a58:	1c 96       	adiw	r26, 0x0c	; 12
    5a5a:	8d 90       	ld	r8, X+
    5a5c:	9d 90       	ld	r9, X+
    5a5e:	ad 90       	ld	r10, X+
    5a60:	bc 90       	ld	r11, X
    5a62:	1f 97       	sbiw	r26, 0x0f	; 15
    5a64:	c1 5d       	subi	r28, 0xD1	; 209
    5a66:	de 4f       	sbci	r29, 0xFE	; 254
    5a68:	88 82       	st	Y, r8
    5a6a:	99 82       	std	Y+1, r9	; 0x01
    5a6c:	aa 82       	std	Y+2, r10	; 0x02
    5a6e:	bb 82       	std	Y+3, r11	; 0x03
    5a70:	cf 52       	subi	r28, 0x2F	; 47
    5a72:	d1 40       	sbci	r29, 0x01	; 1
	e = hs->h[4];
    5a74:	50 96       	adiw	r26, 0x10	; 16
    5a76:	8d 90       	ld	r8, X+
    5a78:	9d 90       	ld	r9, X+
    5a7a:	ad 90       	ld	r10, X+
    5a7c:	bc 90       	ld	r11, X
    5a7e:	53 97       	sbiw	r26, 0x13	; 19
    5a80:	cd 5c       	subi	r28, 0xCD	; 205
    5a82:	de 4f       	sbci	r29, 0xFE	; 254
    5a84:	88 82       	st	Y, r8
    5a86:	99 82       	std	Y+1, r9	; 0x01
    5a88:	aa 82       	std	Y+2, r10	; 0x02
    5a8a:	bb 82       	std	Y+3, r11	; 0x03
    5a8c:	c3 53       	subi	r28, 0x33	; 51
    5a8e:	d1 40       	sbci	r29, 0x01	; 1
	f = hs->h[5];
    5a90:	54 96       	adiw	r26, 0x14	; 20
    5a92:	8d 90       	ld	r8, X+
    5a94:	9d 90       	ld	r9, X+
    5a96:	ad 90       	ld	r10, X+
    5a98:	bc 90       	ld	r11, X
    5a9a:	57 97       	sbiw	r26, 0x17	; 23
    5a9c:	c9 5c       	subi	r28, 0xC9	; 201
    5a9e:	de 4f       	sbci	r29, 0xFE	; 254
    5aa0:	88 82       	st	Y, r8
    5aa2:	99 82       	std	Y+1, r9	; 0x01
    5aa4:	aa 82       	std	Y+2, r10	; 0x02
    5aa6:	bb 82       	std	Y+3, r11	; 0x03
    5aa8:	c7 53       	subi	r28, 0x37	; 55
    5aaa:	d1 40       	sbci	r29, 0x01	; 1
	g = hs->h[6];
    5aac:	58 96       	adiw	r26, 0x18	; 24
    5aae:	8d 90       	ld	r8, X+
    5ab0:	9d 90       	ld	r9, X+
    5ab2:	ad 90       	ld	r10, X+
    5ab4:	bc 90       	ld	r11, X
    5ab6:	5b 97       	sbiw	r26, 0x1b	; 27
    5ab8:	c5 5c       	subi	r28, 0xC5	; 197
    5aba:	de 4f       	sbci	r29, 0xFE	; 254
    5abc:	88 82       	st	Y, r8
    5abe:	99 82       	std	Y+1, r9	; 0x01
    5ac0:	aa 82       	std	Y+2, r10	; 0x02
    5ac2:	bb 82       	std	Y+3, r11	; 0x03
    5ac4:	cb 53       	subi	r28, 0x3B	; 59
    5ac6:	d1 40       	sbci	r29, 0x01	; 1
	h = hs->h[7];
    5ac8:	5c 96       	adiw	r26, 0x1c	; 28
    5aca:	8d 90       	ld	r8, X+
    5acc:	9d 90       	ld	r9, X+
    5ace:	ad 90       	ld	r10, X+
    5ad0:	bc 90       	ld	r11, X
    5ad2:	5f 97       	sbiw	r26, 0x1f	; 31
    5ad4:	c1 5c       	subi	r28, 0xC1	; 193
    5ad6:	de 4f       	sbci	r29, 0xFE	; 254
    5ad8:	88 82       	st	Y, r8
    5ada:	99 82       	std	Y+1, r9	; 0x01
    5adc:	aa 82       	std	Y+2, r10	; 0x02
    5ade:	bb 82       	std	Y+3, r11	; 0x03
    5ae0:	cf 53       	subi	r28, 0x3F	; 63
    5ae2:	d1 40       	sbci	r29, 0x01	; 1
    5ae4:	0f 2e       	mov	r0, r31
    5ae6:	fc e0       	ldi	r31, 0x0C	; 12
    5ae8:	2f 2e       	mov	r2, r31
    5aea:	f5 e0       	ldi	r31, 0x05	; 5
    5aec:	3f 2e       	mov	r3, r31
    5aee:	f0 2d       	mov	r31, r0
    5af0:	9e 01       	movw	r18, r28
    5af2:	2f 5f       	subi	r18, 0xFF	; 255
    5af4:	3e 4f       	sbci	r19, 0xFE	; 254
    5af6:	cf 5f       	subi	r28, 0xFF	; 255
    5af8:	de 4f       	sbci	r29, 0xFE	; 254
    5afa:	39 83       	std	Y+1, r19	; 0x01
    5afc:	28 83       	st	Y, r18
    5afe:	c1 50       	subi	r28, 0x01	; 1
    5b00:	d1 40       	sbci	r29, 0x01	; 1
    5b02:	cd 5f       	subi	r28, 0xFD	; 253
    5b04:	de 4f       	sbci	r29, 0xFE	; 254
    5b06:	88 82       	st	Y, r8
    5b08:	99 82       	std	Y+1, r9	; 0x01
    5b0a:	aa 82       	std	Y+2, r10	; 0x02
    5b0c:	bb 82       	std	Y+3, r11	; 0x03
    5b0e:	c3 50       	subi	r28, 0x03	; 3
    5b10:	d1 40       	sbci	r29, 0x01	; 1
	b = hs->h[1];
	c = hs->h[2];
	d = hs->h[3];
	e = hs->h[4];
	f = hs->h[5];
	g = hs->h[6];
    5b12:	c5 5c       	subi	r28, 0xC5	; 197
    5b14:	de 4f       	sbci	r29, 0xFE	; 254
    5b16:	48 81       	ld	r20, Y
    5b18:	59 81       	ldd	r21, Y+1	; 0x01
    5b1a:	6a 81       	ldd	r22, Y+2	; 0x02
    5b1c:	7b 81       	ldd	r23, Y+3	; 0x03
    5b1e:	cb 53       	subi	r28, 0x3B	; 59
    5b20:	d1 40       	sbci	r29, 0x01	; 1
    5b22:	cf 5e       	subi	r28, 0xEF	; 239
    5b24:	de 4f       	sbci	r29, 0xFE	; 254
    5b26:	48 83       	st	Y, r20
    5b28:	59 83       	std	Y+1, r21	; 0x01
    5b2a:	6a 83       	std	Y+2, r22	; 0x02
    5b2c:	7b 83       	std	Y+3, r23	; 0x03
    5b2e:	c1 51       	subi	r28, 0x11	; 17
    5b30:	d1 40       	sbci	r29, 0x01	; 1
	a = hs->h[0];
	b = hs->h[1];
	c = hs->h[2];
	d = hs->h[3];
	e = hs->h[4];
	f = hs->h[5];
    5b32:	c9 5c       	subi	r28, 0xC9	; 201
    5b34:	de 4f       	sbci	r29, 0xFE	; 254
    5b36:	68 81       	ld	r22, Y
    5b38:	79 81       	ldd	r23, Y+1	; 0x01
    5b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    5b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    5b3e:	c7 53       	subi	r28, 0x37	; 55
    5b40:	d1 40       	sbci	r29, 0x01	; 1
    5b42:	cb 5e       	subi	r28, 0xEB	; 235
    5b44:	de 4f       	sbci	r29, 0xFE	; 254
    5b46:	68 83       	st	Y, r22
    5b48:	79 83       	std	Y+1, r23	; 0x01
    5b4a:	8a 83       	std	Y+2, r24	; 0x02
    5b4c:	9b 83       	std	Y+3, r25	; 0x03
    5b4e:	c5 51       	subi	r28, 0x15	; 21
    5b50:	d1 40       	sbci	r29, 0x01	; 1
	}
	a = hs->h[0];
	b = hs->h[1];
	c = hs->h[2];
	d = hs->h[3];
	e = hs->h[4];
    5b52:	cd 5c       	subi	r28, 0xCD	; 205
    5b54:	de 4f       	sbci	r29, 0xFE	; 254
    5b56:	48 80       	ld	r4, Y
    5b58:	59 80       	ldd	r5, Y+1	; 0x01
    5b5a:	6a 80       	ldd	r6, Y+2	; 0x02
    5b5c:	7b 80       	ldd	r7, Y+3	; 0x03
    5b5e:	c3 53       	subi	r28, 0x33	; 51
    5b60:	d1 40       	sbci	r29, 0x01	; 1
		w[t] = littleSigma1(w[t - 2]) + w[t - 7] + littleSigma0(w[t - 15]) + w[t - 16];
	}
	a = hs->h[0];
	b = hs->h[1];
	c = hs->h[2];
	d = hs->h[3];
    5b62:	c1 5d       	subi	r28, 0xD1	; 209
    5b64:	de 4f       	sbci	r29, 0xFE	; 254
    5b66:	88 81       	ld	r24, Y
    5b68:	99 81       	ldd	r25, Y+1	; 0x01
    5b6a:	aa 81       	ldd	r26, Y+2	; 0x02
    5b6c:	bb 81       	ldd	r27, Y+3	; 0x03
    5b6e:	cf 52       	subi	r28, 0x2F	; 47
    5b70:	d1 40       	sbci	r29, 0x01	; 1
    5b72:	c7 5e       	subi	r28, 0xE7	; 231
    5b74:	de 4f       	sbci	r29, 0xFE	; 254
    5b76:	88 83       	st	Y, r24
    5b78:	99 83       	std	Y+1, r25	; 0x01
    5b7a:	aa 83       	std	Y+2, r26	; 0x02
    5b7c:	bb 83       	std	Y+3, r27	; 0x03
    5b7e:	c9 51       	subi	r28, 0x19	; 25
    5b80:	d1 40       	sbci	r29, 0x01	; 1
	{
		w[t] = littleSigma1(w[t - 2]) + w[t - 7] + littleSigma0(w[t - 15]) + w[t - 16];
	}
	a = hs->h[0];
	b = hs->h[1];
	c = hs->h[2];
    5b82:	c5 5d       	subi	r28, 0xD5	; 213
    5b84:	de 4f       	sbci	r29, 0xFE	; 254
    5b86:	88 80       	ld	r8, Y
    5b88:	99 80       	ldd	r9, Y+1	; 0x01
    5b8a:	aa 80       	ldd	r10, Y+2	; 0x02
    5b8c:	bb 80       	ldd	r11, Y+3	; 0x03
    5b8e:	cb 52       	subi	r28, 0x2B	; 43
    5b90:	d1 40       	sbci	r29, 0x01	; 1
    5b92:	c9 5f       	subi	r28, 0xF9	; 249
    5b94:	de 4f       	sbci	r29, 0xFE	; 254
    5b96:	88 82       	st	Y, r8
    5b98:	99 82       	std	Y+1, r9	; 0x01
    5b9a:	aa 82       	std	Y+2, r10	; 0x02
    5b9c:	bb 82       	std	Y+3, r11	; 0x03
    5b9e:	c7 50       	subi	r28, 0x07	; 7
    5ba0:	d1 40       	sbci	r29, 0x01	; 1
	for (t = 16; t < 64; t++)
	{
		w[t] = littleSigma1(w[t - 2]) + w[t - 7] + littleSigma0(w[t - 15]) + w[t - 16];
	}
	a = hs->h[0];
	b = hs->h[1];
    5ba2:	c9 5d       	subi	r28, 0xD9	; 217
    5ba4:	de 4f       	sbci	r29, 0xFE	; 254
    5ba6:	a8 80       	ld	r10, Y
    5ba8:	b9 80       	ldd	r11, Y+1	; 0x01
    5baa:	ca 80       	ldd	r12, Y+2	; 0x02
    5bac:	db 80       	ldd	r13, Y+3	; 0x03
    5bae:	c7 52       	subi	r28, 0x27	; 39
    5bb0:	d1 40       	sbci	r29, 0x01	; 1
    5bb2:	c5 5f       	subi	r28, 0xF5	; 245
    5bb4:	de 4f       	sbci	r29, 0xFE	; 254
    5bb6:	a8 82       	st	Y, r10
    5bb8:	b9 82       	std	Y+1, r11	; 0x01
    5bba:	ca 82       	std	Y+2, r12	; 0x02
    5bbc:	db 82       	std	Y+3, r13	; 0x03
    5bbe:	cb 50       	subi	r28, 0x0B	; 11
    5bc0:	d1 40       	sbci	r29, 0x01	; 1
	}
	for (t = 16; t < 64; t++)
	{
		w[t] = littleSigma1(w[t - 2]) + w[t - 7] + littleSigma0(w[t - 15]) + w[t - 16];
	}
	a = hs->h[0];
    5bc2:	cd 5d       	subi	r28, 0xDD	; 221
    5bc4:	de 4f       	sbci	r29, 0xFE	; 254
    5bc6:	88 81       	ld	r24, Y
    5bc8:	99 81       	ldd	r25, Y+1	; 0x01
    5bca:	aa 81       	ldd	r26, Y+2	; 0x02
    5bcc:	bb 81       	ldd	r27, Y+3	; 0x03
    5bce:	c3 52       	subi	r28, 0x23	; 35
    5bd0:	d1 40       	sbci	r29, 0x01	; 1
    5bd2:	34 c0       	rjmp	.+104    	; 0x5c3c <sha256Block+0x478>
    5bd4:	cb 5e       	subi	r28, 0xEB	; 235
    5bd6:	de 4f       	sbci	r29, 0xFE	; 254
    5bd8:	28 81       	ld	r18, Y
    5bda:	39 81       	ldd	r19, Y+1	; 0x01
    5bdc:	4a 81       	ldd	r20, Y+2	; 0x02
    5bde:	5b 81       	ldd	r21, Y+3	; 0x03
    5be0:	c5 51       	subi	r28, 0x15	; 21
    5be2:	d1 40       	sbci	r29, 0x01	; 1
    5be4:	cf 5e       	subi	r28, 0xEF	; 239
    5be6:	de 4f       	sbci	r29, 0xFE	; 254
    5be8:	28 83       	st	Y, r18
    5bea:	39 83       	std	Y+1, r19	; 0x01
    5bec:	4a 83       	std	Y+2, r20	; 0x02
    5bee:	5b 83       	std	Y+3, r21	; 0x03
    5bf0:	c1 51       	subi	r28, 0x11	; 17
    5bf2:	d1 40       	sbci	r29, 0x01	; 1
    5bf4:	cb 5e       	subi	r28, 0xEB	; 235
    5bf6:	de 4f       	sbci	r29, 0xFE	; 254
    5bf8:	48 82       	st	Y, r4
    5bfa:	59 82       	std	Y+1, r5	; 0x01
    5bfc:	6a 82       	std	Y+2, r6	; 0x02
    5bfe:	7b 82       	std	Y+3, r7	; 0x03
    5c00:	c5 51       	subi	r28, 0x15	; 21
    5c02:	d1 40       	sbci	r29, 0x01	; 1
		t1 = h + bigSigma1(e) + ch(e, f, g) + LOOKUP_DWORD(k[t]) + w[t];
		t2 = bigSigma0(a) + maj(a, b, c);
		h = g;
		g = f;
		f = e;
		e = d + t1;
    5c04:	24 01       	movw	r4, r8
    5c06:	35 01       	movw	r6, r10
    5c08:	c5 5f       	subi	r28, 0xF5	; 245
    5c0a:	de 4f       	sbci	r29, 0xFE	; 254
    5c0c:	48 81       	ld	r20, Y
    5c0e:	59 81       	ldd	r21, Y+1	; 0x01
    5c10:	6a 81       	ldd	r22, Y+2	; 0x02
    5c12:	7b 81       	ldd	r23, Y+3	; 0x03
    5c14:	cb 50       	subi	r28, 0x0B	; 11
    5c16:	d1 40       	sbci	r29, 0x01	; 1
    5c18:	c9 5f       	subi	r28, 0xF9	; 249
    5c1a:	de 4f       	sbci	r29, 0xFE	; 254
    5c1c:	48 83       	st	Y, r20
    5c1e:	59 83       	std	Y+1, r21	; 0x01
    5c20:	6a 83       	std	Y+2, r22	; 0x02
    5c22:	7b 83       	std	Y+3, r23	; 0x03
    5c24:	c7 50       	subi	r28, 0x07	; 7
    5c26:	d1 40       	sbci	r29, 0x01	; 1
    5c28:	c5 5f       	subi	r28, 0xF5	; 245
    5c2a:	de 4f       	sbci	r29, 0xFE	; 254
    5c2c:	88 83       	st	Y, r24
    5c2e:	99 83       	std	Y+1, r25	; 0x01
    5c30:	aa 83       	std	Y+2, r26	; 0x02
    5c32:	bb 83       	std	Y+3, r27	; 0x03
    5c34:	cb 50       	subi	r28, 0x0B	; 11
    5c36:	d1 40       	sbci	r29, 0x01	; 1
		d = c;
		c = b;
		b = a;
		a = t1 + t2;
    5c38:	d7 01       	movw	r26, r14
    5c3a:	c6 01       	movw	r24, r12
	f = hs->h[5];
	g = hs->h[6];
	h = hs->h[7];
	for (t = 0; t < 64; t++)
	{
		t1 = h + bigSigma1(e) + ch(e, f, g) + LOOKUP_DWORD(k[t]) + w[t];
    5c3c:	f1 01       	movw	r30, r2
    5c3e:	85 90       	lpm	r8, Z+
    5c40:	95 90       	lpm	r9, Z+
    5c42:	a5 90       	lpm	r10, Z+
    5c44:	b4 90       	lpm	r11, Z
    5c46:	c3 5e       	subi	r28, 0xE3	; 227
    5c48:	de 4f       	sbci	r29, 0xFE	; 254
    5c4a:	88 82       	st	Y, r8
    5c4c:	99 82       	std	Y+1, r9	; 0x01
    5c4e:	aa 82       	std	Y+2, r10	; 0x02
    5c50:	bb 82       	std	Y+3, r11	; 0x03
    5c52:	cd 51       	subi	r28, 0x1D	; 29
    5c54:	d1 40       	sbci	r29, 0x01	; 1
    5c56:	c1 5f       	subi	r28, 0xF1	; 241
    5c58:	de 4f       	sbci	r29, 0xFE	; 254
    5c5a:	e8 81       	ld	r30, Y
    5c5c:	f9 81       	ldd	r31, Y+1	; 0x01
    5c5e:	cf 50       	subi	r28, 0x0F	; 15
    5c60:	d1 40       	sbci	r29, 0x01	; 1
    5c62:	01 91       	ld	r16, Z+
    5c64:	11 91       	ld	r17, Z+
    5c66:	21 91       	ld	r18, Z+
    5c68:	31 91       	ld	r19, Z+
    5c6a:	c1 5f       	subi	r28, 0xF1	; 241
    5c6c:	de 4f       	sbci	r29, 0xFE	; 254
    5c6e:	f9 83       	std	Y+1, r31	; 0x01
    5c70:	e8 83       	st	Y, r30
    5c72:	cf 50       	subi	r28, 0x0F	; 15
    5c74:	d1 40       	sbci	r29, 0x01	; 1
    5c76:	73 01       	movw	r14, r6
    5c78:	62 01       	movw	r12, r4
    5c7a:	0b 2e       	mov	r0, r27
    5c7c:	b5 e1       	ldi	r27, 0x15	; 21
    5c7e:	cc 0c       	add	r12, r12
    5c80:	dd 1c       	adc	r13, r13
    5c82:	ee 1c       	adc	r14, r14
    5c84:	ff 1c       	adc	r15, r15
    5c86:	ba 95       	dec	r27
    5c88:	d1 f7       	brne	.-12     	; 0x5c7e <sha256Block+0x4ba>
    5c8a:	b0 2d       	mov	r27, r0
    5c8c:	b3 01       	movw	r22, r6
    5c8e:	a2 01       	movw	r20, r4
    5c90:	03 2e       	mov	r0, r19
    5c92:	3b e0       	ldi	r19, 0x0B	; 11
    5c94:	76 95       	lsr	r23
    5c96:	67 95       	ror	r22
    5c98:	57 95       	ror	r21
    5c9a:	47 95       	ror	r20
    5c9c:	3a 95       	dec	r19
    5c9e:	d1 f7       	brne	.-12     	; 0x5c94 <sha256Block+0x4d0>
    5ca0:	30 2d       	mov	r19, r0
    5ca2:	4c 29       	or	r20, r12
    5ca4:	5d 29       	or	r21, r13
    5ca6:	6e 29       	or	r22, r14
    5ca8:	7f 29       	or	r23, r15
    5caa:	73 01       	movw	r14, r6
    5cac:	62 01       	movw	r12, r4
    5cae:	0b 2e       	mov	r0, r27
    5cb0:	ba e1       	ldi	r27, 0x1A	; 26
    5cb2:	cc 0c       	add	r12, r12
    5cb4:	dd 1c       	adc	r13, r13
    5cb6:	ee 1c       	adc	r14, r14
    5cb8:	ff 1c       	adc	r15, r15
    5cba:	ba 95       	dec	r27
    5cbc:	d1 f7       	brne	.-12     	; 0x5cb2 <sha256Block+0x4ee>
    5cbe:	b0 2d       	mov	r27, r0
    5cc0:	53 01       	movw	r10, r6
    5cc2:	42 01       	movw	r8, r4
    5cc4:	68 94       	set
    5cc6:	15 f8       	bld	r1, 5
    5cc8:	b6 94       	lsr	r11
    5cca:	a7 94       	ror	r10
    5ccc:	97 94       	ror	r9
    5cce:	87 94       	ror	r8
    5cd0:	16 94       	lsr	r1
    5cd2:	d1 f7       	brne	.-12     	; 0x5cc8 <sha256Block+0x504>
    5cd4:	c8 28       	or	r12, r8
    5cd6:	d9 28       	or	r13, r9
    5cd8:	ea 28       	or	r14, r10
    5cda:	fb 28       	or	r15, r11
    5cdc:	c4 26       	eor	r12, r20
    5cde:	d5 26       	eor	r13, r21
    5ce0:	e6 26       	eor	r14, r22
    5ce2:	f7 26       	eor	r15, r23
    5ce4:	b3 01       	movw	r22, r6
    5ce6:	a2 01       	movw	r20, r4
    5ce8:	44 0f       	add	r20, r20
    5cea:	55 1f       	adc	r21, r21
    5cec:	66 1f       	adc	r22, r22
    5cee:	77 1f       	adc	r23, r23
    5cf0:	44 0f       	add	r20, r20
    5cf2:	55 1f       	adc	r21, r21
    5cf4:	66 1f       	adc	r22, r22
    5cf6:	77 1f       	adc	r23, r23
    5cf8:	44 0f       	add	r20, r20
    5cfa:	55 1f       	adc	r21, r21
    5cfc:	66 1f       	adc	r22, r22
    5cfe:	77 1f       	adc	r23, r23
    5d00:	44 0f       	add	r20, r20
    5d02:	55 1f       	adc	r21, r21
    5d04:	66 1f       	adc	r22, r22
    5d06:	77 1f       	adc	r23, r23
    5d08:	44 0f       	add	r20, r20
    5d0a:	55 1f       	adc	r21, r21
    5d0c:	66 1f       	adc	r22, r22
    5d0e:	77 1f       	adc	r23, r23
    5d10:	44 0f       	add	r20, r20
    5d12:	55 1f       	adc	r21, r21
    5d14:	66 1f       	adc	r22, r22
    5d16:	77 1f       	adc	r23, r23
    5d18:	44 0f       	add	r20, r20
    5d1a:	55 1f       	adc	r21, r21
    5d1c:	66 1f       	adc	r22, r22
    5d1e:	77 1f       	adc	r23, r23
    5d20:	53 01       	movw	r10, r6
    5d22:	42 01       	movw	r8, r4
    5d24:	07 2e       	mov	r0, r23
    5d26:	79 e1       	ldi	r23, 0x19	; 25
    5d28:	b6 94       	lsr	r11
    5d2a:	a7 94       	ror	r10
    5d2c:	97 94       	ror	r9
    5d2e:	87 94       	ror	r8
    5d30:	7a 95       	dec	r23
    5d32:	d1 f7       	brne	.-12     	; 0x5d28 <sha256Block+0x564>
    5d34:	70 2d       	mov	r23, r0
    5d36:	48 29       	or	r20, r8
    5d38:	59 29       	or	r21, r9
    5d3a:	6a 29       	or	r22, r10
    5d3c:	7b 29       	or	r23, r11
    5d3e:	4c 25       	eor	r20, r12
    5d40:	5d 25       	eor	r21, r13
    5d42:	6e 25       	eor	r22, r14
    5d44:	7f 25       	eor	r23, r15
    5d46:	c3 5e       	subi	r28, 0xE3	; 227
    5d48:	de 4f       	sbci	r29, 0xFE	; 254
    5d4a:	88 80       	ld	r8, Y
    5d4c:	99 80       	ldd	r9, Y+1	; 0x01
    5d4e:	aa 80       	ldd	r10, Y+2	; 0x02
    5d50:	bb 80       	ldd	r11, Y+3	; 0x03
    5d52:	cd 51       	subi	r28, 0x1D	; 29
    5d54:	d1 40       	sbci	r29, 0x01	; 1
    5d56:	08 0d       	add	r16, r8
    5d58:	19 1d       	adc	r17, r9
    5d5a:	2a 1d       	adc	r18, r10
    5d5c:	3b 1d       	adc	r19, r11
    5d5e:	6a 01       	movw	r12, r20
    5d60:	7b 01       	movw	r14, r22
    5d62:	c0 0e       	add	r12, r16
    5d64:	d1 1e       	adc	r13, r17
    5d66:	e2 1e       	adc	r14, r18
    5d68:	f3 1e       	adc	r15, r19
    5d6a:	53 01       	movw	r10, r6
    5d6c:	42 01       	movw	r8, r4
    5d6e:	80 94       	com	r8
    5d70:	90 94       	com	r9
    5d72:	a0 94       	com	r10
    5d74:	b0 94       	com	r11
    5d76:	cf 5e       	subi	r28, 0xEF	; 239
    5d78:	de 4f       	sbci	r29, 0xFE	; 254
    5d7a:	28 81       	ld	r18, Y
    5d7c:	39 81       	ldd	r19, Y+1	; 0x01
    5d7e:	4a 81       	ldd	r20, Y+2	; 0x02
    5d80:	5b 81       	ldd	r21, Y+3	; 0x03
    5d82:	c1 51       	subi	r28, 0x11	; 17
    5d84:	d1 40       	sbci	r29, 0x01	; 1
    5d86:	82 22       	and	r8, r18
    5d88:	93 22       	and	r9, r19
    5d8a:	a4 22       	and	r10, r20
    5d8c:	b5 22       	and	r11, r21
    5d8e:	cb 5e       	subi	r28, 0xEB	; 235
    5d90:	de 4f       	sbci	r29, 0xFE	; 254
    5d92:	48 81       	ld	r20, Y
    5d94:	59 81       	ldd	r21, Y+1	; 0x01
    5d96:	6a 81       	ldd	r22, Y+2	; 0x02
    5d98:	7b 81       	ldd	r23, Y+3	; 0x03
    5d9a:	c5 51       	subi	r28, 0x15	; 21
    5d9c:	d1 40       	sbci	r29, 0x01	; 1
    5d9e:	44 21       	and	r20, r4
    5da0:	55 21       	and	r21, r5
    5da2:	66 21       	and	r22, r6
    5da4:	77 21       	and	r23, r7
    5da6:	95 01       	movw	r18, r10
    5da8:	84 01       	movw	r16, r8
    5daa:	04 27       	eor	r16, r20
    5dac:	15 27       	eor	r17, r21
    5dae:	26 27       	eor	r18, r22
    5db0:	37 27       	eor	r19, r23
    5db2:	c0 0e       	add	r12, r16
    5db4:	d1 1e       	adc	r13, r17
    5db6:	e2 1e       	adc	r14, r18
    5db8:	f3 1e       	adc	r15, r19
    5dba:	cd 5f       	subi	r28, 0xFD	; 253
    5dbc:	de 4f       	sbci	r29, 0xFE	; 254
    5dbe:	08 81       	ld	r16, Y
    5dc0:	19 81       	ldd	r17, Y+1	; 0x01
    5dc2:	2a 81       	ldd	r18, Y+2	; 0x02
    5dc4:	3b 81       	ldd	r19, Y+3	; 0x03
    5dc6:	c3 50       	subi	r28, 0x03	; 3
    5dc8:	d1 40       	sbci	r29, 0x01	; 1
    5dca:	0c 0d       	add	r16, r12
    5dcc:	1d 1d       	adc	r17, r13
    5dce:	2e 1d       	adc	r18, r14
    5dd0:	3f 1d       	adc	r19, r15
		t2 = bigSigma0(a) + maj(a, b, c);
    5dd2:	4c 01       	movw	r8, r24
    5dd4:	5d 01       	movw	r10, r26
    5dd6:	07 2e       	mov	r0, r23
    5dd8:	73 e1       	ldi	r23, 0x13	; 19
    5dda:	88 0c       	add	r8, r8
    5ddc:	99 1c       	adc	r9, r9
    5dde:	aa 1c       	adc	r10, r10
    5de0:	bb 1c       	adc	r11, r11
    5de2:	7a 95       	dec	r23
    5de4:	d1 f7       	brne	.-12     	; 0x5dda <sha256Block+0x616>
    5de6:	70 2d       	mov	r23, r0
    5de8:	ac 01       	movw	r20, r24
    5dea:	bd 01       	movw	r22, r26
    5dec:	03 2e       	mov	r0, r19
    5dee:	3d e0       	ldi	r19, 0x0D	; 13
    5df0:	76 95       	lsr	r23
    5df2:	67 95       	ror	r22
    5df4:	57 95       	ror	r21
    5df6:	47 95       	ror	r20
    5df8:	3a 95       	dec	r19
    5dfa:	d1 f7       	brne	.-12     	; 0x5df0 <sha256Block+0x62c>
    5dfc:	30 2d       	mov	r19, r0
    5dfe:	84 2a       	or	r8, r20
    5e00:	95 2a       	or	r9, r21
    5e02:	a6 2a       	or	r10, r22
    5e04:	b7 2a       	or	r11, r23
    5e06:	6c 01       	movw	r12, r24
    5e08:	7d 01       	movw	r14, r26
    5e0a:	0b 2e       	mov	r0, r27
    5e0c:	be e1       	ldi	r27, 0x1E	; 30
    5e0e:	cc 0c       	add	r12, r12
    5e10:	dd 1c       	adc	r13, r13
    5e12:	ee 1c       	adc	r14, r14
    5e14:	ff 1c       	adc	r15, r15
    5e16:	ba 95       	dec	r27
    5e18:	d1 f7       	brne	.-12     	; 0x5e0e <sha256Block+0x64a>
    5e1a:	b0 2d       	mov	r27, r0
    5e1c:	ac 01       	movw	r20, r24
    5e1e:	bd 01       	movw	r22, r26
    5e20:	76 95       	lsr	r23
    5e22:	67 95       	ror	r22
    5e24:	57 95       	ror	r21
    5e26:	47 95       	ror	r20
    5e28:	76 95       	lsr	r23
    5e2a:	67 95       	ror	r22
    5e2c:	57 95       	ror	r21
    5e2e:	47 95       	ror	r20
    5e30:	4c 29       	or	r20, r12
    5e32:	5d 29       	or	r21, r13
    5e34:	6e 29       	or	r22, r14
    5e36:	7f 29       	or	r23, r15
    5e38:	48 25       	eor	r20, r8
    5e3a:	59 25       	eor	r21, r9
    5e3c:	6a 25       	eor	r22, r10
    5e3e:	7b 25       	eor	r23, r11
    5e40:	6c 01       	movw	r12, r24
    5e42:	7d 01       	movw	r14, r26
    5e44:	0b 2e       	mov	r0, r27
    5e46:	b6 e1       	ldi	r27, 0x16	; 22
    5e48:	f6 94       	lsr	r15
    5e4a:	e7 94       	ror	r14
    5e4c:	d7 94       	ror	r13
    5e4e:	c7 94       	ror	r12
    5e50:	ba 95       	dec	r27
    5e52:	d1 f7       	brne	.-12     	; 0x5e48 <sha256Block+0x684>
    5e54:	b0 2d       	mov	r27, r0
    5e56:	4c 01       	movw	r8, r24
    5e58:	5d 01       	movw	r10, r26
    5e5a:	07 2e       	mov	r0, r23
    5e5c:	7a e0       	ldi	r23, 0x0A	; 10
    5e5e:	88 0c       	add	r8, r8
    5e60:	99 1c       	adc	r9, r9
    5e62:	aa 1c       	adc	r10, r10
    5e64:	bb 1c       	adc	r11, r11
    5e66:	7a 95       	dec	r23
    5e68:	d1 f7       	brne	.-12     	; 0x5e5e <sha256Block+0x69a>
    5e6a:	70 2d       	mov	r23, r0
    5e6c:	8c 28       	or	r8, r12
    5e6e:	9d 28       	or	r9, r13
    5e70:	ae 28       	or	r10, r14
    5e72:	bf 28       	or	r11, r15
    5e74:	75 01       	movw	r14, r10
    5e76:	64 01       	movw	r12, r8
    5e78:	c4 26       	eor	r12, r20
    5e7a:	d5 26       	eor	r13, r21
    5e7c:	e6 26       	eor	r14, r22
    5e7e:	f7 26       	eor	r15, r23
    5e80:	cd 5f       	subi	r28, 0xFD	; 253
    5e82:	de 4f       	sbci	r29, 0xFE	; 254
    5e84:	c8 82       	st	Y, r12
    5e86:	d9 82       	std	Y+1, r13	; 0x01
    5e88:	ea 82       	std	Y+2, r14	; 0x02
    5e8a:	fb 82       	std	Y+3, r15	; 0x03
    5e8c:	c3 50       	subi	r28, 0x03	; 3
    5e8e:	d1 40       	sbci	r29, 0x01	; 1
    5e90:	c9 5f       	subi	r28, 0xF9	; 249
    5e92:	de 4f       	sbci	r29, 0xFE	; 254
    5e94:	c8 80       	ld	r12, Y
    5e96:	d9 80       	ldd	r13, Y+1	; 0x01
    5e98:	ea 80       	ldd	r14, Y+2	; 0x02
    5e9a:	fb 80       	ldd	r15, Y+3	; 0x03
    5e9c:	c7 50       	subi	r28, 0x07	; 7
    5e9e:	d1 40       	sbci	r29, 0x01	; 1
    5ea0:	c5 5f       	subi	r28, 0xF5	; 245
    5ea2:	de 4f       	sbci	r29, 0xFE	; 254
    5ea4:	48 81       	ld	r20, Y
    5ea6:	59 81       	ldd	r21, Y+1	; 0x01
    5ea8:	6a 81       	ldd	r22, Y+2	; 0x02
    5eaa:	7b 81       	ldd	r23, Y+3	; 0x03
    5eac:	cb 50       	subi	r28, 0x0B	; 11
    5eae:	d1 40       	sbci	r29, 0x01	; 1
    5eb0:	c4 26       	eor	r12, r20
    5eb2:	d5 26       	eor	r13, r21
    5eb4:	e6 26       	eor	r14, r22
    5eb6:	f7 26       	eor	r15, r23
    5eb8:	c8 22       	and	r12, r24
    5eba:	d9 22       	and	r13, r25
    5ebc:	ea 22       	and	r14, r26
    5ebe:	fb 22       	and	r15, r27
    5ec0:	c9 5f       	subi	r28, 0xF9	; 249
    5ec2:	de 4f       	sbci	r29, 0xFE	; 254
    5ec4:	48 81       	ld	r20, Y
    5ec6:	59 81       	ldd	r21, Y+1	; 0x01
    5ec8:	6a 81       	ldd	r22, Y+2	; 0x02
    5eca:	7b 81       	ldd	r23, Y+3	; 0x03
    5ecc:	c7 50       	subi	r28, 0x07	; 7
    5ece:	d1 40       	sbci	r29, 0x01	; 1
    5ed0:	c5 5f       	subi	r28, 0xF5	; 245
    5ed2:	de 4f       	sbci	r29, 0xFE	; 254
    5ed4:	88 80       	ld	r8, Y
    5ed6:	99 80       	ldd	r9, Y+1	; 0x01
    5ed8:	aa 80       	ldd	r10, Y+2	; 0x02
    5eda:	bb 80       	ldd	r11, Y+3	; 0x03
    5edc:	cb 50       	subi	r28, 0x0B	; 11
    5ede:	d1 40       	sbci	r29, 0x01	; 1
    5ee0:	48 21       	and	r20, r8
    5ee2:	59 21       	and	r21, r9
    5ee4:	6a 21       	and	r22, r10
    5ee6:	7b 21       	and	r23, r11
    5ee8:	c4 26       	eor	r12, r20
    5eea:	d5 26       	eor	r13, r21
    5eec:	e6 26       	eor	r14, r22
    5eee:	f7 26       	eor	r15, r23
    5ef0:	cd 5f       	subi	r28, 0xFD	; 253
    5ef2:	de 4f       	sbci	r29, 0xFE	; 254
    5ef4:	48 81       	ld	r20, Y
    5ef6:	59 81       	ldd	r21, Y+1	; 0x01
    5ef8:	6a 81       	ldd	r22, Y+2	; 0x02
    5efa:	7b 81       	ldd	r23, Y+3	; 0x03
    5efc:	c3 50       	subi	r28, 0x03	; 3
    5efe:	d1 40       	sbci	r29, 0x01	; 1
    5f00:	c4 0e       	add	r12, r20
    5f02:	d5 1e       	adc	r13, r21
    5f04:	e6 1e       	adc	r14, r22
    5f06:	f7 1e       	adc	r15, r23
		h = g;
		g = f;
		f = e;
		e = d + t1;
    5f08:	c7 5e       	subi	r28, 0xE7	; 231
    5f0a:	de 4f       	sbci	r29, 0xFE	; 254
    5f0c:	88 80       	ld	r8, Y
    5f0e:	99 80       	ldd	r9, Y+1	; 0x01
    5f10:	aa 80       	ldd	r10, Y+2	; 0x02
    5f12:	bb 80       	ldd	r11, Y+3	; 0x03
    5f14:	c9 51       	subi	r28, 0x19	; 25
    5f16:	d1 40       	sbci	r29, 0x01	; 1
    5f18:	80 0e       	add	r8, r16
    5f1a:	91 1e       	adc	r9, r17
    5f1c:	a2 1e       	adc	r10, r18
    5f1e:	b3 1e       	adc	r11, r19
		d = c;
		c = b;
		b = a;
		a = t1 + t2;
    5f20:	c0 0e       	add	r12, r16
    5f22:	d1 1e       	adc	r13, r17
    5f24:	e2 1e       	adc	r14, r18
    5f26:	f3 1e       	adc	r15, r19
    5f28:	54 e0       	ldi	r21, 0x04	; 4
    5f2a:	25 0e       	add	r2, r21
    5f2c:	31 1c       	adc	r3, r1
    5f2e:	c9 5f       	subi	r28, 0xF9	; 249
    5f30:	de 4f       	sbci	r29, 0xFE	; 254
    5f32:	28 81       	ld	r18, Y
    5f34:	39 81       	ldd	r19, Y+1	; 0x01
    5f36:	4a 81       	ldd	r20, Y+2	; 0x02
    5f38:	5b 81       	ldd	r21, Y+3	; 0x03
    5f3a:	c7 50       	subi	r28, 0x07	; 7
    5f3c:	d1 40       	sbci	r29, 0x01	; 1
    5f3e:	c7 5e       	subi	r28, 0xE7	; 231
    5f40:	de 4f       	sbci	r29, 0xFE	; 254
    5f42:	28 83       	st	Y, r18
    5f44:	39 83       	std	Y+1, r19	; 0x01
    5f46:	4a 83       	std	Y+2, r20	; 0x02
    5f48:	5b 83       	std	Y+3, r21	; 0x03
    5f4a:	c9 51       	subi	r28, 0x19	; 25
    5f4c:	d1 40       	sbci	r29, 0x01	; 1
    5f4e:	cf 5e       	subi	r28, 0xEF	; 239
    5f50:	de 4f       	sbci	r29, 0xFE	; 254
    5f52:	48 81       	ld	r20, Y
    5f54:	59 81       	ldd	r21, Y+1	; 0x01
    5f56:	6a 81       	ldd	r22, Y+2	; 0x02
    5f58:	7b 81       	ldd	r23, Y+3	; 0x03
    5f5a:	c1 51       	subi	r28, 0x11	; 17
    5f5c:	d1 40       	sbci	r29, 0x01	; 1
    5f5e:	cd 5f       	subi	r28, 0xFD	; 253
    5f60:	de 4f       	sbci	r29, 0xFE	; 254
    5f62:	48 83       	st	Y, r20
    5f64:	59 83       	std	Y+1, r21	; 0x01
    5f66:	6a 83       	std	Y+2, r22	; 0x02
    5f68:	7b 83       	std	Y+3, r23	; 0x03
    5f6a:	c3 50       	subi	r28, 0x03	; 3
    5f6c:	d1 40       	sbci	r29, 0x01	; 1
	d = hs->h[3];
	e = hs->h[4];
	f = hs->h[5];
	g = hs->h[6];
	h = hs->h[7];
	for (t = 0; t < 64; t++)
    5f6e:	cf 5f       	subi	r28, 0xFF	; 255
    5f70:	de 4f       	sbci	r29, 0xFE	; 254
    5f72:	68 81       	ld	r22, Y
    5f74:	79 81       	ldd	r23, Y+1	; 0x01
    5f76:	c1 50       	subi	r28, 0x01	; 1
    5f78:	d1 40       	sbci	r29, 0x01	; 1
    5f7a:	6e 17       	cp	r22, r30
    5f7c:	7f 07       	cpc	r23, r31
    5f7e:	09 f0       	breq	.+2      	; 0x5f82 <sha256Block+0x7be>
    5f80:	29 ce       	rjmp	.-942    	; 0x5bd4 <sha256Block+0x410>
		d = c;
		c = b;
		b = a;
		a = t1 + t2;
	}
	hs->h[0] += a;
    5f82:	cd 5d       	subi	r28, 0xDD	; 221
    5f84:	de 4f       	sbci	r29, 0xFE	; 254
    5f86:	28 81       	ld	r18, Y
    5f88:	39 81       	ldd	r19, Y+1	; 0x01
    5f8a:	4a 81       	ldd	r20, Y+2	; 0x02
    5f8c:	5b 81       	ldd	r21, Y+3	; 0x03
    5f8e:	c3 52       	subi	r28, 0x23	; 35
    5f90:	d1 40       	sbci	r29, 0x01	; 1
    5f92:	c2 0e       	add	r12, r18
    5f94:	d3 1e       	adc	r13, r19
    5f96:	e4 1e       	adc	r14, r20
    5f98:	f5 1e       	adc	r15, r21
    5f9a:	cf 5d       	subi	r28, 0xDF	; 223
    5f9c:	de 4f       	sbci	r29, 0xFE	; 254
    5f9e:	e8 81       	ld	r30, Y
    5fa0:	f9 81       	ldd	r31, Y+1	; 0x01
    5fa2:	c1 52       	subi	r28, 0x21	; 33
    5fa4:	d1 40       	sbci	r29, 0x01	; 1
    5fa6:	c0 82       	st	Z, r12
    5fa8:	d1 82       	std	Z+1, r13	; 0x01
    5faa:	e2 82       	std	Z+2, r14	; 0x02
    5fac:	f3 82       	std	Z+3, r15	; 0x03
	hs->h[1] += b;
    5fae:	c9 5d       	subi	r28, 0xD9	; 217
    5fb0:	de 4f       	sbci	r29, 0xFE	; 254
    5fb2:	c8 80       	ld	r12, Y
    5fb4:	d9 80       	ldd	r13, Y+1	; 0x01
    5fb6:	ea 80       	ldd	r14, Y+2	; 0x02
    5fb8:	fb 80       	ldd	r15, Y+3	; 0x03
    5fba:	c7 52       	subi	r28, 0x27	; 39
    5fbc:	d1 40       	sbci	r29, 0x01	; 1
    5fbe:	8c 0d       	add	r24, r12
    5fc0:	9d 1d       	adc	r25, r13
    5fc2:	ae 1d       	adc	r26, r14
    5fc4:	bf 1d       	adc	r27, r15
    5fc6:	84 83       	std	Z+4, r24	; 0x04
    5fc8:	95 83       	std	Z+5, r25	; 0x05
    5fca:	a6 83       	std	Z+6, r26	; 0x06
    5fcc:	b7 83       	std	Z+7, r27	; 0x07
	hs->h[2] += c;
    5fce:	c5 5d       	subi	r28, 0xD5	; 213
    5fd0:	de 4f       	sbci	r29, 0xFE	; 254
    5fd2:	88 81       	ld	r24, Y
    5fd4:	99 81       	ldd	r25, Y+1	; 0x01
    5fd6:	aa 81       	ldd	r26, Y+2	; 0x02
    5fd8:	bb 81       	ldd	r27, Y+3	; 0x03
    5fda:	cb 52       	subi	r28, 0x2B	; 43
    5fdc:	d1 40       	sbci	r29, 0x01	; 1
    5fde:	c5 5f       	subi	r28, 0xF5	; 245
    5fe0:	de 4f       	sbci	r29, 0xFE	; 254
    5fe2:	c8 80       	ld	r12, Y
    5fe4:	d9 80       	ldd	r13, Y+1	; 0x01
    5fe6:	ea 80       	ldd	r14, Y+2	; 0x02
    5fe8:	fb 80       	ldd	r15, Y+3	; 0x03
    5fea:	cb 50       	subi	r28, 0x0B	; 11
    5fec:	d1 40       	sbci	r29, 0x01	; 1
    5fee:	8c 0d       	add	r24, r12
    5ff0:	9d 1d       	adc	r25, r13
    5ff2:	ae 1d       	adc	r26, r14
    5ff4:	bf 1d       	adc	r27, r15
    5ff6:	80 87       	std	Z+8, r24	; 0x08
    5ff8:	91 87       	std	Z+9, r25	; 0x09
    5ffa:	a2 87       	std	Z+10, r26	; 0x0a
    5ffc:	b3 87       	std	Z+11, r27	; 0x0b
	hs->h[3] += d;
    5ffe:	c1 5d       	subi	r28, 0xD1	; 209
    6000:	de 4f       	sbci	r29, 0xFE	; 254
    6002:	88 81       	ld	r24, Y
    6004:	99 81       	ldd	r25, Y+1	; 0x01
    6006:	aa 81       	ldd	r26, Y+2	; 0x02
    6008:	bb 81       	ldd	r27, Y+3	; 0x03
    600a:	cf 52       	subi	r28, 0x2F	; 47
    600c:	d1 40       	sbci	r29, 0x01	; 1
    600e:	c9 5f       	subi	r28, 0xF9	; 249
    6010:	de 4f       	sbci	r29, 0xFE	; 254
    6012:	c8 80       	ld	r12, Y
    6014:	d9 80       	ldd	r13, Y+1	; 0x01
    6016:	ea 80       	ldd	r14, Y+2	; 0x02
    6018:	fb 80       	ldd	r15, Y+3	; 0x03
    601a:	c7 50       	subi	r28, 0x07	; 7
    601c:	d1 40       	sbci	r29, 0x01	; 1
    601e:	8c 0d       	add	r24, r12
    6020:	9d 1d       	adc	r25, r13
    6022:	ae 1d       	adc	r26, r14
    6024:	bf 1d       	adc	r27, r15
    6026:	84 87       	std	Z+12, r24	; 0x0c
    6028:	95 87       	std	Z+13, r25	; 0x0d
    602a:	a6 87       	std	Z+14, r26	; 0x0e
    602c:	b7 87       	std	Z+15, r27	; 0x0f
	hs->h[4] += e;
    602e:	cd 5c       	subi	r28, 0xCD	; 205
    6030:	de 4f       	sbci	r29, 0xFE	; 254
    6032:	c8 80       	ld	r12, Y
    6034:	d9 80       	ldd	r13, Y+1	; 0x01
    6036:	ea 80       	ldd	r14, Y+2	; 0x02
    6038:	fb 80       	ldd	r15, Y+3	; 0x03
    603a:	c3 53       	subi	r28, 0x33	; 51
    603c:	d1 40       	sbci	r29, 0x01	; 1
    603e:	8c 0c       	add	r8, r12
    6040:	9d 1c       	adc	r9, r13
    6042:	ae 1c       	adc	r10, r14
    6044:	bf 1c       	adc	r11, r15
    6046:	80 8a       	std	Z+16, r8	; 0x10
    6048:	91 8a       	std	Z+17, r9	; 0x11
    604a:	a2 8a       	std	Z+18, r10	; 0x12
    604c:	b3 8a       	std	Z+19, r11	; 0x13
	hs->h[5] += f;
    604e:	c9 5c       	subi	r28, 0xC9	; 201
    6050:	de 4f       	sbci	r29, 0xFE	; 254
    6052:	88 81       	ld	r24, Y
    6054:	99 81       	ldd	r25, Y+1	; 0x01
    6056:	aa 81       	ldd	r26, Y+2	; 0x02
    6058:	bb 81       	ldd	r27, Y+3	; 0x03
    605a:	c7 53       	subi	r28, 0x37	; 55
    605c:	d1 40       	sbci	r29, 0x01	; 1
    605e:	84 0d       	add	r24, r4
    6060:	95 1d       	adc	r25, r5
    6062:	a6 1d       	adc	r26, r6
    6064:	b7 1d       	adc	r27, r7
    6066:	84 8b       	std	Z+20, r24	; 0x14
    6068:	95 8b       	std	Z+21, r25	; 0x15
    606a:	a6 8b       	std	Z+22, r26	; 0x16
    606c:	b7 8b       	std	Z+23, r27	; 0x17
	hs->h[6] += g;
    606e:	c5 5c       	subi	r28, 0xC5	; 197
    6070:	de 4f       	sbci	r29, 0xFE	; 254
    6072:	88 81       	ld	r24, Y
    6074:	99 81       	ldd	r25, Y+1	; 0x01
    6076:	aa 81       	ldd	r26, Y+2	; 0x02
    6078:	bb 81       	ldd	r27, Y+3	; 0x03
    607a:	cb 53       	subi	r28, 0x3B	; 59
    607c:	d1 40       	sbci	r29, 0x01	; 1
    607e:	cb 5e       	subi	r28, 0xEB	; 235
    6080:	de 4f       	sbci	r29, 0xFE	; 254
    6082:	88 80       	ld	r8, Y
    6084:	99 80       	ldd	r9, Y+1	; 0x01
    6086:	aa 80       	ldd	r10, Y+2	; 0x02
    6088:	bb 80       	ldd	r11, Y+3	; 0x03
    608a:	c5 51       	subi	r28, 0x15	; 21
    608c:	d1 40       	sbci	r29, 0x01	; 1
    608e:	88 0d       	add	r24, r8
    6090:	99 1d       	adc	r25, r9
    6092:	aa 1d       	adc	r26, r10
    6094:	bb 1d       	adc	r27, r11
    6096:	80 8f       	std	Z+24, r24	; 0x18
    6098:	91 8f       	std	Z+25, r25	; 0x19
    609a:	a2 8f       	std	Z+26, r26	; 0x1a
    609c:	b3 8f       	std	Z+27, r27	; 0x1b
	hs->h[7] += h;
    609e:	c1 5c       	subi	r28, 0xC1	; 193
    60a0:	de 4f       	sbci	r29, 0xFE	; 254
    60a2:	88 81       	ld	r24, Y
    60a4:	99 81       	ldd	r25, Y+1	; 0x01
    60a6:	aa 81       	ldd	r26, Y+2	; 0x02
    60a8:	bb 81       	ldd	r27, Y+3	; 0x03
    60aa:	cf 53       	subi	r28, 0x3F	; 63
    60ac:	d1 40       	sbci	r29, 0x01	; 1
    60ae:	cf 5e       	subi	r28, 0xEF	; 239
    60b0:	de 4f       	sbci	r29, 0xFE	; 254
    60b2:	88 80       	ld	r8, Y
    60b4:	99 80       	ldd	r9, Y+1	; 0x01
    60b6:	aa 80       	ldd	r10, Y+2	; 0x02
    60b8:	bb 80       	ldd	r11, Y+3	; 0x03
    60ba:	c1 51       	subi	r28, 0x11	; 17
    60bc:	d1 40       	sbci	r29, 0x01	; 1
    60be:	88 0d       	add	r24, r8
    60c0:	99 1d       	adc	r25, r9
    60c2:	aa 1d       	adc	r26, r10
    60c4:	bb 1d       	adc	r27, r11
    60c6:	84 8f       	std	Z+28, r24	; 0x1c
    60c8:	95 8f       	std	Z+29, r25	; 0x1d
    60ca:	a6 8f       	std	Z+30, r26	; 0x1e
    60cc:	b7 8f       	std	Z+31, r27	; 0x1f
}
    60ce:	ce 5b       	subi	r28, 0xBE	; 190
    60d0:	de 4f       	sbci	r29, 0xFE	; 254
    60d2:	0f b6       	in	r0, 0x3f	; 63
    60d4:	f8 94       	cli
    60d6:	de bf       	out	0x3e, r29	; 62
    60d8:	0f be       	out	0x3f, r0	; 63
    60da:	cd bf       	out	0x3d, r28	; 61
    60dc:	df 91       	pop	r29
    60de:	cf 91       	pop	r28
    60e0:	1f 91       	pop	r17
    60e2:	0f 91       	pop	r16
    60e4:	ff 90       	pop	r15
    60e6:	ef 90       	pop	r14
    60e8:	df 90       	pop	r13
    60ea:	cf 90       	pop	r12
    60ec:	bf 90       	pop	r11
    60ee:	af 90       	pop	r10
    60f0:	9f 90       	pop	r9
    60f2:	8f 90       	pop	r8
    60f4:	7f 90       	pop	r7
    60f6:	6f 90       	pop	r6
    60f8:	5f 90       	pop	r5
    60fa:	4f 90       	pop	r4
    60fc:	3f 90       	pop	r3
    60fe:	2f 90       	pop	r2
    6100:	08 95       	ret

00006102 <sha256Begin>:
/** Begin calculating hash for new message.
  * See section 5.3.3 of FIPS PUB 180-3.
  * \param hs The hash state to initialise.
  */
void sha256Begin(HashState *hs)
{
    6102:	fc 01       	movw	r30, r24
	hs->message_length = 0;
    6104:	dc 01       	movw	r26, r24
    6106:	ad 59       	subi	r26, 0x9D	; 157
    6108:	bf 4f       	sbci	r27, 0xFF	; 255
    610a:	1d 92       	st	X+, r1
    610c:	1d 92       	st	X+, r1
    610e:	1d 92       	st	X+, r1
    6110:	1c 92       	st	X, r1
    6112:	13 97       	sbiw	r26, 0x03	; 3
	hs->hashBlock = sha256Block;
    6114:	14 96       	adiw	r26, 0x04	; 4
    6116:	82 ee       	ldi	r24, 0xE2	; 226
    6118:	9b e2       	ldi	r25, 0x2B	; 43
    611a:	8d 93       	st	X+, r24
    611c:	9c 93       	st	X, r25
	hs->is_big_endian = true;
    611e:	81 e0       	ldi	r24, 0x01	; 1
    6120:	82 a3       	std	Z+34, r24	; 0x22
	hs->h[0] = 0x6a09e667;
    6122:	87 e6       	ldi	r24, 0x67	; 103
    6124:	96 ee       	ldi	r25, 0xE6	; 230
    6126:	a9 e0       	ldi	r26, 0x09	; 9
    6128:	ba e6       	ldi	r27, 0x6A	; 106
    612a:	80 83       	st	Z, r24
    612c:	91 83       	std	Z+1, r25	; 0x01
    612e:	a2 83       	std	Z+2, r26	; 0x02
    6130:	b3 83       	std	Z+3, r27	; 0x03
	hs->h[1] = 0xbb67ae85;
    6132:	85 e8       	ldi	r24, 0x85	; 133
    6134:	9e ea       	ldi	r25, 0xAE	; 174
    6136:	a7 e6       	ldi	r26, 0x67	; 103
    6138:	bb eb       	ldi	r27, 0xBB	; 187
    613a:	84 83       	std	Z+4, r24	; 0x04
    613c:	95 83       	std	Z+5, r25	; 0x05
    613e:	a6 83       	std	Z+6, r26	; 0x06
    6140:	b7 83       	std	Z+7, r27	; 0x07
	hs->h[2] = 0x3c6ef372;
    6142:	82 e7       	ldi	r24, 0x72	; 114
    6144:	93 ef       	ldi	r25, 0xF3	; 243
    6146:	ae e6       	ldi	r26, 0x6E	; 110
    6148:	bc e3       	ldi	r27, 0x3C	; 60
    614a:	80 87       	std	Z+8, r24	; 0x08
    614c:	91 87       	std	Z+9, r25	; 0x09
    614e:	a2 87       	std	Z+10, r26	; 0x0a
    6150:	b3 87       	std	Z+11, r27	; 0x0b
	hs->h[3] = 0xa54ff53a;
    6152:	8a e3       	ldi	r24, 0x3A	; 58
    6154:	95 ef       	ldi	r25, 0xF5	; 245
    6156:	af e4       	ldi	r26, 0x4F	; 79
    6158:	b5 ea       	ldi	r27, 0xA5	; 165
    615a:	84 87       	std	Z+12, r24	; 0x0c
    615c:	95 87       	std	Z+13, r25	; 0x0d
    615e:	a6 87       	std	Z+14, r26	; 0x0e
    6160:	b7 87       	std	Z+15, r27	; 0x0f
	hs->h[4] = 0x510e527f;
    6162:	8f e7       	ldi	r24, 0x7F	; 127
    6164:	92 e5       	ldi	r25, 0x52	; 82
    6166:	ae e0       	ldi	r26, 0x0E	; 14
    6168:	b1 e5       	ldi	r27, 0x51	; 81
    616a:	80 8b       	std	Z+16, r24	; 0x10
    616c:	91 8b       	std	Z+17, r25	; 0x11
    616e:	a2 8b       	std	Z+18, r26	; 0x12
    6170:	b3 8b       	std	Z+19, r27	; 0x13
	hs->h[5] = 0x9b05688c;
    6172:	8c e8       	ldi	r24, 0x8C	; 140
    6174:	98 e6       	ldi	r25, 0x68	; 104
    6176:	a5 e0       	ldi	r26, 0x05	; 5
    6178:	bb e9       	ldi	r27, 0x9B	; 155
    617a:	84 8b       	std	Z+20, r24	; 0x14
    617c:	95 8b       	std	Z+21, r25	; 0x15
    617e:	a6 8b       	std	Z+22, r26	; 0x16
    6180:	b7 8b       	std	Z+23, r27	; 0x17
	hs->h[6] = 0x1f83d9ab;
    6182:	8b ea       	ldi	r24, 0xAB	; 171
    6184:	99 ed       	ldi	r25, 0xD9	; 217
    6186:	a3 e8       	ldi	r26, 0x83	; 131
    6188:	bf e1       	ldi	r27, 0x1F	; 31
    618a:	80 8f       	std	Z+24, r24	; 0x18
    618c:	91 8f       	std	Z+25, r25	; 0x19
    618e:	a2 8f       	std	Z+26, r26	; 0x1a
    6190:	b3 8f       	std	Z+27, r27	; 0x1b
	hs->h[7] = 0x5be0cd19;
    6192:	89 e1       	ldi	r24, 0x19	; 25
    6194:	9d ec       	ldi	r25, 0xCD	; 205
    6196:	a0 ee       	ldi	r26, 0xE0	; 224
    6198:	bb e5       	ldi	r27, 0x5B	; 91
    619a:	84 8f       	std	Z+28, r24	; 0x1c
    619c:	95 8f       	std	Z+29, r25	; 0x1d
    619e:	a6 8f       	std	Z+30, r26	; 0x1e
    61a0:	b7 8f       	std	Z+31, r27	; 0x1f
	clearM(hs);
    61a2:	cf 01       	movw	r24, r30
    61a4:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <clearM>
    61a8:	08 95       	ret

000061aa <sha256WriteByte>:
  *           been initialised using sha256Begin() at some time in the past.
  * \param byte The byte to add.
  */
void sha256WriteByte(HashState *hs, uint8_t byte)
{
	hashWriteByte(hs, byte);
    61aa:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <hashWriteByte>
    61ae:	08 95       	ret

000061b0 <sha256Finish>:
  * \param hs The hash state to act on. The hash state must be one that has
  *           been initialised using sha256Begin() at some time in the past.
  */
void sha256Finish(HashState *hs)
{
	hashFinish(hs);
    61b0:	0c 94 88 0c 	jmp	0x1910	; 0x1910 <hashFinish>
    61b4:	08 95       	ret

000061b6 <sha256FinishDouble>:
  * double SHA-256 hash is sometimes used in the Bitcoin protocol.
  * \param hs The hash state to act on. The hash state must be one that has
  *           been initialised using sha256Begin() at some time in the past.
  */
void sha256FinishDouble(HashState *hs)
{
    61b6:	cf 92       	push	r12
    61b8:	df 92       	push	r13
    61ba:	ef 92       	push	r14
    61bc:	ff 92       	push	r15
    61be:	0f 93       	push	r16
    61c0:	1f 93       	push	r17
    61c2:	cf 93       	push	r28
    61c4:	df 93       	push	r29
    61c6:	cd b7       	in	r28, 0x3d	; 61
    61c8:	de b7       	in	r29, 0x3e	; 62
    61ca:	a0 97       	sbiw	r28, 0x20	; 32
    61cc:	0f b6       	in	r0, 0x3f	; 63
    61ce:	f8 94       	cli
    61d0:	de bf       	out	0x3e, r29	; 62
    61d2:	0f be       	out	0x3f, r0	; 63
    61d4:	cd bf       	out	0x3d, r28	; 61
    61d6:	7c 01       	movw	r14, r24
  * \param hs The hash state to act on. The hash state must be one that has
  *           been initialised using sha256Begin() at some time in the past.
  */
void sha256Finish(HashState *hs)
{
	hashFinish(hs);
    61d8:	0e 94 88 0c 	call	0x1910	; 0x1910 <hashFinish>
{
	uint8_t temp[32];
	uint8_t i;

	sha256Finish(hs);
	writeHashToByteArray(temp, hs, true);
    61dc:	41 e0       	ldi	r20, 0x01	; 1
    61de:	b7 01       	movw	r22, r14
    61e0:	ce 01       	movw	r24, r28
    61e2:	01 96       	adiw	r24, 0x01	; 1
    61e4:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <writeHashToByteArray>
	sha256Begin(hs);
    61e8:	c7 01       	movw	r24, r14
    61ea:	8b df       	rcall	.-234    	; 0x6102 <sha256Begin>
    61ec:	8e 01       	movw	r16, r28
    61ee:	0f 5f       	subi	r16, 0xFF	; 255
    61f0:	1f 4f       	sbci	r17, 0xFF	; 255
    61f2:	6e 01       	movw	r12, r28
    61f4:	81 e2       	ldi	r24, 0x21	; 33
    61f6:	c8 0e       	add	r12, r24
    61f8:	d1 1c       	adc	r13, r1
	for (i = 0; i < 32; i++)
	{
		sha256WriteByte(hs, temp[i]);
    61fa:	f8 01       	movw	r30, r16
    61fc:	61 91       	ld	r22, Z+
    61fe:	8f 01       	movw	r16, r30
  *           been initialised using sha256Begin() at some time in the past.
  * \param byte The byte to add.
  */
void sha256WriteByte(HashState *hs, uint8_t byte)
{
	hashWriteByte(hs, byte);
    6200:	c7 01       	movw	r24, r14
    6202:	0e 94 0d 0c 	call	0x181a	; 0x181a <hashWriteByte>
	uint8_t i;

	sha256Finish(hs);
	writeHashToByteArray(temp, hs, true);
	sha256Begin(hs);
	for (i = 0; i < 32; i++)
    6206:	0c 15       	cp	r16, r12
    6208:	1d 05       	cpc	r17, r13
    620a:	b9 f7       	brne	.-18     	; 0x61fa <sha256FinishDouble+0x44>
  * \param hs The hash state to act on. The hash state must be one that has
  *           been initialised using sha256Begin() at some time in the past.
  */
void sha256Finish(HashState *hs)
{
	hashFinish(hs);
    620c:	c7 01       	movw	r24, r14
    620e:	0e 94 88 0c 	call	0x1910	; 0x1910 <hashFinish>
	for (i = 0; i < 32; i++)
	{
		sha256WriteByte(hs, temp[i]);
	}
	sha256Finish(hs);
}
    6212:	a0 96       	adiw	r28, 0x20	; 32
    6214:	0f b6       	in	r0, 0x3f	; 63
    6216:	f8 94       	cli
    6218:	de bf       	out	0x3e, r29	; 62
    621a:	0f be       	out	0x3f, r0	; 63
    621c:	cd bf       	out	0x3d, r28	; 61
    621e:	df 91       	pop	r29
    6220:	cf 91       	pop	r28
    6222:	1f 91       	pop	r17
    6224:	0f 91       	pop	r16
    6226:	ff 90       	pop	r15
    6228:	ef 90       	pop	r14
    622a:	df 90       	pop	r13
    622c:	cf 90       	pop	r12
    622e:	08 95       	ret

00006230 <reportSuccess>:
}

/** Call this whenever a test case succeeds. */
void reportSuccess(void)
{
	succeeded++;
    6230:	80 91 1d 08 	lds	r24, 0x081D	; 0x80081d <succeeded>
    6234:	90 91 1e 08 	lds	r25, 0x081E	; 0x80081e <succeeded+0x1>
    6238:	01 96       	adiw	r24, 0x01	; 1
    623a:	90 93 1e 08 	sts	0x081E, r25	; 0x80081e <succeeded+0x1>
    623e:	80 93 1d 08 	sts	0x081D, r24	; 0x80081d <succeeded>
    6242:	08 95       	ret

00006244 <reportFailure>:
}

/** Call this whenever a test case fails. */
void reportFailure(void)
{
	failed++;
    6244:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <failed>
    6248:	90 91 1c 08 	lds	r25, 0x081C	; 0x80081c <failed+0x1>
    624c:	01 96       	adiw	r24, 0x01	; 1
    624e:	90 93 1c 08 	sts	0x081C, r25	; 0x80081c <failed+0x1>
    6252:	80 93 1b 08 	sts	0x081B, r24	; 0x80081b <failed>
    6256:	08 95       	ret

00006258 <initTests>:
/** This must be called before running any unit tests.
  * \param source_file_name The name of the file being unit tested. The use
  *                         of the __FILE__ macro is probably a good idea.
  */
extern void initTests(const char *source_file_name)
{
    6258:	cf 93       	push	r28
    625a:	df 93       	push	r29
    625c:	c8 2f       	mov	r28, r24
    625e:	d9 2f       	mov	r29, r25
	succeeded = 0;
    6260:	10 92 1e 08 	sts	0x081E, r1	; 0x80081e <succeeded+0x1>
    6264:	10 92 1d 08 	sts	0x081D, r1	; 0x80081d <succeeded>
	failed = 0;
    6268:	10 92 1c 08 	sts	0x081C, r1	; 0x80081c <failed+0x1>
    626c:	10 92 1b 08 	sts	0x081B, r1	; 0x80081b <failed>
	srand(42); // make sure tests which rely on rand() are deterministic
    6270:	8a e2       	ldi	r24, 0x2A	; 42
    6272:	90 e0       	ldi	r25, 0x00	; 0
    6274:	0e 94 67 3e 	call	0x7cce	; 0x7cce <srand>
	printf("Running unit tests for file: %s\n", source_file_name);
    6278:	df 93       	push	r29
    627a:	cf 93       	push	r28
    627c:	89 ec       	ldi	r24, 0xC9	; 201
    627e:	96 e0       	ldi	r25, 0x06	; 6
    6280:	9f 93       	push	r25
    6282:	8f 93       	push	r24
    6284:	0e 94 dd 3e 	call	0x7dba	; 0x7dba <printf>
	time(&start_time);
    6288:	87 e1       	ldi	r24, 0x17	; 23
    628a:	98 e0       	ldi	r25, 0x08	; 8
    628c:	0e 94 26 03 	call	0x64c	; 0x64c <time>
}
    6290:	0f 90       	pop	r0
    6292:	0f 90       	pop	r0
    6294:	0f 90       	pop	r0
    6296:	0f 90       	pop	r0
    6298:	df 91       	pop	r29
    629a:	cf 91       	pop	r28
    629c:	08 95       	ret

0000629e <deriveAndSetEncryptionKey>:
}

/** Pretend to overwrite anything in RAM which could contain sensitive
  * data. */
void sanitiseRam(void)
{
    629e:	0f 93       	push	r16
    62a0:	1f 93       	push	r17
    62a2:	cf 93       	push	r28
    62a4:	df 93       	push	r29
    62a6:	cd b7       	in	r28, 0x3d	; 61
    62a8:	de b7       	in	r29, 0x3e	; 62
    62aa:	c0 54       	subi	r28, 0x40	; 64
    62ac:	d1 09       	sbc	r29, r1
    62ae:	0f b6       	in	r0, 0x3f	; 63
    62b0:	f8 94       	cli
    62b2:	de bf       	out	0x3e, r29	; 62
    62b4:	0f be       	out	0x3f, r0	; 63
    62b6:	cd bf       	out	0x3d, r28	; 61
    62b8:	41 15       	cp	r20, r1
    62ba:	51 05       	cpc	r21, r1
    62bc:	61 f0       	breq	.+24     	; 0x62d6 <deriveAndSetEncryptionKey+0x38>
    62be:	00 e1       	ldi	r16, 0x10	; 16
    62c0:	10 e0       	ldi	r17, 0x00	; 0
    62c2:	9c 01       	movw	r18, r24
    62c4:	ce 01       	movw	r24, r28
    62c6:	01 96       	adiw	r24, 0x01	; 1
    62c8:	0e 94 89 24 	call	0x4912	; 0x4912 <pbkdf2>
    62cc:	ce 01       	movw	r24, r28
    62ce:	01 96       	adiw	r24, 0x01	; 1
    62d0:	0e 94 d1 3b 	call	0x77a2	; 0x77a2 <setEncryptionKey>
    62d4:	09 c0       	rjmp	.+18     	; 0x62e8 <deriveAndSetEncryptionKey+0x4a>
    62d6:	ce 01       	movw	r24, r28
    62d8:	01 96       	adiw	r24, 0x01	; 1
    62da:	20 e4       	ldi	r18, 0x40	; 64
    62dc:	fc 01       	movw	r30, r24
    62de:	11 92       	st	Z+, r1
    62e0:	2a 95       	dec	r18
    62e2:	e9 f7       	brne	.-6      	; 0x62de <deriveAndSetEncryptionKey+0x40>
    62e4:	0e 94 d1 3b 	call	0x77a2	; 0x77a2 <setEncryptionKey>
    62e8:	c0 5c       	subi	r28, 0xC0	; 192
    62ea:	df 4f       	sbci	r29, 0xFF	; 255
    62ec:	0f b6       	in	r0, 0x3f	; 63
    62ee:	f8 94       	cli
    62f0:	de bf       	out	0x3e, r29	; 62
    62f2:	0f be       	out	0x3f, r0	; 63
    62f4:	cd bf       	out	0x3d, r28	; 61
    62f6:	df 91       	pop	r29
    62f8:	cf 91       	pop	r28
    62fa:	1f 91       	pop	r17
    62fc:	0f 91       	pop	r16
    62fe:	08 95       	ret

00006300 <calculateWalletChecksum>:
    6300:	ef 92       	push	r14
    6302:	ff 92       	push	r15
    6304:	0f 93       	push	r16
    6306:	1f 93       	push	r17
    6308:	cf 93       	push	r28
    630a:	df 93       	push	r29
    630c:	cd b7       	in	r28, 0x3d	; 61
    630e:	de b7       	in	r29, 0x3e	; 62
    6310:	c9 56       	subi	r28, 0x69	; 105
    6312:	d1 09       	sbc	r29, r1
    6314:	0f b6       	in	r0, 0x3f	; 63
    6316:	f8 94       	cli
    6318:	de bf       	out	0x3e, r29	; 62
    631a:	0f be       	out	0x3f, r0	; 63
    631c:	cd bf       	out	0x3d, r28	; 61
    631e:	7c 01       	movw	r14, r24
    6320:	ce 01       	movw	r24, r28
    6322:	01 96       	adiw	r24, 0x01	; 1
    6324:	ee de       	rcall	.-548    	; 0x6102 <sha256Begin>
    6326:	00 e0       	ldi	r16, 0x00	; 0
    6328:	10 e0       	ldi	r17, 0x00	; 0
    632a:	06 c0       	rjmp	.+12     	; 0x6338 <calculateWalletChecksum+0x38>
    632c:	00 39       	cpi	r16, 0x90	; 144
    632e:	11 05       	cpc	r17, r1
    6330:	79 f0       	breq	.+30     	; 0x6350 <calculateWalletChecksum+0x50>
    6332:	00 3b       	cpi	r16, 0xB0	; 176
    6334:	11 05       	cpc	r17, r1
    6336:	38 f4       	brcc	.+14     	; 0x6346 <calculateWalletChecksum+0x46>
    6338:	f8 01       	movw	r30, r16
    633a:	e9 5d       	subi	r30, 0xD9	; 217
    633c:	f7 4f       	sbci	r31, 0xF7	; 247
    633e:	60 81       	ld	r22, Z
    6340:	ce 01       	movw	r24, r28
    6342:	01 96       	adiw	r24, 0x01	; 1
    6344:	32 df       	rcall	.-412    	; 0x61aa <sha256WriteByte>
    6346:	0f 5f       	subi	r16, 0xFF	; 255
    6348:	1f 4f       	sbci	r17, 0xFF	; 255
    634a:	00 3b       	cpi	r16, 0xB0	; 176
    634c:	11 05       	cpc	r17, r1
    634e:	70 f3       	brcs	.-36     	; 0x632c <calculateWalletChecksum+0x2c>
    6350:	ce 01       	movw	r24, r28
    6352:	01 96       	adiw	r24, 0x01	; 1
    6354:	2d df       	rcall	.-422    	; 0x61b0 <sha256Finish>
    6356:	41 e0       	ldi	r20, 0x01	; 1
    6358:	be 01       	movw	r22, r28
    635a:	6f 5f       	subi	r22, 0xFF	; 255
    635c:	7f 4f       	sbci	r23, 0xFF	; 255
    635e:	c7 01       	movw	r24, r14
    6360:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <writeHashToByteArray>
    6364:	c7 59       	subi	r28, 0x97	; 151
    6366:	df 4f       	sbci	r29, 0xFF	; 255
    6368:	0f b6       	in	r0, 0x3f	; 63
    636a:	f8 94       	cli
    636c:	de bf       	out	0x3e, r29	; 62
    636e:	0f be       	out	0x3f, r0	; 63
    6370:	cd bf       	out	0x3d, r28	; 61
    6372:	df 91       	pop	r29
    6374:	cf 91       	pop	r28
    6376:	1f 91       	pop	r17
    6378:	0f 91       	pop	r16
    637a:	ff 90       	pop	r15
    637c:	ef 90       	pop	r14
    637e:	08 95       	ret

00006380 <updateWalletVersion>:
    6380:	80 91 d7 08 	lds	r24, 0x08D7	; 0x8008d7 <is_hidden_wallet>
    6384:	81 11       	cpse	r24, r1
    6386:	20 c0       	rjmp	.+64     	; 0x63c8 <updateWalletVersion+0x48>
    6388:	0e 94 e4 3b 	call	0x77c8	; 0x77c8 <isEncryptionKeyNonZero>
    638c:	88 23       	and	r24, r24
    638e:	71 f0       	breq	.+28     	; 0x63ac <updateWalletVersion+0x2c>
    6390:	83 e0       	ldi	r24, 0x03	; 3
    6392:	90 e0       	ldi	r25, 0x00	; 0
    6394:	a0 e0       	ldi	r26, 0x00	; 0
    6396:	b0 e0       	ldi	r27, 0x00	; 0
    6398:	80 93 27 08 	sts	0x0827, r24	; 0x800827 <current_wallet>
    639c:	90 93 28 08 	sts	0x0828, r25	; 0x800828 <current_wallet+0x1>
    63a0:	a0 93 29 08 	sts	0x0829, r26	; 0x800829 <current_wallet+0x2>
    63a4:	b0 93 2a 08 	sts	0x082A, r27	; 0x80082a <current_wallet+0x3>
    63a8:	80 e0       	ldi	r24, 0x00	; 0
    63aa:	08 95       	ret
    63ac:	82 e0       	ldi	r24, 0x02	; 2
    63ae:	90 e0       	ldi	r25, 0x00	; 0
    63b0:	a0 e0       	ldi	r26, 0x00	; 0
    63b2:	b0 e0       	ldi	r27, 0x00	; 0
    63b4:	80 93 27 08 	sts	0x0827, r24	; 0x800827 <current_wallet>
    63b8:	90 93 28 08 	sts	0x0828, r25	; 0x800828 <current_wallet+0x1>
    63bc:	a0 93 29 08 	sts	0x0829, r26	; 0x800829 <current_wallet+0x2>
    63c0:	b0 93 2a 08 	sts	0x082A, r27	; 0x80082a <current_wallet+0x3>
    63c4:	80 e0       	ldi	r24, 0x00	; 0
    63c6:	08 95       	ret
    63c8:	8c e0       	ldi	r24, 0x0C	; 12
    63ca:	08 95       	ret

000063cc <walletGetLastError>:
    63cc:	80 91 d9 08 	lds	r24, 0x08D9	; 0x8008d9 <last_error>
    63d0:	08 95       	ret

000063d2 <uninitWallet>:
    63d2:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <clearParentPublicKeyCache>
    63d6:	10 92 d8 08 	sts	0x08D8, r1	; 0x8008d8 <wallet_loaded>
    63da:	10 92 d7 08 	sts	0x08D7, r1	; 0x8008d7 <is_hidden_wallet>
    63de:	10 92 23 08 	sts	0x0823, r1	; 0x800823 <wallet_nv_address>
    63e2:	10 92 24 08 	sts	0x0824, r1	; 0x800824 <wallet_nv_address+0x1>
    63e6:	10 92 25 08 	sts	0x0825, r1	; 0x800825 <wallet_nv_address+0x2>
    63ea:	10 92 26 08 	sts	0x0826, r1	; 0x800826 <wallet_nv_address+0x3>
    63ee:	80 eb       	ldi	r24, 0xB0	; 176
    63f0:	e7 e2       	ldi	r30, 0x27	; 39
    63f2:	f8 e0       	ldi	r31, 0x08	; 8
    63f4:	df 01       	movw	r26, r30
    63f6:	1d 92       	st	X+, r1
    63f8:	8a 95       	dec	r24
    63fa:	e9 f7       	brne	.-6      	; 0x63f6 <uninitWallet+0x24>
    63fc:	10 92 d9 08 	sts	0x08D9, r1	; 0x8008d9 <last_error>
    6400:	80 e0       	ldi	r24, 0x00	; 0
    6402:	08 95       	ret

00006404 <getMasterPublicKey>:
    6404:	0f 93       	push	r16
    6406:	1f 93       	push	r17
    6408:	cf 93       	push	r28
    640a:	df 93       	push	r29
    640c:	cd b7       	in	r28, 0x3d	; 61
    640e:	de b7       	in	r29, 0x3e	; 62
    6410:	c0 54       	subi	r28, 0x40	; 64
    6412:	d1 09       	sbc	r29, r1
    6414:	0f b6       	in	r0, 0x3f	; 63
    6416:	f8 94       	cli
    6418:	de bf       	out	0x3e, r29	; 62
    641a:	0f be       	out	0x3f, r0	; 63
    641c:	cd bf       	out	0x3d, r28	; 61
    641e:	9c 01       	movw	r18, r24
    6420:	90 91 d8 08 	lds	r25, 0x08D8	; 0x8008d8 <wallet_loaded>
    6424:	91 11       	cpse	r25, r1
    6426:	04 c0       	rjmp	.+8      	; 0x6430 <getMasterPublicKey+0x2c>
    6428:	87 e0       	ldi	r24, 0x07	; 7
    642a:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    642e:	2a c0       	rjmp	.+84     	; 0x6484 <getMasterPublicKey+0x80>
    6430:	89 01       	movw	r16, r18
    6432:	80 e4       	ldi	r24, 0x40	; 64
    6434:	e7 e7       	ldi	r30, 0x77	; 119
    6436:	f8 e0       	ldi	r31, 0x08	; 8
    6438:	de 01       	movw	r26, r28
    643a:	11 96       	adiw	r26, 0x01	; 1
    643c:	01 90       	ld	r0, Z+
    643e:	0d 92       	st	X+, r0
    6440:	8a 95       	dec	r24
    6442:	e1 f7       	brne	.-8      	; 0x643c <getMasterPublicKey+0x38>
    6444:	80 e2       	ldi	r24, 0x20	; 32
    6446:	fe 01       	movw	r30, r28
    6448:	b1 96       	adiw	r30, 0x21	; 33
    644a:	db 01       	movw	r26, r22
    644c:	01 90       	ld	r0, Z+
    644e:	0d 92       	st	X+, r0
    6450:	8a 95       	dec	r24
    6452:	e1 f7       	brne	.-8      	; 0x644c <getMasterPublicKey+0x48>
    6454:	ce 01       	movw	r24, r28
    6456:	01 96       	adiw	r24, 0x01	; 1
    6458:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <swapEndian256>
    645c:	0e 94 b1 0a 	call	0x1562	; 0x1562 <setFieldToN>
    6460:	be 01       	movw	r22, r28
    6462:	6f 5f       	subi	r22, 0xFF	; 255
    6464:	7f 4f       	sbci	r23, 0xFF	; 255
    6466:	cb 01       	movw	r24, r22
    6468:	0e 94 44 06 	call	0xc88	; 0xc88 <bigModulo>
    646c:	c8 01       	movw	r24, r16
    646e:	0e 94 3f 0b 	call	0x167e	; 0x167e <setToG>
    6472:	be 01       	movw	r22, r28
    6474:	6f 5f       	subi	r22, 0xFF	; 255
    6476:	7f 4f       	sbci	r23, 0xFF	; 255
    6478:	c8 01       	movw	r24, r16
    647a:	0e 94 b8 0a 	call	0x1570	; 0x1570 <pointMultiply>
    647e:	10 92 d9 08 	sts	0x08D9, r1	; 0x8008d9 <last_error>
    6482:	80 e0       	ldi	r24, 0x00	; 0
    6484:	c0 5c       	subi	r28, 0xC0	; 192
    6486:	df 4f       	sbci	r29, 0xFF	; 255
    6488:	0f b6       	in	r0, 0x3f	; 63
    648a:	f8 94       	cli
    648c:	de bf       	out	0x3e, r29	; 62
    648e:	0f be       	out	0x3f, r0	; 63
    6490:	cd bf       	out	0x3d, r28	; 61
    6492:	df 91       	pop	r29
    6494:	cf 91       	pop	r28
    6496:	1f 91       	pop	r17
    6498:	0f 91       	pop	r16
    649a:	08 95       	ret

0000649c <getNumAddresses>:
    649c:	80 91 d8 08 	lds	r24, 0x08D8	; 0x8008d8 <wallet_loaded>
    64a0:	81 11       	cpse	r24, r1
    64a2:	07 c0       	rjmp	.+14     	; 0x64b2 <getNumAddresses+0x16>
    64a4:	87 e0       	ldi	r24, 0x07	; 7
    64a6:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    64aa:	60 e0       	ldi	r22, 0x00	; 0
    64ac:	70 e0       	ldi	r23, 0x00	; 0
    64ae:	cb 01       	movw	r24, r22
    64b0:	08 95       	ret
    64b2:	60 91 67 08 	lds	r22, 0x0867	; 0x800867 <current_wallet+0x40>
    64b6:	70 91 68 08 	lds	r23, 0x0868	; 0x800868 <current_wallet+0x41>
    64ba:	80 91 69 08 	lds	r24, 0x0869	; 0x800869 <current_wallet+0x42>
    64be:	90 91 6a 08 	lds	r25, 0x086A	; 0x80086a <current_wallet+0x43>
    64c2:	61 15       	cp	r22, r1
    64c4:	71 05       	cpc	r23, r1
    64c6:	81 05       	cpc	r24, r1
    64c8:	91 05       	cpc	r25, r1
    64ca:	21 f4       	brne	.+8      	; 0x64d4 <getNumAddresses+0x38>
    64cc:	22 e0       	ldi	r18, 0x02	; 2
    64ce:	20 93 d9 08 	sts	0x08D9, r18	; 0x8008d9 <last_error>
    64d2:	08 95       	ret
    64d4:	10 92 d9 08 	sts	0x08D9, r1	; 0x8008d9 <last_error>
    64d8:	08 95       	ret

000064da <getPrivateKey>:
    64da:	0f 93       	push	r16
    64dc:	1f 93       	push	r17
    64de:	cf 93       	push	r28
    64e0:	fc 01       	movw	r30, r24
    64e2:	90 91 d8 08 	lds	r25, 0x08D8	; 0x8008d8 <wallet_loaded>
    64e6:	91 11       	cpse	r25, r1
    64e8:	04 c0       	rjmp	.+8      	; 0x64f2 <getPrivateKey+0x18>
    64ea:	87 e0       	ldi	r24, 0x07	; 7
    64ec:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    64f0:	34 c0       	rjmp	.+104    	; 0x655a <getPrivateKey+0x80>
    64f2:	80 91 67 08 	lds	r24, 0x0867	; 0x800867 <current_wallet+0x40>
    64f6:	90 91 68 08 	lds	r25, 0x0868	; 0x800868 <current_wallet+0x41>
    64fa:	a0 91 69 08 	lds	r26, 0x0869	; 0x800869 <current_wallet+0x42>
    64fe:	b0 91 6a 08 	lds	r27, 0x086A	; 0x80086a <current_wallet+0x43>
    6502:	00 97       	sbiw	r24, 0x00	; 0
    6504:	a1 05       	cpc	r26, r1
    6506:	b1 05       	cpc	r27, r1
    6508:	21 f4       	brne	.+8      	; 0x6512 <getPrivateKey+0x38>
    650a:	82 e0       	ldi	r24, 0x02	; 2
    650c:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    6510:	24 c0       	rjmp	.+72     	; 0x655a <getPrivateKey+0x80>
    6512:	8a 01       	movw	r16, r20
    6514:	9b 01       	movw	r18, r22
    6516:	01 50       	subi	r16, 0x01	; 1
    6518:	11 09       	sbc	r17, r1
    651a:	21 09       	sbc	r18, r1
    651c:	31 09       	sbc	r19, r1
    651e:	0e 3f       	cpi	r16, 0xFE	; 254
    6520:	1f 4f       	sbci	r17, 0xFF	; 255
    6522:	2f 4f       	sbci	r18, 0xFF	; 255
    6524:	3f 4f       	sbci	r19, 0xFF	; 255
    6526:	28 f4       	brcc	.+10     	; 0x6532 <getPrivateKey+0x58>
    6528:	84 17       	cp	r24, r20
    652a:	95 07       	cpc	r25, r21
    652c:	a6 07       	cpc	r26, r22
    652e:	b7 07       	cpc	r27, r23
    6530:	20 f4       	brcc	.+8      	; 0x653a <getPrivateKey+0x60>
    6532:	88 e0       	ldi	r24, 0x08	; 8
    6534:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    6538:	10 c0       	rjmp	.+32     	; 0x655a <getPrivateKey+0x80>
    653a:	9a 01       	movw	r18, r20
    653c:	ab 01       	movw	r20, r22
    653e:	cf 01       	movw	r24, r30
    6540:	67 e7       	ldi	r22, 0x77	; 119
    6542:	78 e0       	ldi	r23, 0x08	; 8
    6544:	0e 94 56 26 	call	0x4cac	; 0x4cac <generateDeterministic256>
    6548:	88 23       	and	r24, r24
    654a:	21 f0       	breq	.+8      	; 0x6554 <getPrivateKey+0x7a>
    654c:	8a e0       	ldi	r24, 0x0A	; 10
    654e:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    6552:	03 c0       	rjmp	.+6      	; 0x655a <getPrivateKey+0x80>
    6554:	10 92 d9 08 	sts	0x08D9, r1	; 0x8008d9 <last_error>
    6558:	80 e0       	ldi	r24, 0x00	; 0
    655a:	cf 91       	pop	r28
    655c:	1f 91       	pop	r17
    655e:	0f 91       	pop	r16
    6560:	08 95       	ret

00006562 <getAddressAndPublicKey>:
    6562:	8f 92       	push	r8
    6564:	9f 92       	push	r9
    6566:	af 92       	push	r10
    6568:	bf 92       	push	r11
    656a:	cf 92       	push	r12
    656c:	df 92       	push	r13
    656e:	ef 92       	push	r14
    6570:	ff 92       	push	r15
    6572:	1f 93       	push	r17
    6574:	cf 93       	push	r28
    6576:	df 93       	push	r29
    6578:	cd b7       	in	r28, 0x3d	; 61
    657a:	de b7       	in	r29, 0x3e	; 62
    657c:	ca 5c       	subi	r28, 0xCA	; 202
    657e:	d1 09       	sbc	r29, r1
    6580:	0f b6       	in	r0, 0x3f	; 63
    6582:	f8 94       	cli
    6584:	de bf       	out	0x3e, r29	; 62
    6586:	0f be       	out	0x3f, r0	; 63
    6588:	cd bf       	out	0x3d, r28	; 61
    658a:	dc 01       	movw	r26, r24
    658c:	90 91 d8 08 	lds	r25, 0x08D8	; 0x8008d8 <wallet_loaded>
    6590:	91 11       	cpse	r25, r1
    6592:	04 c0       	rjmp	.+8      	; 0x659c <getAddressAndPublicKey+0x3a>
    6594:	87 e0       	ldi	r24, 0x07	; 7
    6596:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    659a:	9f c0       	rjmp	.+318    	; 0x66da <getAddressAndPublicKey+0x178>
    659c:	c0 90 67 08 	lds	r12, 0x0867	; 0x800867 <current_wallet+0x40>
    65a0:	d0 90 68 08 	lds	r13, 0x0868	; 0x800868 <current_wallet+0x41>
    65a4:	e0 90 69 08 	lds	r14, 0x0869	; 0x800869 <current_wallet+0x42>
    65a8:	f0 90 6a 08 	lds	r15, 0x086A	; 0x80086a <current_wallet+0x43>
    65ac:	c1 14       	cp	r12, r1
    65ae:	d1 04       	cpc	r13, r1
    65b0:	e1 04       	cpc	r14, r1
    65b2:	f1 04       	cpc	r15, r1
    65b4:	21 f4       	brne	.+8      	; 0x65be <getAddressAndPublicKey+0x5c>
    65b6:	82 e0       	ldi	r24, 0x02	; 2
    65b8:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    65bc:	8e c0       	rjmp	.+284    	; 0x66da <getAddressAndPublicKey+0x178>
    65be:	49 01       	movw	r8, r18
    65c0:	5a 01       	movw	r10, r20
    65c2:	81 e0       	ldi	r24, 0x01	; 1
    65c4:	88 1a       	sub	r8, r24
    65c6:	91 08       	sbc	r9, r1
    65c8:	a1 08       	sbc	r10, r1
    65ca:	b1 08       	sbc	r11, r1
    65cc:	9e ef       	ldi	r25, 0xFE	; 254
    65ce:	89 16       	cp	r8, r25
    65d0:	9f ef       	ldi	r25, 0xFF	; 255
    65d2:	99 06       	cpc	r9, r25
    65d4:	a9 06       	cpc	r10, r25
    65d6:	b9 06       	cpc	r11, r25
    65d8:	28 f4       	brcc	.+10     	; 0x65e4 <getAddressAndPublicKey+0x82>
    65da:	c2 16       	cp	r12, r18
    65dc:	d3 06       	cpc	r13, r19
    65de:	e4 06       	cpc	r14, r20
    65e0:	f5 06       	cpc	r15, r21
    65e2:	20 f4       	brcc	.+8      	; 0x65ec <getAddressAndPublicKey+0x8a>
    65e4:	88 e0       	ldi	r24, 0x08	; 8
    65e6:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    65ea:	77 c0       	rjmp	.+238    	; 0x66da <getAddressAndPublicKey+0x178>
    65ec:	7b 01       	movw	r14, r22
    65ee:	6d 01       	movw	r12, r26
    65f0:	ba 01       	movw	r22, r20
    65f2:	a9 01       	movw	r20, r18
    65f4:	ce 01       	movw	r24, r28
    65f6:	01 96       	adiw	r24, 0x01	; 1
    65f8:	70 df       	rcall	.-288    	; 0x64da <getPrivateKey>
    65fa:	88 23       	and	r24, r24
    65fc:	19 f0       	breq	.+6      	; 0x6604 <getAddressAndPublicKey+0xa2>
    65fe:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    6602:	6b c0       	rjmp	.+214    	; 0x66da <getAddressAndPublicKey+0x178>
    6604:	c7 01       	movw	r24, r14
    6606:	0e 94 3f 0b 	call	0x167e	; 0x167e <setToG>
    660a:	be 01       	movw	r22, r28
    660c:	6f 5f       	subi	r22, 0xFF	; 255
    660e:	7f 4f       	sbci	r23, 0xFF	; 255
    6610:	c7 01       	movw	r24, r14
    6612:	0e 94 b8 0a 	call	0x1570	; 0x1570 <pointMultiply>
    6616:	41 e0       	ldi	r20, 0x01	; 1
    6618:	b7 01       	movw	r22, r14
    661a:	ce 01       	movw	r24, r28
    661c:	81 96       	adiw	r24, 0x21	; 33
    661e:	0e 94 88 0b 	call	0x1710	; 0x1710 <ecdsaSerialise>
    6622:	18 2f       	mov	r17, r24
    6624:	82 30       	cpi	r24, 0x02	; 2
    6626:	20 f4       	brcc	.+8      	; 0x6630 <getAddressAndPublicKey+0xce>
    6628:	88 e0       	ldi	r24, 0x08	; 8
    662a:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    662e:	55 c0       	rjmp	.+170    	; 0x66da <getAddressAndPublicKey+0x178>
    6630:	ce 01       	movw	r24, r28
    6632:	8e 59       	subi	r24, 0x9E	; 158
    6634:	9f 4f       	sbci	r25, 0xFF	; 255
    6636:	65 dd       	rcall	.-1334   	; 0x6102 <sha256Begin>
    6638:	11 23       	and	r17, r17
    663a:	b9 f0       	breq	.+46     	; 0x666a <getAddressAndPublicKey+0x108>
    663c:	7e 01       	movw	r14, r28
    663e:	e1 e2       	ldi	r30, 0x21	; 33
    6640:	ee 0e       	add	r14, r30
    6642:	f1 1c       	adc	r15, r1
    6644:	aa 24       	eor	r10, r10
    6646:	aa 94       	dec	r10
    6648:	a1 0e       	add	r10, r17
    664a:	b1 2c       	mov	r11, r1
    664c:	ff ef       	ldi	r31, 0xFF	; 255
    664e:	af 1a       	sub	r10, r31
    6650:	bf 0a       	sbc	r11, r31
    6652:	ae 0c       	add	r10, r14
    6654:	bf 1c       	adc	r11, r15
    6656:	f7 01       	movw	r30, r14
    6658:	61 91       	ld	r22, Z+
    665a:	7f 01       	movw	r14, r30
    665c:	ce 01       	movw	r24, r28
    665e:	8e 59       	subi	r24, 0x9E	; 158
    6660:	9f 4f       	sbci	r25, 0xFF	; 255
    6662:	a3 dd       	rcall	.-1210   	; 0x61aa <sha256WriteByte>
    6664:	ea 14       	cp	r14, r10
    6666:	fb 04       	cpc	r15, r11
    6668:	b1 f7       	brne	.-20     	; 0x6656 <getAddressAndPublicKey+0xf4>
    666a:	ce 01       	movw	r24, r28
    666c:	8e 59       	subi	r24, 0x9E	; 158
    666e:	9f 4f       	sbci	r25, 0xFF	; 255
    6670:	9f dd       	rcall	.-1218   	; 0x61b0 <sha256Finish>
    6672:	41 e0       	ldi	r20, 0x01	; 1
    6674:	be 01       	movw	r22, r28
    6676:	6e 59       	subi	r22, 0x9E	; 158
    6678:	7f 4f       	sbci	r23, 0xFF	; 255
    667a:	ce 01       	movw	r24, r28
    667c:	01 96       	adiw	r24, 0x01	; 1
    667e:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <writeHashToByteArray>
    6682:	ce 01       	movw	r24, r28
    6684:	8e 59       	subi	r24, 0x9E	; 158
    6686:	9f 4f       	sbci	r25, 0xFF	; 255
    6688:	5c d8       	rcall	.-3912   	; 0x5742 <ripemd160Begin>
    668a:	ce 01       	movw	r24, r28
    668c:	01 96       	adiw	r24, 0x01	; 1
    668e:	7c 01       	movw	r14, r24
    6690:	5e 01       	movw	r10, r28
    6692:	91 e2       	ldi	r25, 0x21	; 33
    6694:	a9 0e       	add	r10, r25
    6696:	b1 1c       	adc	r11, r1
    6698:	f7 01       	movw	r30, r14
    669a:	61 91       	ld	r22, Z+
    669c:	7f 01       	movw	r14, r30
    669e:	ce 01       	movw	r24, r28
    66a0:	8e 59       	subi	r24, 0x9E	; 158
    66a2:	9f 4f       	sbci	r25, 0xFF	; 255
    66a4:	89 d8       	rcall	.-3822   	; 0x57b8 <ripemd160WriteByte>
    66a6:	ea 14       	cp	r14, r10
    66a8:	fb 04       	cpc	r15, r11
    66aa:	b1 f7       	brne	.-20     	; 0x6698 <getAddressAndPublicKey+0x136>
    66ac:	ce 01       	movw	r24, r28
    66ae:	8e 59       	subi	r24, 0x9E	; 158
    66b0:	9f 4f       	sbci	r25, 0xFF	; 255
    66b2:	85 d8       	rcall	.-3830   	; 0x57be <ripemd160Finish>
    66b4:	41 e0       	ldi	r20, 0x01	; 1
    66b6:	be 01       	movw	r22, r28
    66b8:	6e 59       	subi	r22, 0x9E	; 158
    66ba:	7f 4f       	sbci	r23, 0xFF	; 255
    66bc:	ce 01       	movw	r24, r28
    66be:	01 96       	adiw	r24, 0x01	; 1
    66c0:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <writeHashToByteArray>
    66c4:	84 e1       	ldi	r24, 0x14	; 20
    66c6:	fe 01       	movw	r30, r28
    66c8:	31 96       	adiw	r30, 0x01	; 1
    66ca:	d6 01       	movw	r26, r12
    66cc:	01 90       	ld	r0, Z+
    66ce:	0d 92       	st	X+, r0
    66d0:	8a 95       	dec	r24
    66d2:	e1 f7       	brne	.-8      	; 0x66cc <getAddressAndPublicKey+0x16a>
    66d4:	10 92 d9 08 	sts	0x08D9, r1	; 0x8008d9 <last_error>
    66d8:	80 e0       	ldi	r24, 0x00	; 0
    66da:	c6 53       	subi	r28, 0x36	; 54
    66dc:	df 4f       	sbci	r29, 0xFF	; 255
    66de:	0f b6       	in	r0, 0x3f	; 63
    66e0:	f8 94       	cli
    66e2:	de bf       	out	0x3e, r29	; 62
    66e4:	0f be       	out	0x3f, r0	; 63
    66e6:	cd bf       	out	0x3d, r28	; 61
    66e8:	df 91       	pop	r29
    66ea:	cf 91       	pop	r28
    66ec:	1f 91       	pop	r17
    66ee:	ff 90       	pop	r15
    66f0:	ef 90       	pop	r14
    66f2:	df 90       	pop	r13
    66f4:	cf 90       	pop	r12
    66f6:	bf 90       	pop	r11
    66f8:	af 90       	pop	r10
    66fa:	9f 90       	pop	r9
    66fc:	8f 90       	pop	r8
    66fe:	08 95       	ret

00006700 <nonVolatileGetSize>:
    6700:	61 11       	cpse	r22, r1
    6702:	0b c0       	rjmp	.+22     	; 0x671a <nonVolatileGetSize+0x1a>
    6704:	40 e0       	ldi	r20, 0x00	; 0
    6706:	52 e0       	ldi	r21, 0x02	; 2
    6708:	60 e0       	ldi	r22, 0x00	; 0
    670a:	70 e0       	ldi	r23, 0x00	; 0
    670c:	fc 01       	movw	r30, r24
    670e:	40 83       	st	Z, r20
    6710:	51 83       	std	Z+1, r21	; 0x01
    6712:	62 83       	std	Z+2, r22	; 0x02
    6714:	73 83       	std	Z+3, r23	; 0x03
    6716:	80 e0       	ldi	r24, 0x00	; 0
    6718:	08 95       	ret
    671a:	61 30       	cpi	r22, 0x01	; 1
    671c:	59 f4       	brne	.+22     	; 0x6734 <nonVolatileGetSize+0x34>
    671e:	40 e0       	ldi	r20, 0x00	; 0
    6720:	54 e0       	ldi	r21, 0x04	; 4
    6722:	60 e0       	ldi	r22, 0x00	; 0
    6724:	70 e0       	ldi	r23, 0x00	; 0
    6726:	fc 01       	movw	r30, r24
    6728:	40 83       	st	Z, r20
    672a:	51 83       	std	Z+1, r21	; 0x01
    672c:	62 83       	std	Z+2, r22	; 0x02
    672e:	73 83       	std	Z+3, r23	; 0x03
    6730:	80 e0       	ldi	r24, 0x00	; 0
    6732:	08 95       	ret
    6734:	81 e0       	ldi	r24, 0x01	; 1
    6736:	08 95       	ret

00006738 <getNumberOfWallets>:
    6738:	cf 93       	push	r28
    673a:	df 93       	push	r29
    673c:	00 d0       	rcall	.+0      	; 0x673e <getNumberOfWallets+0x6>
    673e:	00 d0       	rcall	.+0      	; 0x6740 <getNumberOfWallets+0x8>
    6740:	cd b7       	in	r28, 0x3d	; 61
    6742:	de b7       	in	r29, 0x3e	; 62
    6744:	10 92 d9 08 	sts	0x08D9, r1	; 0x8008d9 <last_error>
    6748:	80 91 1f 08 	lds	r24, 0x081F	; 0x80081f <num_wallets>
    674c:	90 91 20 08 	lds	r25, 0x0820	; 0x800820 <num_wallets+0x1>
    6750:	a0 91 21 08 	lds	r26, 0x0821	; 0x800821 <num_wallets+0x2>
    6754:	b0 91 22 08 	lds	r27, 0x0822	; 0x800822 <num_wallets+0x3>
    6758:	89 2b       	or	r24, r25
    675a:	8a 2b       	or	r24, r26
    675c:	8b 2b       	or	r24, r27
    675e:	21 f5       	brne	.+72     	; 0x67a8 <getNumberOfWallets+0x70>
    6760:	61 e0       	ldi	r22, 0x01	; 1
    6762:	ce 01       	movw	r24, r28
    6764:	01 96       	adiw	r24, 0x01	; 1
    6766:	cc df       	rcall	.-104    	; 0x6700 <nonVolatileGetSize>
    6768:	81 11       	cpse	r24, r1
    676a:	13 c0       	rjmp	.+38     	; 0x6792 <getNumberOfWallets+0x5a>
    676c:	69 81       	ldd	r22, Y+1	; 0x01
    676e:	7a 81       	ldd	r23, Y+2	; 0x02
    6770:	8b 81       	ldd	r24, Y+3	; 0x03
    6772:	9c 81       	ldd	r25, Y+4	; 0x04
    6774:	20 eb       	ldi	r18, 0xB0	; 176
    6776:	30 e0       	ldi	r19, 0x00	; 0
    6778:	40 e0       	ldi	r20, 0x00	; 0
    677a:	50 e0       	ldi	r21, 0x00	; 0
    677c:	0e 94 87 3d 	call	0x7b0e	; 0x7b0e <__udivmodsi4>
    6780:	20 93 1f 08 	sts	0x081F, r18	; 0x80081f <num_wallets>
    6784:	30 93 20 08 	sts	0x0820, r19	; 0x800820 <num_wallets+0x1>
    6788:	40 93 21 08 	sts	0x0821, r20	; 0x800821 <num_wallets+0x2>
    678c:	50 93 22 08 	sts	0x0822, r21	; 0x800822 <num_wallets+0x3>
    6790:	0b c0       	rjmp	.+22     	; 0x67a8 <getNumberOfWallets+0x70>
    6792:	83 e0       	ldi	r24, 0x03	; 3
    6794:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    6798:	10 92 1f 08 	sts	0x081F, r1	; 0x80081f <num_wallets>
    679c:	10 92 20 08 	sts	0x0820, r1	; 0x800820 <num_wallets+0x1>
    67a0:	10 92 21 08 	sts	0x0821, r1	; 0x800821 <num_wallets+0x2>
    67a4:	10 92 22 08 	sts	0x0822, r1	; 0x800822 <num_wallets+0x3>
    67a8:	60 91 1f 08 	lds	r22, 0x081F	; 0x80081f <num_wallets>
    67ac:	70 91 20 08 	lds	r23, 0x0820	; 0x800820 <num_wallets+0x1>
    67b0:	80 91 21 08 	lds	r24, 0x0821	; 0x800821 <num_wallets+0x2>
    67b4:	90 91 22 08 	lds	r25, 0x0822	; 0x800822 <num_wallets+0x3>
    67b8:	0f 90       	pop	r0
    67ba:	0f 90       	pop	r0
    67bc:	0f 90       	pop	r0
    67be:	0f 90       	pop	r0
    67c0:	df 91       	pop	r29
    67c2:	cf 91       	pop	r28
    67c4:	08 95       	ret

000067c6 <nonVolatileWrite>:
    67c6:	4f 92       	push	r4
    67c8:	5f 92       	push	r5
    67ca:	6f 92       	push	r6
    67cc:	7f 92       	push	r7
    67ce:	8f 92       	push	r8
    67d0:	9f 92       	push	r9
    67d2:	af 92       	push	r10
    67d4:	bf 92       	push	r11
    67d6:	cf 92       	push	r12
    67d8:	df 92       	push	r13
    67da:	ef 92       	push	r14
    67dc:	ff 92       	push	r15
    67de:	0f 93       	push	r16
    67e0:	1f 93       	push	r17
    67e2:	cf 93       	push	r28
    67e4:	df 93       	push	r29
    67e6:	cd b7       	in	r28, 0x3d	; 61
    67e8:	de b7       	in	r29, 0x3e	; 62
    67ea:	28 97       	sbiw	r28, 0x08	; 8
    67ec:	0f b6       	in	r0, 0x3f	; 63
    67ee:	f8 94       	cli
    67f0:	de bf       	out	0x3e, r29	; 62
    67f2:	0f be       	out	0x3f, r0	; 63
    67f4:	cd bf       	out	0x3d, r28	; 61
    67f6:	21 30       	cpi	r18, 0x01	; 1
    67f8:	31 05       	cpc	r19, r1
    67fa:	41 05       	cpc	r20, r1
    67fc:	70 e1       	ldi	r23, 0x10	; 16
    67fe:	57 07       	cpc	r21, r23
    6800:	08 f0       	brcs	.+2      	; 0x6804 <nonVolatileWrite+0x3e>
    6802:	6a c0       	rjmp	.+212    	; 0x68d8 <nonVolatileWrite+0x112>
    6804:	e1 e0       	ldi	r30, 0x01	; 1
    6806:	ee 16       	cp	r14, r30
    6808:	f1 04       	cpc	r15, r1
    680a:	01 05       	cpc	r16, r1
    680c:	e0 e1       	ldi	r30, 0x10	; 16
    680e:	1e 07       	cpc	r17, r30
    6810:	08 f0       	brcs	.+2      	; 0x6814 <nonVolatileWrite+0x4e>
    6812:	64 c0       	rjmp	.+200    	; 0x68dc <nonVolatileWrite+0x116>
    6814:	47 01       	movw	r8, r14
    6816:	58 01       	movw	r10, r16
    6818:	69 01       	movw	r12, r18
    681a:	7a 01       	movw	r14, r20
    681c:	16 2f       	mov	r17, r22
    681e:	09 2f       	mov	r16, r25
    6820:	78 2e       	mov	r7, r24
    6822:	ce 01       	movw	r24, r28
    6824:	05 96       	adiw	r24, 0x05	; 5
    6826:	6c df       	rcall	.-296    	; 0x6700 <nonVolatileGetSize>
    6828:	81 11       	cpse	r24, r1
    682a:	5d c0       	rjmp	.+186    	; 0x68e6 <nonVolatileWrite+0x120>
    682c:	4d 81       	ldd	r20, Y+5	; 0x05
    682e:	5e 81       	ldd	r21, Y+6	; 0x06
    6830:	6f 81       	ldd	r22, Y+7	; 0x07
    6832:	78 85       	ldd	r23, Y+8	; 0x08
    6834:	d7 01       	movw	r26, r14
    6836:	c6 01       	movw	r24, r12
    6838:	88 0d       	add	r24, r8
    683a:	99 1d       	adc	r25, r9
    683c:	aa 1d       	adc	r26, r10
    683e:	bb 1d       	adc	r27, r11
    6840:	48 17       	cp	r20, r24
    6842:	59 07       	cpc	r21, r25
    6844:	6a 07       	cpc	r22, r26
    6846:	7b 07       	cpc	r23, r27
    6848:	08 f4       	brcc	.+2      	; 0x684c <nonVolatileWrite+0x86>
    684a:	4a c0       	rjmp	.+148    	; 0x68e0 <nonVolatileWrite+0x11a>
    684c:	9f 92       	push	r9
    684e:	8f 92       	push	r8
    6850:	df 92       	push	r13
    6852:	cf 92       	push	r12
    6854:	1f 92       	push	r1
    6856:	1f 93       	push	r17
    6858:	8e e3       	ldi	r24, 0x3E	; 62
    685a:	97 e0       	ldi	r25, 0x07	; 7
    685c:	9f 93       	push	r25
    685e:	8f 93       	push	r24
    6860:	0e 94 dd 3e 	call	0x7dba	; 0x7dba <printf>
    6864:	0f b6       	in	r0, 0x3f	; 63
    6866:	f8 94       	cli
    6868:	de bf       	out	0x3e, r29	; 62
    686a:	0f be       	out	0x3f, r0	; 63
    686c:	cd bf       	out	0x3d, r28	; 61
    686e:	81 14       	cp	r8, r1
    6870:	91 04       	cpc	r9, r1
    6872:	a1 04       	cpc	r10, r1
    6874:	b1 04       	cpc	r11, r1
    6876:	11 f1       	breq	.+68     	; 0x68bc <nonVolatileWrite+0xf6>
    6878:	e7 2c       	mov	r14, r7
    687a:	f0 2e       	mov	r15, r16
    687c:	41 2c       	mov	r4, r1
    687e:	51 2c       	mov	r5, r1
    6880:	32 01       	movw	r6, r4
    6882:	0f 2e       	mov	r0, r31
    6884:	fa e7       	ldi	r31, 0x7A	; 122
    6886:	cf 2e       	mov	r12, r31
    6888:	f7 e0       	ldi	r31, 0x07	; 7
    688a:	df 2e       	mov	r13, r31
    688c:	f0 2d       	mov	r31, r0
    688e:	f7 01       	movw	r30, r14
    6890:	81 91       	ld	r24, Z+
    6892:	7f 01       	movw	r14, r30
    6894:	1f 92       	push	r1
    6896:	8f 93       	push	r24
    6898:	df 92       	push	r13
    689a:	cf 92       	push	r12
    689c:	0e 94 dd 3e 	call	0x7dba	; 0x7dba <printf>
    68a0:	ff ef       	ldi	r31, 0xFF	; 255
    68a2:	4f 1a       	sub	r4, r31
    68a4:	5f 0a       	sbc	r5, r31
    68a6:	6f 0a       	sbc	r6, r31
    68a8:	7f 0a       	sbc	r7, r31
    68aa:	0f 90       	pop	r0
    68ac:	0f 90       	pop	r0
    68ae:	0f 90       	pop	r0
    68b0:	0f 90       	pop	r0
    68b2:	84 14       	cp	r8, r4
    68b4:	95 04       	cpc	r9, r5
    68b6:	a6 04       	cpc	r10, r6
    68b8:	b7 04       	cpc	r11, r7
    68ba:	49 f7       	brne	.-46     	; 0x688e <nonVolatileWrite+0xc8>
    68bc:	8a e0       	ldi	r24, 0x0A	; 10
    68be:	90 e0       	ldi	r25, 0x00	; 0
    68c0:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <putchar>
    68c4:	11 23       	and	r17, r17
    68c6:	71 f0       	breq	.+28     	; 0x68e4 <nonVolatileWrite+0x11e>
    68c8:	60 e0       	ldi	r22, 0x00	; 0
    68ca:	ce 01       	movw	r24, r28
    68cc:	01 96       	adiw	r24, 0x01	; 1
    68ce:	18 df       	rcall	.-464    	; 0x6700 <nonVolatileGetSize>
    68d0:	88 23       	and	r24, r24
    68d2:	49 f0       	breq	.+18     	; 0x68e6 <nonVolatileWrite+0x120>
    68d4:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <abort>
    68d8:	81 e0       	ldi	r24, 0x01	; 1
    68da:	05 c0       	rjmp	.+10     	; 0x68e6 <nonVolatileWrite+0x120>
    68dc:	81 e0       	ldi	r24, 0x01	; 1
    68de:	03 c0       	rjmp	.+6      	; 0x68e6 <nonVolatileWrite+0x120>
    68e0:	81 e0       	ldi	r24, 0x01	; 1
    68e2:	01 c0       	rjmp	.+2      	; 0x68e6 <nonVolatileWrite+0x120>
    68e4:	80 e0       	ldi	r24, 0x00	; 0
    68e6:	28 96       	adiw	r28, 0x08	; 8
    68e8:	0f b6       	in	r0, 0x3f	; 63
    68ea:	f8 94       	cli
    68ec:	de bf       	out	0x3e, r29	; 62
    68ee:	0f be       	out	0x3f, r0	; 63
    68f0:	cd bf       	out	0x3d, r28	; 61
    68f2:	df 91       	pop	r29
    68f4:	cf 91       	pop	r28
    68f6:	1f 91       	pop	r17
    68f8:	0f 91       	pop	r16
    68fa:	ff 90       	pop	r15
    68fc:	ef 90       	pop	r14
    68fe:	df 90       	pop	r13
    6900:	cf 90       	pop	r12
    6902:	bf 90       	pop	r11
    6904:	af 90       	pop	r10
    6906:	9f 90       	pop	r9
    6908:	8f 90       	pop	r8
    690a:	7f 90       	pop	r7
    690c:	6f 90       	pop	r6
    690e:	5f 90       	pop	r5
    6910:	4f 90       	pop	r4
    6912:	08 95       	ret

00006914 <sanitiseNonVolatileStorage>:
    6914:	2f 92       	push	r2
    6916:	3f 92       	push	r3
    6918:	4f 92       	push	r4
    691a:	5f 92       	push	r5
    691c:	6f 92       	push	r6
    691e:	7f 92       	push	r7
    6920:	8f 92       	push	r8
    6922:	9f 92       	push	r9
    6924:	af 92       	push	r10
    6926:	bf 92       	push	r11
    6928:	cf 92       	push	r12
    692a:	df 92       	push	r13
    692c:	ef 92       	push	r14
    692e:	ff 92       	push	r15
    6930:	0f 93       	push	r16
    6932:	1f 93       	push	r17
    6934:	cf 93       	push	r28
    6936:	df 93       	push	r29
    6938:	cd b7       	in	r28, 0x3d	; 61
    693a:	de b7       	in	r29, 0x3e	; 62
    693c:	c0 55       	subi	r28, 0x50	; 80
    693e:	d1 09       	sbc	r29, r1
    6940:	0f b6       	in	r0, 0x3f	; 63
    6942:	f8 94       	cli
    6944:	de bf       	out	0x3e, r29	; 62
    6946:	0f be       	out	0x3f, r0	; 63
    6948:	cd bf       	out	0x3d, r28	; 61
    694a:	d8 2e       	mov	r13, r24
    694c:	4a 01       	movw	r8, r20
    694e:	5b 01       	movw	r10, r22
    6950:	28 01       	movw	r4, r16
    6952:	39 01       	movw	r6, r18
    6954:	ce 01       	movw	r24, r28
    6956:	81 96       	adiw	r24, 0x21	; 33
    6958:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <getEntropyPool>
    695c:	88 23       	and	r24, r24
    695e:	21 f0       	breq	.+8      	; 0x6968 <sanitiseNonVolatileStorage+0x54>
    6960:	8a e0       	ldi	r24, 0x0A	; 10
    6962:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    6966:	59 c1       	rjmp	.+690    	; 0x6c1a <sanitiseNonVolatileStorage+0x306>
    6968:	21 e0       	ldi	r18, 0x01	; 1
    696a:	82 16       	cp	r8, r18
    696c:	91 04       	cpc	r9, r1
    696e:	a1 04       	cpc	r10, r1
    6970:	20 e1       	ldi	r18, 0x10	; 16
    6972:	b2 06       	cpc	r11, r18
    6974:	38 f4       	brcc	.+14     	; 0x6984 <sanitiseNonVolatileStorage+0x70>
    6976:	31 e0       	ldi	r19, 0x01	; 1
    6978:	43 16       	cp	r4, r19
    697a:	51 04       	cpc	r5, r1
    697c:	61 04       	cpc	r6, r1
    697e:	30 e1       	ldi	r19, 0x10	; 16
    6980:	73 06       	cpc	r7, r19
    6982:	20 f0       	brcs	.+8      	; 0x698c <sanitiseNonVolatileStorage+0x78>
    6984:	8e e0       	ldi	r24, 0x0E	; 14
    6986:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    698a:	47 c1       	rjmp	.+654    	; 0x6c1a <sanitiseNonVolatileStorage+0x306>
    698c:	d5 01       	movw	r26, r10
    698e:	c4 01       	movw	r24, r8
    6990:	84 29       	or	r24, r4
    6992:	95 29       	or	r25, r5
    6994:	a6 29       	or	r26, r6
    6996:	b7 29       	or	r27, r7
    6998:	83 70       	andi	r24, 0x03	; 3
    699a:	99 27       	eor	r25, r25
    699c:	aa 27       	eor	r26, r26
    699e:	bb 27       	eor	r27, r27
    69a0:	89 2b       	or	r24, r25
    69a2:	8a 2b       	or	r24, r26
    69a4:	8b 2b       	or	r24, r27
    69a6:	09 f4       	brne	.+2      	; 0x69aa <sanitiseNonVolatileStorage+0x96>
    69a8:	a3 c0       	rjmp	.+326    	; 0x6af0 <sanitiseNonVolatileStorage+0x1dc>
    69aa:	8e e0       	ldi	r24, 0x0E	; 14
    69ac:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    69b0:	34 c1       	rjmp	.+616    	; 0x6c1a <sanitiseNonVolatileStorage+0x306>
    69b2:	2b 96       	adiw	r28, 0x0b	; 11
    69b4:	8c ae       	std	Y+60, r8	; 0x3c
    69b6:	9d ae       	std	Y+61, r9	; 0x3d
    69b8:	ae ae       	std	Y+62, r10	; 0x3e
    69ba:	bf ae       	std	Y+63, r11	; 0x3f
    69bc:	2b 97       	sbiw	r28, 0x0b	; 11
    69be:	27 96       	adiw	r28, 0x07	; 7
    69c0:	1c ae       	std	Y+60, r1	; 0x3c
    69c2:	1d ae       	std	Y+61, r1	; 0x3d
    69c4:	1e ae       	std	Y+62, r1	; 0x3e
    69c6:	1f ae       	std	Y+63, r1	; 0x3f
    69c8:	27 97       	sbiw	r28, 0x07	; 7
    69ca:	2d 2c       	mov	r2, r13
    69cc:	60 96       	adiw	r28, 0x10	; 16
    69ce:	3f ac       	ldd	r3, Y+63	; 0x3f
    69d0:	60 97       	sbiw	r28, 0x10	; 16
    69d2:	61 96       	adiw	r28, 0x11	; 17
    69d4:	df ac       	ldd	r13, Y+63	; 0x3f
    69d6:	61 97       	sbiw	r28, 0x11	; 17
    69d8:	c1 10       	cpse	r12, r1
    69da:	09 c0       	rjmp	.+18     	; 0x69ee <sanitiseNonVolatileStorage+0xda>
    69dc:	23 96       	adiw	r28, 0x03	; 3
    69de:	ae ad       	ldd	r26, Y+62	; 0x3e
    69e0:	bf ad       	ldd	r27, Y+63	; 0x3f
    69e2:	23 97       	sbiw	r28, 0x03	; 3
    69e4:	e0 e2       	ldi	r30, 0x20	; 32
    69e6:	1d 92       	st	X+, r1
    69e8:	ea 95       	dec	r30
    69ea:	e9 f7       	brne	.-6      	; 0x69e6 <sanitiseNonVolatileStorage+0xd2>
    69ec:	1d c0       	rjmp	.+58     	; 0x6a28 <sanitiseNonVolatileStorage+0x114>
    69ee:	f1 e0       	ldi	r31, 0x01	; 1
    69f0:	cf 12       	cpse	r12, r31
    69f2:	09 c0       	rjmp	.+18     	; 0x6a06 <sanitiseNonVolatileStorage+0xf2>
    69f4:	40 e2       	ldi	r20, 0x20	; 32
    69f6:	50 e0       	ldi	r21, 0x00	; 0
    69f8:	6f ef       	ldi	r22, 0xFF	; 255
    69fa:	70 e0       	ldi	r23, 0x00	; 0
    69fc:	83 2d       	mov	r24, r3
    69fe:	9d 2d       	mov	r25, r13
    6a00:	0e 94 8c 3e 	call	0x7d18	; 0x7d18 <memset>
    6a04:	11 c0       	rjmp	.+34     	; 0x6a28 <sanitiseNonVolatileStorage+0x114>
    6a06:	be 01       	movw	r22, r28
    6a08:	6f 5d       	subi	r22, 0xDF	; 223
    6a0a:	7f 4f       	sbci	r23, 0xFF	; 255
    6a0c:	83 2d       	mov	r24, r3
    6a0e:	9d 2d       	mov	r25, r13
    6a10:	0e 94 0f 28 	call	0x501e	; 0x501e <getRandom256TemporaryPool>
    6a14:	88 23       	and	r24, r24
    6a16:	41 f0       	breq	.+16     	; 0x6a28 <sanitiseNonVolatileStorage+0x114>
    6a18:	ce 01       	movw	r24, r28
    6a1a:	81 96       	adiw	r24, 0x21	; 33
    6a1c:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <setEntropyPool>
    6a20:	8a e0       	ldi	r24, 0x0A	; 10
    6a22:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    6a26:	f9 c0       	rjmp	.+498    	; 0x6c1a <sanitiseNonVolatileStorage+0x306>
    6a28:	2f 96       	adiw	r28, 0x0f	; 15
    6a2a:	4c ac       	ldd	r4, Y+60	; 0x3c
    6a2c:	5d ac       	ldd	r5, Y+61	; 0x3d
    6a2e:	6e ac       	ldd	r6, Y+62	; 0x3e
    6a30:	7f ac       	ldd	r7, Y+63	; 0x3f
    6a32:	2f 97       	sbiw	r28, 0x0f	; 15
    6a34:	27 96       	adiw	r28, 0x07	; 7
    6a36:	2c ad       	ldd	r18, Y+60	; 0x3c
    6a38:	3d ad       	ldd	r19, Y+61	; 0x3d
    6a3a:	4e ad       	ldd	r20, Y+62	; 0x3e
    6a3c:	5f ad       	ldd	r21, Y+63	; 0x3f
    6a3e:	27 97       	sbiw	r28, 0x07	; 7
    6a40:	42 1a       	sub	r4, r18
    6a42:	53 0a       	sbc	r5, r19
    6a44:	64 0a       	sbc	r6, r20
    6a46:	75 0a       	sbc	r7, r21
    6a48:	31 e2       	ldi	r19, 0x21	; 33
    6a4a:	43 16       	cp	r4, r19
    6a4c:	51 04       	cpc	r5, r1
    6a4e:	61 04       	cpc	r6, r1
    6a50:	71 04       	cpc	r7, r1
    6a52:	28 f0       	brcs	.+10     	; 0x6a5e <sanitiseNonVolatileStorage+0x14a>
    6a54:	41 2c       	mov	r4, r1
    6a56:	51 2c       	mov	r5, r1
    6a58:	32 01       	movw	r6, r4
    6a5a:	68 94       	set
    6a5c:	45 f8       	bld	r4, 5
    6a5e:	41 14       	cp	r4, r1
    6a60:	51 04       	cpc	r5, r1
    6a62:	61 04       	cpc	r6, r1
    6a64:	71 04       	cpc	r7, r1
    6a66:	91 f0       	breq	.+36     	; 0x6a8c <sanitiseNonVolatileStorage+0x178>
    6a68:	83 01       	movw	r16, r6
    6a6a:	72 01       	movw	r14, r4
    6a6c:	2b 96       	adiw	r28, 0x0b	; 11
    6a6e:	2c ad       	ldd	r18, Y+60	; 0x3c
    6a70:	3d ad       	ldd	r19, Y+61	; 0x3d
    6a72:	4e ad       	ldd	r20, Y+62	; 0x3e
    6a74:	5f ad       	ldd	r21, Y+63	; 0x3f
    6a76:	2b 97       	sbiw	r28, 0x0b	; 11
    6a78:	62 2d       	mov	r22, r2
    6a7a:	83 2d       	mov	r24, r3
    6a7c:	9d 2d       	mov	r25, r13
    6a7e:	a3 de       	rcall	.-698    	; 0x67c6 <nonVolatileWrite>
    6a80:	88 23       	and	r24, r24
    6a82:	21 f0       	breq	.+8      	; 0x6a8c <sanitiseNonVolatileStorage+0x178>
    6a84:	84 e0       	ldi	r24, 0x04	; 4
    6a86:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    6a8a:	c7 c0       	rjmp	.+398    	; 0x6c1a <sanitiseNonVolatileStorage+0x306>
    6a8c:	2b 96       	adiw	r28, 0x0b	; 11
    6a8e:	8c ad       	ldd	r24, Y+60	; 0x3c
    6a90:	9d ad       	ldd	r25, Y+61	; 0x3d
    6a92:	ae ad       	ldd	r26, Y+62	; 0x3e
    6a94:	bf ad       	ldd	r27, Y+63	; 0x3f
    6a96:	2b 97       	sbiw	r28, 0x0b	; 11
    6a98:	84 0d       	add	r24, r4
    6a9a:	95 1d       	adc	r25, r5
    6a9c:	a6 1d       	adc	r26, r6
    6a9e:	b7 1d       	adc	r27, r7
    6aa0:	2b 96       	adiw	r28, 0x0b	; 11
    6aa2:	8c af       	std	Y+60, r24	; 0x3c
    6aa4:	9d af       	std	Y+61, r25	; 0x3d
    6aa6:	ae af       	std	Y+62, r26	; 0x3e
    6aa8:	bf af       	std	Y+63, r27	; 0x3f
    6aaa:	2b 97       	sbiw	r28, 0x0b	; 11
    6aac:	27 96       	adiw	r28, 0x07	; 7
    6aae:	2c ad       	ldd	r18, Y+60	; 0x3c
    6ab0:	3d ad       	ldd	r19, Y+61	; 0x3d
    6ab2:	4e ad       	ldd	r20, Y+62	; 0x3e
    6ab4:	5f ad       	ldd	r21, Y+63	; 0x3f
    6ab6:	27 97       	sbiw	r28, 0x07	; 7
    6ab8:	24 0d       	add	r18, r4
    6aba:	35 1d       	adc	r19, r5
    6abc:	46 1d       	adc	r20, r6
    6abe:	57 1d       	adc	r21, r7
    6ac0:	27 96       	adiw	r28, 0x07	; 7
    6ac2:	2c af       	std	Y+60, r18	; 0x3c
    6ac4:	3d af       	std	Y+61, r19	; 0x3d
    6ac6:	4e af       	std	Y+62, r20	; 0x3e
    6ac8:	5f af       	std	Y+63, r21	; 0x3f
    6aca:	27 97       	sbiw	r28, 0x07	; 7
    6acc:	2f 96       	adiw	r28, 0x0f	; 15
    6ace:	8c ad       	ldd	r24, Y+60	; 0x3c
    6ad0:	9d ad       	ldd	r25, Y+61	; 0x3d
    6ad2:	ae ad       	ldd	r26, Y+62	; 0x3e
    6ad4:	bf ad       	ldd	r27, Y+63	; 0x3f
    6ad6:	2f 97       	sbiw	r28, 0x0f	; 15
    6ad8:	28 17       	cp	r18, r24
    6ada:	39 07       	cpc	r19, r25
    6adc:	4a 07       	cpc	r20, r26
    6ade:	5b 07       	cpc	r21, r27
    6ae0:	08 f4       	brcc	.+2      	; 0x6ae4 <sanitiseNonVolatileStorage+0x1d0>
    6ae2:	7a cf       	rjmp	.-268    	; 0x69d8 <sanitiseNonVolatileStorage+0xc4>
    6ae4:	d2 2c       	mov	r13, r2
    6ae6:	c3 94       	inc	r12
    6ae8:	94 e0       	ldi	r25, 0x04	; 4
    6aea:	c9 12       	cpse	r12, r25
    6aec:	1a c0       	rjmp	.+52     	; 0x6b22 <sanitiseNonVolatileStorage+0x20e>
    6aee:	25 c0       	rjmp	.+74     	; 0x6b3a <sanitiseNonVolatileStorage+0x226>
    6af0:	c1 2c       	mov	r12, r1
    6af2:	de 01       	movw	r26, r28
    6af4:	11 96       	adiw	r26, 0x01	; 1
    6af6:	23 96       	adiw	r28, 0x03	; 3
    6af8:	bf af       	std	Y+63, r27	; 0x3f
    6afa:	ae af       	std	Y+62, r26	; 0x3e
    6afc:	23 97       	sbiw	r28, 0x03	; 3
    6afe:	22 96       	adiw	r28, 0x02	; 2
    6b00:	3f ac       	ldd	r3, Y+63	; 0x3f
    6b02:	22 97       	sbiw	r28, 0x02	; 2
    6b04:	23 96       	adiw	r28, 0x03	; 3
    6b06:	2f ac       	ldd	r2, Y+63	; 0x3f
    6b08:	23 97       	sbiw	r28, 0x03	; 3
    6b0a:	2f 96       	adiw	r28, 0x0f	; 15
    6b0c:	4c ae       	std	Y+60, r4	; 0x3c
    6b0e:	5d ae       	std	Y+61, r5	; 0x3d
    6b10:	6e ae       	std	Y+62, r6	; 0x3e
    6b12:	7f ae       	std	Y+63, r7	; 0x3f
    6b14:	2f 97       	sbiw	r28, 0x0f	; 15
    6b16:	60 96       	adiw	r28, 0x10	; 16
    6b18:	3f ae       	std	Y+63, r3	; 0x3f
    6b1a:	60 97       	sbiw	r28, 0x10	; 16
    6b1c:	61 96       	adiw	r28, 0x11	; 17
    6b1e:	2f ae       	std	Y+63, r2	; 0x3f
    6b20:	61 97       	sbiw	r28, 0x11	; 17
    6b22:	2f 96       	adiw	r28, 0x0f	; 15
    6b24:	2c ad       	ldd	r18, Y+60	; 0x3c
    6b26:	3d ad       	ldd	r19, Y+61	; 0x3d
    6b28:	4e ad       	ldd	r20, Y+62	; 0x3e
    6b2a:	5f ad       	ldd	r21, Y+63	; 0x3f
    6b2c:	2f 97       	sbiw	r28, 0x0f	; 15
    6b2e:	23 2b       	or	r18, r19
    6b30:	24 2b       	or	r18, r20
    6b32:	25 2b       	or	r18, r21
    6b34:	09 f0       	breq	.+2      	; 0x6b38 <sanitiseNonVolatileStorage+0x224>
    6b36:	3d cf       	rjmp	.-390    	; 0x69b2 <sanitiseNonVolatileStorage+0x9e>
    6b38:	d6 cf       	rjmp	.-84     	; 0x6ae6 <sanitiseNonVolatileStorage+0x1d2>
    6b3a:	2f 96       	adiw	r28, 0x0f	; 15
    6b3c:	4c ac       	ldd	r4, Y+60	; 0x3c
    6b3e:	5d ac       	ldd	r5, Y+61	; 0x3d
    6b40:	6e ac       	ldd	r6, Y+62	; 0x3e
    6b42:	7f ac       	ldd	r7, Y+63	; 0x3f
    6b44:	2f 97       	sbiw	r28, 0x0f	; 15
    6b46:	ce 01       	movw	r24, r28
    6b48:	81 96       	adiw	r24, 0x21	; 33
    6b4a:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <setEntropyPool>
    6b4e:	88 23       	and	r24, r24
    6b50:	21 f0       	breq	.+8      	; 0x6b5a <sanitiseNonVolatileStorage+0x246>
    6b52:	8a e0       	ldi	r24, 0x0A	; 10
    6b54:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    6b58:	60 c0       	rjmp	.+192    	; 0x6c1a <sanitiseNonVolatileStorage+0x306>
    6b5a:	31 e0       	ldi	r19, 0x01	; 1
    6b5c:	d3 12       	cpse	r13, r19
    6b5e:	5a c0       	rjmp	.+180    	; 0x6c14 <sanitiseNonVolatileStorage+0x300>
    6b60:	c5 01       	movw	r24, r10
    6b62:	b4 01       	movw	r22, r8
    6b64:	20 eb       	ldi	r18, 0xB0	; 176
    6b66:	30 e0       	ldi	r19, 0x00	; 0
    6b68:	40 e0       	ldi	r20, 0x00	; 0
    6b6a:	50 e0       	ldi	r21, 0x00	; 0
    6b6c:	d0 d7       	rcall	.+4000   	; 0x7b0e <__udivmodsi4>
    6b6e:	a0 eb       	ldi	r26, 0xB0	; 176
    6b70:	b0 e0       	ldi	r27, 0x00	; 0
    6b72:	ef d7       	rcall	.+4062   	; 0x7b52 <__muluhisi3>
    6b74:	6b 01       	movw	r12, r22
    6b76:	7c 01       	movw	r14, r24
    6b78:	fe 01       	movw	r30, r28
    6b7a:	31 96       	adiw	r30, 0x01	; 1
    6b7c:	84 e0       	ldi	r24, 0x04	; 4
    6b7e:	df 01       	movw	r26, r30
    6b80:	1d 92       	st	X+, r1
    6b82:	8a 95       	dec	r24
    6b84:	e9 f7       	brne	.-6      	; 0x6b80 <sanitiseNonVolatileStorage+0x26c>
    6b86:	a5 01       	movw	r20, r10
    6b88:	94 01       	movw	r18, r8
    6b8a:	24 0d       	add	r18, r4
    6b8c:	35 1d       	adc	r19, r5
    6b8e:	46 1d       	adc	r20, r6
    6b90:	57 1d       	adc	r21, r7
    6b92:	27 96       	adiw	r28, 0x07	; 7
    6b94:	2c af       	std	Y+60, r18	; 0x3c
    6b96:	3d af       	std	Y+61, r19	; 0x3d
    6b98:	4e af       	std	Y+62, r20	; 0x3e
    6b9a:	5f af       	std	Y+63, r21	; 0x3f
    6b9c:	27 97       	sbiw	r28, 0x07	; 7
    6b9e:	d7 01       	movw	r26, r14
    6ba0:	c6 01       	movw	r24, r12
    6ba2:	04 96       	adiw	r24, 0x04	; 4
    6ba4:	a1 1d       	adc	r26, r1
    6ba6:	b1 1d       	adc	r27, r1
    6ba8:	28 17       	cp	r18, r24
    6baa:	39 07       	cpc	r19, r25
    6bac:	4a 07       	cpc	r20, r26
    6bae:	5b 07       	cpc	r21, r27
    6bb0:	88 f1       	brcs	.+98     	; 0x6c14 <sanitiseNonVolatileStorage+0x300>
    6bb2:	26 01       	movw	r4, r12
    6bb4:	37 01       	movw	r6, r14
    6bb6:	02 c0       	rjmp	.+4      	; 0x6bbc <sanitiseNonVolatileStorage+0x2a8>
    6bb8:	2c 01       	movw	r4, r24
    6bba:	3d 01       	movw	r6, r26
    6bbc:	48 14       	cp	r4, r8
    6bbe:	59 04       	cpc	r5, r9
    6bc0:	6a 04       	cpc	r6, r10
    6bc2:	7b 04       	cpc	r7, r11
    6bc4:	88 f0       	brcs	.+34     	; 0x6be8 <sanitiseNonVolatileStorage+0x2d4>
    6bc6:	14 e0       	ldi	r17, 0x04	; 4
    6bc8:	e1 2e       	mov	r14, r17
    6bca:	f1 2c       	mov	r15, r1
    6bcc:	00 e0       	ldi	r16, 0x00	; 0
    6bce:	10 e0       	ldi	r17, 0x00	; 0
    6bd0:	a3 01       	movw	r20, r6
    6bd2:	92 01       	movw	r18, r4
    6bd4:	61 e0       	ldi	r22, 0x01	; 1
    6bd6:	ce 01       	movw	r24, r28
    6bd8:	01 96       	adiw	r24, 0x01	; 1
    6bda:	f5 dd       	rcall	.-1046   	; 0x67c6 <nonVolatileWrite>
    6bdc:	88 23       	and	r24, r24
    6bde:	21 f0       	breq	.+8      	; 0x6be8 <sanitiseNonVolatileStorage+0x2d4>
    6be0:	84 e0       	ldi	r24, 0x04	; 4
    6be2:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    6be6:	19 c0       	rjmp	.+50     	; 0x6c1a <sanitiseNonVolatileStorage+0x306>
    6be8:	d3 01       	movw	r26, r6
    6bea:	c2 01       	movw	r24, r4
    6bec:	80 55       	subi	r24, 0x50	; 80
    6bee:	9f 4f       	sbci	r25, 0xFF	; 255
    6bf0:	af 4f       	sbci	r26, 0xFF	; 255
    6bf2:	bf 4f       	sbci	r27, 0xFF	; 255
    6bf4:	34 eb       	ldi	r19, 0xB4	; 180
    6bf6:	43 0e       	add	r4, r19
    6bf8:	51 1c       	adc	r5, r1
    6bfa:	61 1c       	adc	r6, r1
    6bfc:	71 1c       	adc	r7, r1
    6bfe:	27 96       	adiw	r28, 0x07	; 7
    6c00:	2c ad       	ldd	r18, Y+60	; 0x3c
    6c02:	3d ad       	ldd	r19, Y+61	; 0x3d
    6c04:	4e ad       	ldd	r20, Y+62	; 0x3e
    6c06:	5f ad       	ldd	r21, Y+63	; 0x3f
    6c08:	27 97       	sbiw	r28, 0x07	; 7
    6c0a:	24 15       	cp	r18, r4
    6c0c:	35 05       	cpc	r19, r5
    6c0e:	46 05       	cpc	r20, r6
    6c10:	57 05       	cpc	r21, r7
    6c12:	90 f6       	brcc	.-92     	; 0x6bb8 <sanitiseNonVolatileStorage+0x2a4>
    6c14:	10 92 d9 08 	sts	0x08D9, r1	; 0x8008d9 <last_error>
    6c18:	80 e0       	ldi	r24, 0x00	; 0
    6c1a:	c0 5b       	subi	r28, 0xB0	; 176
    6c1c:	df 4f       	sbci	r29, 0xFF	; 255
    6c1e:	0f b6       	in	r0, 0x3f	; 63
    6c20:	f8 94       	cli
    6c22:	de bf       	out	0x3e, r29	; 62
    6c24:	0f be       	out	0x3f, r0	; 63
    6c26:	cd bf       	out	0x3d, r28	; 61
    6c28:	df 91       	pop	r29
    6c2a:	cf 91       	pop	r28
    6c2c:	1f 91       	pop	r17
    6c2e:	0f 91       	pop	r16
    6c30:	ff 90       	pop	r15
    6c32:	ef 90       	pop	r14
    6c34:	df 90       	pop	r13
    6c36:	cf 90       	pop	r12
    6c38:	bf 90       	pop	r11
    6c3a:	af 90       	pop	r10
    6c3c:	9f 90       	pop	r9
    6c3e:	8f 90       	pop	r8
    6c40:	7f 90       	pop	r7
    6c42:	6f 90       	pop	r6
    6c44:	5f 90       	pop	r5
    6c46:	4f 90       	pop	r4
    6c48:	3f 90       	pop	r3
    6c4a:	2f 90       	pop	r2
    6c4c:	08 95       	ret

00006c4e <sanitisePartition>:
    6c4e:	ff 92       	push	r15
    6c50:	0f 93       	push	r16
    6c52:	1f 93       	push	r17
    6c54:	cf 93       	push	r28
    6c56:	df 93       	push	r29
    6c58:	00 d0       	rcall	.+0      	; 0x6c5a <sanitisePartition+0xc>
    6c5a:	00 d0       	rcall	.+0      	; 0x6c5c <sanitisePartition+0xe>
    6c5c:	cd b7       	in	r28, 0x3d	; 61
    6c5e:	de b7       	in	r29, 0x3e	; 62
    6c60:	f8 2e       	mov	r15, r24
    6c62:	68 2f       	mov	r22, r24
    6c64:	ce 01       	movw	r24, r28
    6c66:	01 96       	adiw	r24, 0x01	; 1
    6c68:	4b dd       	rcall	.-1386   	; 0x6700 <nonVolatileGetSize>
    6c6a:	88 23       	and	r24, r24
    6c6c:	21 f0       	breq	.+8      	; 0x6c76 <sanitisePartition+0x28>
    6c6e:	8e e0       	ldi	r24, 0x0E	; 14
    6c70:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    6c74:	0b c0       	rjmp	.+22     	; 0x6c8c <sanitisePartition+0x3e>
    6c76:	09 81       	ldd	r16, Y+1	; 0x01
    6c78:	1a 81       	ldd	r17, Y+2	; 0x02
    6c7a:	2b 81       	ldd	r18, Y+3	; 0x03
    6c7c:	3c 81       	ldd	r19, Y+4	; 0x04
    6c7e:	40 e0       	ldi	r20, 0x00	; 0
    6c80:	50 e0       	ldi	r21, 0x00	; 0
    6c82:	ba 01       	movw	r22, r20
    6c84:	8f 2d       	mov	r24, r15
    6c86:	46 de       	rcall	.-884    	; 0x6914 <sanitiseNonVolatileStorage>
    6c88:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    6c8c:	0f 90       	pop	r0
    6c8e:	0f 90       	pop	r0
    6c90:	0f 90       	pop	r0
    6c92:	0f 90       	pop	r0
    6c94:	df 91       	pop	r29
    6c96:	cf 91       	pop	r28
    6c98:	1f 91       	pop	r17
    6c9a:	0f 91       	pop	r16
    6c9c:	ff 90       	pop	r15
    6c9e:	08 95       	ret

00006ca0 <sanitiseEverything>:
    6ca0:	80 e0       	ldi	r24, 0x00	; 0
    6ca2:	d5 df       	rcall	.-86     	; 0x6c4e <sanitisePartition>
    6ca4:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    6ca8:	81 11       	cpse	r24, r1
    6caa:	04 c0       	rjmp	.+8      	; 0x6cb4 <sanitiseEverything+0x14>
    6cac:	81 e0       	ldi	r24, 0x01	; 1
    6cae:	cf df       	rcall	.-98     	; 0x6c4e <sanitisePartition>
    6cb0:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    6cb4:	80 91 d9 08 	lds	r24, 0x08D9	; 0x8008d9 <last_error>
    6cb8:	08 95       	ret

00006cba <writeCurrentWalletRecord>:
    6cba:	8f 92       	push	r8
    6cbc:	9f 92       	push	r9
    6cbe:	af 92       	push	r10
    6cc0:	bf 92       	push	r11
    6cc2:	ef 92       	push	r14
    6cc4:	ff 92       	push	r15
    6cc6:	0f 93       	push	r16
    6cc8:	1f 93       	push	r17
    6cca:	4b 01       	movw	r8, r22
    6ccc:	5c 01       	movw	r10, r24
    6cce:	10 e4       	ldi	r17, 0x40	; 64
    6cd0:	e1 2e       	mov	r14, r17
    6cd2:	f1 2c       	mov	r15, r1
    6cd4:	00 e0       	ldi	r16, 0x00	; 0
    6cd6:	10 e0       	ldi	r17, 0x00	; 0
    6cd8:	9b 01       	movw	r18, r22
    6cda:	ac 01       	movw	r20, r24
    6cdc:	61 e0       	ldi	r22, 0x01	; 1
    6cde:	87 e2       	ldi	r24, 0x27	; 39
    6ce0:	98 e0       	ldi	r25, 0x08	; 8
    6ce2:	71 dd       	rcall	.-1310   	; 0x67c6 <nonVolatileWrite>
    6ce4:	81 11       	cpse	r24, r1
    6ce6:	12 c0       	rjmp	.+36     	; 0x6d0c <writeCurrentWalletRecord+0x52>
    6ce8:	a5 01       	movw	r20, r10
    6cea:	94 01       	movw	r18, r8
    6cec:	20 5c       	subi	r18, 0xC0	; 192
    6cee:	3f 4f       	sbci	r19, 0xFF	; 255
    6cf0:	4f 4f       	sbci	r20, 0xFF	; 255
    6cf2:	5f 4f       	sbci	r21, 0xFF	; 255
    6cf4:	10 e7       	ldi	r17, 0x70	; 112
    6cf6:	e1 2e       	mov	r14, r17
    6cf8:	f1 2c       	mov	r15, r1
    6cfa:	00 e0       	ldi	r16, 0x00	; 0
    6cfc:	10 e0       	ldi	r17, 0x00	; 0
    6cfe:	61 e0       	ldi	r22, 0x01	; 1
    6d00:	87 e6       	ldi	r24, 0x67	; 103
    6d02:	98 e0       	ldi	r25, 0x08	; 8
    6d04:	74 d5       	rcall	.+2792   	; 0x77ee <encryptedNonVolatileWrite>
    6d06:	81 11       	cpse	r24, r1
    6d08:	03 c0       	rjmp	.+6      	; 0x6d10 <writeCurrentWalletRecord+0x56>
    6d0a:	03 c0       	rjmp	.+6      	; 0x6d12 <writeCurrentWalletRecord+0x58>
    6d0c:	84 e0       	ldi	r24, 0x04	; 4
    6d0e:	01 c0       	rjmp	.+2      	; 0x6d12 <writeCurrentWalletRecord+0x58>
    6d10:	84 e0       	ldi	r24, 0x04	; 4
    6d12:	1f 91       	pop	r17
    6d14:	0f 91       	pop	r16
    6d16:	ff 90       	pop	r15
    6d18:	ef 90       	pop	r14
    6d1a:	bf 90       	pop	r11
    6d1c:	af 90       	pop	r10
    6d1e:	9f 90       	pop	r9
    6d20:	8f 90       	pop	r8
    6d22:	08 95       	ret

00006d24 <makeNewAddress>:
    6d24:	0f 93       	push	r16
    6d26:	1f 93       	push	r17
    6d28:	cf 93       	push	r28
    6d2a:	df 93       	push	r29
    6d2c:	9c 01       	movw	r18, r24
    6d2e:	90 91 d8 08 	lds	r25, 0x08D8	; 0x8008d8 <wallet_loaded>
    6d32:	91 11       	cpse	r25, r1
    6d34:	07 c0       	rjmp	.+14     	; 0x6d44 <makeNewAddress+0x20>
    6d36:	87 e0       	ldi	r24, 0x07	; 7
    6d38:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    6d3c:	6f ef       	ldi	r22, 0xFF	; 255
    6d3e:	7f ef       	ldi	r23, 0xFF	; 255
    6d40:	cb 01       	movw	r24, r22
    6d42:	51 c0       	rjmp	.+162    	; 0x6de6 <makeNewAddress+0xc2>
    6d44:	80 91 67 08 	lds	r24, 0x0867	; 0x800867 <current_wallet+0x40>
    6d48:	90 91 68 08 	lds	r25, 0x0868	; 0x800868 <current_wallet+0x41>
    6d4c:	a0 91 69 08 	lds	r26, 0x0869	; 0x800869 <current_wallet+0x42>
    6d50:	b0 91 6a 08 	lds	r27, 0x086A	; 0x80086a <current_wallet+0x43>
    6d54:	8e 3f       	cpi	r24, 0xFE	; 254
    6d56:	4f ef       	ldi	r20, 0xFF	; 255
    6d58:	94 07       	cpc	r25, r20
    6d5a:	a4 07       	cpc	r26, r20
    6d5c:	b4 07       	cpc	r27, r20
    6d5e:	38 f0       	brcs	.+14     	; 0x6d6e <makeNewAddress+0x4a>
    6d60:	81 e0       	ldi	r24, 0x01	; 1
    6d62:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    6d66:	6f ef       	ldi	r22, 0xFF	; 255
    6d68:	7f ef       	ldi	r23, 0xFF	; 255
    6d6a:	cb 01       	movw	r24, r22
    6d6c:	3c c0       	rjmp	.+120    	; 0x6de6 <makeNewAddress+0xc2>
    6d6e:	8b 01       	movw	r16, r22
    6d70:	e9 01       	movw	r28, r18
    6d72:	01 96       	adiw	r24, 0x01	; 1
    6d74:	a1 1d       	adc	r26, r1
    6d76:	b1 1d       	adc	r27, r1
    6d78:	80 93 67 08 	sts	0x0867, r24	; 0x800867 <current_wallet+0x40>
    6d7c:	90 93 68 08 	sts	0x0868, r25	; 0x800868 <current_wallet+0x41>
    6d80:	a0 93 69 08 	sts	0x0869, r26	; 0x800869 <current_wallet+0x42>
    6d84:	b0 93 6a 08 	sts	0x086A, r27	; 0x80086a <current_wallet+0x43>
    6d88:	87 eb       	ldi	r24, 0xB7	; 183
    6d8a:	98 e0       	ldi	r25, 0x08	; 8
    6d8c:	b9 da       	rcall	.-2702   	; 0x6300 <calculateWalletChecksum>
    6d8e:	60 91 23 08 	lds	r22, 0x0823	; 0x800823 <wallet_nv_address>
    6d92:	70 91 24 08 	lds	r23, 0x0824	; 0x800824 <wallet_nv_address+0x1>
    6d96:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <wallet_nv_address+0x2>
    6d9a:	90 91 26 08 	lds	r25, 0x0826	; 0x800826 <wallet_nv_address+0x3>
    6d9e:	8d df       	rcall	.-230    	; 0x6cba <writeCurrentWalletRecord>
    6da0:	88 23       	and	r24, r24
    6da2:	31 f0       	breq	.+12     	; 0x6db0 <makeNewAddress+0x8c>
    6da4:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    6da8:	6f ef       	ldi	r22, 0xFF	; 255
    6daa:	7f ef       	ldi	r23, 0xFF	; 255
    6dac:	cb 01       	movw	r24, r22
    6dae:	1b c0       	rjmp	.+54     	; 0x6de6 <makeNewAddress+0xc2>
    6db0:	20 91 67 08 	lds	r18, 0x0867	; 0x800867 <current_wallet+0x40>
    6db4:	30 91 68 08 	lds	r19, 0x0868	; 0x800868 <current_wallet+0x41>
    6db8:	40 91 69 08 	lds	r20, 0x0869	; 0x800869 <current_wallet+0x42>
    6dbc:	50 91 6a 08 	lds	r21, 0x086A	; 0x80086a <current_wallet+0x43>
    6dc0:	b8 01       	movw	r22, r16
    6dc2:	ce 01       	movw	r24, r28
    6dc4:	ce db       	rcall	.-2148   	; 0x6562 <getAddressAndPublicKey>
    6dc6:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    6dca:	81 11       	cpse	r24, r1
    6dcc:	09 c0       	rjmp	.+18     	; 0x6de0 <makeNewAddress+0xbc>
    6dce:	60 91 67 08 	lds	r22, 0x0867	; 0x800867 <current_wallet+0x40>
    6dd2:	70 91 68 08 	lds	r23, 0x0868	; 0x800868 <current_wallet+0x41>
    6dd6:	80 91 69 08 	lds	r24, 0x0869	; 0x800869 <current_wallet+0x42>
    6dda:	90 91 6a 08 	lds	r25, 0x086A	; 0x80086a <current_wallet+0x43>
    6dde:	03 c0       	rjmp	.+6      	; 0x6de6 <makeNewAddress+0xc2>
    6de0:	6f ef       	ldi	r22, 0xFF	; 255
    6de2:	7f ef       	ldi	r23, 0xFF	; 255
    6de4:	cb 01       	movw	r24, r22
    6de6:	df 91       	pop	r29
    6de8:	cf 91       	pop	r28
    6dea:	1f 91       	pop	r17
    6dec:	0f 91       	pop	r16
    6dee:	08 95       	ret

00006df0 <changeEncryptionKey>:
    6df0:	9c 01       	movw	r18, r24
    6df2:	90 91 d8 08 	lds	r25, 0x08D8	; 0x8008d8 <wallet_loaded>
    6df6:	91 11       	cpse	r25, r1
    6df8:	04 c0       	rjmp	.+8      	; 0x6e02 <changeEncryptionKey+0x12>
    6dfa:	87 e0       	ldi	r24, 0x07	; 7
    6dfc:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    6e00:	08 95       	ret
    6e02:	ab 01       	movw	r20, r22
    6e04:	b9 01       	movw	r22, r18
    6e06:	87 e5       	ldi	r24, 0x57	; 87
    6e08:	98 e0       	ldi	r25, 0x08	; 8
    6e0a:	49 da       	rcall	.-2926   	; 0x629e <deriveAndSetEncryptionKey>
    6e0c:	80 91 d7 08 	lds	r24, 0x08D7	; 0x8008d7 <is_hidden_wallet>
    6e10:	81 11       	cpse	r24, r1
    6e12:	06 c0       	rjmp	.+12     	; 0x6e20 <changeEncryptionKey+0x30>
    6e14:	b5 da       	rcall	.-2710   	; 0x6380 <updateWalletVersion>
    6e16:	88 23       	and	r24, r24
    6e18:	19 f0       	breq	.+6      	; 0x6e20 <changeEncryptionKey+0x30>
    6e1a:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    6e1e:	08 95       	ret
    6e20:	87 eb       	ldi	r24, 0xB7	; 183
    6e22:	98 e0       	ldi	r25, 0x08	; 8
    6e24:	6d da       	rcall	.-2854   	; 0x6300 <calculateWalletChecksum>
    6e26:	60 91 23 08 	lds	r22, 0x0823	; 0x800823 <wallet_nv_address>
    6e2a:	70 91 24 08 	lds	r23, 0x0824	; 0x800824 <wallet_nv_address+0x1>
    6e2e:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <wallet_nv_address+0x2>
    6e32:	90 91 26 08 	lds	r25, 0x0826	; 0x800826 <wallet_nv_address+0x3>
    6e36:	41 df       	rcall	.-382    	; 0x6cba <writeCurrentWalletRecord>
    6e38:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    6e3c:	08 95       	ret

00006e3e <changeWalletName>:
    6e3e:	fc 01       	movw	r30, r24
    6e40:	90 91 d8 08 	lds	r25, 0x08D8	; 0x8008d8 <wallet_loaded>
    6e44:	91 11       	cpse	r25, r1
    6e46:	04 c0       	rjmp	.+8      	; 0x6e50 <changeWalletName+0x12>
    6e48:	87 e0       	ldi	r24, 0x07	; 7
    6e4a:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    6e4e:	08 95       	ret
    6e50:	80 91 d7 08 	lds	r24, 0x08D7	; 0x8008d7 <is_hidden_wallet>
    6e54:	88 23       	and	r24, r24
    6e56:	21 f0       	breq	.+8      	; 0x6e60 <changeWalletName+0x22>
    6e58:	8c e0       	ldi	r24, 0x0C	; 12
    6e5a:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    6e5e:	08 95       	ret
    6e60:	88 e2       	ldi	r24, 0x28	; 40
    6e62:	af e2       	ldi	r26, 0x2F	; 47
    6e64:	b8 e0       	ldi	r27, 0x08	; 8
    6e66:	01 90       	ld	r0, Z+
    6e68:	0d 92       	st	X+, r0
    6e6a:	8a 95       	dec	r24
    6e6c:	e1 f7       	brne	.-8      	; 0x6e66 <changeWalletName+0x28>
    6e6e:	87 eb       	ldi	r24, 0xB7	; 183
    6e70:	98 e0       	ldi	r25, 0x08	; 8
    6e72:	46 da       	rcall	.-2932   	; 0x6300 <calculateWalletChecksum>
    6e74:	60 91 23 08 	lds	r22, 0x0823	; 0x800823 <wallet_nv_address>
    6e78:	70 91 24 08 	lds	r23, 0x0824	; 0x800824 <wallet_nv_address+0x1>
    6e7c:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <wallet_nv_address+0x2>
    6e80:	90 91 26 08 	lds	r25, 0x0826	; 0x800826 <wallet_nv_address+0x3>
    6e84:	1a df       	rcall	.-460    	; 0x6cba <writeCurrentWalletRecord>
    6e86:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    6e8a:	08 95       	ret

00006e8c <nonVolatileRead>:
    6e8c:	8f 92       	push	r8
    6e8e:	9f 92       	push	r9
    6e90:	af 92       	push	r10
    6e92:	bf 92       	push	r11
    6e94:	cf 92       	push	r12
    6e96:	df 92       	push	r13
    6e98:	ef 92       	push	r14
    6e9a:	ff 92       	push	r15
    6e9c:	0f 93       	push	r16
    6e9e:	1f 93       	push	r17
    6ea0:	cf 93       	push	r28
    6ea2:	df 93       	push	r29
    6ea4:	cd b7       	in	r28, 0x3d	; 61
    6ea6:	de b7       	in	r29, 0x3e	; 62
    6ea8:	28 97       	sbiw	r28, 0x08	; 8
    6eaa:	0f b6       	in	r0, 0x3f	; 63
    6eac:	f8 94       	cli
    6eae:	de bf       	out	0x3e, r29	; 62
    6eb0:	0f be       	out	0x3f, r0	; 63
    6eb2:	cd bf       	out	0x3d, r28	; 61
    6eb4:	21 30       	cpi	r18, 0x01	; 1
    6eb6:	31 05       	cpc	r19, r1
    6eb8:	41 05       	cpc	r20, r1
    6eba:	80 e1       	ldi	r24, 0x10	; 16
    6ebc:	58 07       	cpc	r21, r24
    6ebe:	48 f5       	brcc	.+82     	; 0x6f12 <nonVolatileRead+0x86>
    6ec0:	81 e0       	ldi	r24, 0x01	; 1
    6ec2:	e8 16       	cp	r14, r24
    6ec4:	f1 04       	cpc	r15, r1
    6ec6:	01 05       	cpc	r16, r1
    6ec8:	80 e1       	ldi	r24, 0x10	; 16
    6eca:	18 07       	cpc	r17, r24
    6ecc:	20 f5       	brcc	.+72     	; 0x6f16 <nonVolatileRead+0x8a>
    6ece:	47 01       	movw	r8, r14
    6ed0:	58 01       	movw	r10, r16
    6ed2:	69 01       	movw	r12, r18
    6ed4:	7a 01       	movw	r14, r20
    6ed6:	16 2f       	mov	r17, r22
    6ed8:	ce 01       	movw	r24, r28
    6eda:	05 96       	adiw	r24, 0x05	; 5
    6edc:	11 dc       	rcall	.-2014   	; 0x6700 <nonVolatileGetSize>
    6ede:	81 11       	cpse	r24, r1
    6ee0:	1f c0       	rjmp	.+62     	; 0x6f20 <nonVolatileRead+0x94>
    6ee2:	b7 01       	movw	r22, r14
    6ee4:	a6 01       	movw	r20, r12
    6ee6:	48 0d       	add	r20, r8
    6ee8:	59 1d       	adc	r21, r9
    6eea:	6a 1d       	adc	r22, r10
    6eec:	7b 1d       	adc	r23, r11
    6eee:	8d 81       	ldd	r24, Y+5	; 0x05
    6ef0:	9e 81       	ldd	r25, Y+6	; 0x06
    6ef2:	af 81       	ldd	r26, Y+7	; 0x07
    6ef4:	b8 85       	ldd	r27, Y+8	; 0x08
    6ef6:	84 17       	cp	r24, r20
    6ef8:	95 07       	cpc	r25, r21
    6efa:	a6 07       	cpc	r26, r22
    6efc:	b7 07       	cpc	r27, r23
    6efe:	68 f0       	brcs	.+26     	; 0x6f1a <nonVolatileRead+0x8e>
    6f00:	11 23       	and	r17, r17
    6f02:	69 f0       	breq	.+26     	; 0x6f1e <nonVolatileRead+0x92>
    6f04:	60 e0       	ldi	r22, 0x00	; 0
    6f06:	ce 01       	movw	r24, r28
    6f08:	01 96       	adiw	r24, 0x01	; 1
    6f0a:	fa db       	rcall	.-2060   	; 0x6700 <nonVolatileGetSize>
    6f0c:	88 23       	and	r24, r24
    6f0e:	41 f0       	breq	.+16     	; 0x6f20 <nonVolatileRead+0x94>
    6f10:	e9 d6       	rcall	.+3538   	; 0x7ce4 <abort>
    6f12:	81 e0       	ldi	r24, 0x01	; 1
    6f14:	05 c0       	rjmp	.+10     	; 0x6f20 <nonVolatileRead+0x94>
    6f16:	81 e0       	ldi	r24, 0x01	; 1
    6f18:	03 c0       	rjmp	.+6      	; 0x6f20 <nonVolatileRead+0x94>
    6f1a:	81 e0       	ldi	r24, 0x01	; 1
    6f1c:	01 c0       	rjmp	.+2      	; 0x6f20 <nonVolatileRead+0x94>
    6f1e:	80 e0       	ldi	r24, 0x00	; 0
    6f20:	28 96       	adiw	r28, 0x08	; 8
    6f22:	0f b6       	in	r0, 0x3f	; 63
    6f24:	f8 94       	cli
    6f26:	de bf       	out	0x3e, r29	; 62
    6f28:	0f be       	out	0x3f, r0	; 63
    6f2a:	cd bf       	out	0x3d, r28	; 61
    6f2c:	df 91       	pop	r29
    6f2e:	cf 91       	pop	r28
    6f30:	1f 91       	pop	r17
    6f32:	0f 91       	pop	r16
    6f34:	ff 90       	pop	r15
    6f36:	ef 90       	pop	r14
    6f38:	df 90       	pop	r13
    6f3a:	cf 90       	pop	r12
    6f3c:	bf 90       	pop	r11
    6f3e:	af 90       	pop	r10
    6f40:	9f 90       	pop	r9
    6f42:	8f 90       	pop	r8
    6f44:	08 95       	ret

00006f46 <readWalletRecord>:
    6f46:	8f 92       	push	r8
    6f48:	9f 92       	push	r9
    6f4a:	af 92       	push	r10
    6f4c:	bf 92       	push	r11
    6f4e:	ef 92       	push	r14
    6f50:	ff 92       	push	r15
    6f52:	0f 93       	push	r16
    6f54:	1f 93       	push	r17
    6f56:	cf 93       	push	r28
    6f58:	df 93       	push	r29
    6f5a:	ec 01       	movw	r28, r24
    6f5c:	4a 01       	movw	r8, r20
    6f5e:	5b 01       	movw	r10, r22
    6f60:	10 e4       	ldi	r17, 0x40	; 64
    6f62:	e1 2e       	mov	r14, r17
    6f64:	f1 2c       	mov	r15, r1
    6f66:	00 e0       	ldi	r16, 0x00	; 0
    6f68:	10 e0       	ldi	r17, 0x00	; 0
    6f6a:	9a 01       	movw	r18, r20
    6f6c:	ab 01       	movw	r20, r22
    6f6e:	61 e0       	ldi	r22, 0x01	; 1
    6f70:	8d df       	rcall	.-230    	; 0x6e8c <nonVolatileRead>
    6f72:	81 11       	cpse	r24, r1
    6f74:	13 c0       	rjmp	.+38     	; 0x6f9c <readWalletRecord+0x56>
    6f76:	a5 01       	movw	r20, r10
    6f78:	94 01       	movw	r18, r8
    6f7a:	20 5c       	subi	r18, 0xC0	; 192
    6f7c:	3f 4f       	sbci	r19, 0xFF	; 255
    6f7e:	4f 4f       	sbci	r20, 0xFF	; 255
    6f80:	5f 4f       	sbci	r21, 0xFF	; 255
    6f82:	10 e7       	ldi	r17, 0x70	; 112
    6f84:	e1 2e       	mov	r14, r17
    6f86:	f1 2c       	mov	r15, r1
    6f88:	00 e0       	ldi	r16, 0x00	; 0
    6f8a:	10 e0       	ldi	r17, 0x00	; 0
    6f8c:	61 e0       	ldi	r22, 0x01	; 1
    6f8e:	ce 01       	movw	r24, r28
    6f90:	80 5c       	subi	r24, 0xC0	; 192
    6f92:	9f 4f       	sbci	r25, 0xFF	; 255
    6f94:	00 d5       	rcall	.+2560   	; 0x7996 <encryptedNonVolatileRead>
    6f96:	81 11       	cpse	r24, r1
    6f98:	03 c0       	rjmp	.+6      	; 0x6fa0 <readWalletRecord+0x5a>
    6f9a:	03 c0       	rjmp	.+6      	; 0x6fa2 <readWalletRecord+0x5c>
    6f9c:	83 e0       	ldi	r24, 0x03	; 3
    6f9e:	01 c0       	rjmp	.+2      	; 0x6fa2 <readWalletRecord+0x5c>
    6fa0:	83 e0       	ldi	r24, 0x03	; 3
    6fa2:	df 91       	pop	r29
    6fa4:	cf 91       	pop	r28
    6fa6:	1f 91       	pop	r17
    6fa8:	0f 91       	pop	r16
    6faa:	ff 90       	pop	r15
    6fac:	ef 90       	pop	r14
    6fae:	bf 90       	pop	r11
    6fb0:	af 90       	pop	r10
    6fb2:	9f 90       	pop	r9
    6fb4:	8f 90       	pop	r8
    6fb6:	08 95       	ret

00006fb8 <getWalletInfo>:
    6fb8:	4f 92       	push	r4
    6fba:	5f 92       	push	r5
    6fbc:	6f 92       	push	r6
    6fbe:	7f 92       	push	r7
    6fc0:	af 92       	push	r10
    6fc2:	bf 92       	push	r11
    6fc4:	cf 92       	push	r12
    6fc6:	df 92       	push	r13
    6fc8:	ef 92       	push	r14
    6fca:	ff 92       	push	r15
    6fcc:	0f 93       	push	r16
    6fce:	1f 93       	push	r17
    6fd0:	cf 93       	push	r28
    6fd2:	df 93       	push	r29
    6fd4:	cd b7       	in	r28, 0x3d	; 61
    6fd6:	de b7       	in	r29, 0x3e	; 62
    6fd8:	c0 5b       	subi	r28, 0xB0	; 176
    6fda:	d1 09       	sbc	r29, r1
    6fdc:	0f b6       	in	r0, 0x3f	; 63
    6fde:	f8 94       	cli
    6fe0:	de bf       	out	0x3e, r29	; 62
    6fe2:	0f be       	out	0x3f, r0	; 63
    6fe4:	cd bf       	out	0x3d, r28	; 61
    6fe6:	5c 01       	movw	r10, r24
    6fe8:	6b 01       	movw	r12, r22
    6fea:	7a 01       	movw	r14, r20
    6fec:	28 01       	movw	r4, r16
    6fee:	39 01       	movw	r6, r18
    6ff0:	a3 db       	rcall	.-2234   	; 0x6738 <getNumberOfWallets>
    6ff2:	67 2b       	or	r22, r23
    6ff4:	68 2b       	or	r22, r24
    6ff6:	69 2b       	or	r22, r25
    6ff8:	19 f4       	brne	.+6      	; 0x7000 <getWalletInfo+0x48>
    6ffa:	80 91 d9 08 	lds	r24, 0x08D9	; 0x8008d9 <last_error>
    6ffe:	3c c0       	rjmp	.+120    	; 0x7078 <getWalletInfo+0xc0>
    7000:	80 91 1f 08 	lds	r24, 0x081F	; 0x80081f <num_wallets>
    7004:	90 91 20 08 	lds	r25, 0x0820	; 0x800820 <num_wallets+0x1>
    7008:	a0 91 21 08 	lds	r26, 0x0821	; 0x800821 <num_wallets+0x2>
    700c:	b0 91 22 08 	lds	r27, 0x0822	; 0x800822 <num_wallets+0x3>
    7010:	48 16       	cp	r4, r24
    7012:	59 06       	cpc	r5, r25
    7014:	6a 06       	cpc	r6, r26
    7016:	7b 06       	cpc	r7, r27
    7018:	20 f0       	brcs	.+8      	; 0x7022 <getWalletInfo+0x6a>
    701a:	8b e0       	ldi	r24, 0x0B	; 11
    701c:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    7020:	2b c0       	rjmp	.+86     	; 0x7078 <getWalletInfo+0xc0>
    7022:	a0 eb       	ldi	r26, 0xB0	; 176
    7024:	b0 e0       	ldi	r27, 0x00	; 0
    7026:	a3 01       	movw	r20, r6
    7028:	92 01       	movw	r18, r4
    702a:	93 d5       	rcall	.+2854   	; 0x7b52 <__muluhisi3>
    702c:	ab 01       	movw	r20, r22
    702e:	bc 01       	movw	r22, r24
    7030:	ce 01       	movw	r24, r28
    7032:	01 96       	adiw	r24, 0x01	; 1
    7034:	88 df       	rcall	.-240    	; 0x6f46 <readWalletRecord>
    7036:	88 23       	and	r24, r24
    7038:	19 f0       	breq	.+6      	; 0x7040 <getWalletInfo+0x88>
    703a:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    703e:	1c c0       	rjmp	.+56     	; 0x7078 <getWalletInfo+0xc0>
    7040:	89 81       	ldd	r24, Y+1	; 0x01
    7042:	9a 81       	ldd	r25, Y+2	; 0x02
    7044:	ab 81       	ldd	r26, Y+3	; 0x03
    7046:	bc 81       	ldd	r27, Y+4	; 0x04
    7048:	f5 01       	movw	r30, r10
    704a:	80 83       	st	Z, r24
    704c:	91 83       	std	Z+1, r25	; 0x01
    704e:	a2 83       	std	Z+2, r26	; 0x02
    7050:	b3 83       	std	Z+3, r27	; 0x03
    7052:	88 e2       	ldi	r24, 0x28	; 40
    7054:	fe 01       	movw	r30, r28
    7056:	39 96       	adiw	r30, 0x09	; 9
    7058:	d6 01       	movw	r26, r12
    705a:	01 90       	ld	r0, Z+
    705c:	0d 92       	st	X+, r0
    705e:	8a 95       	dec	r24
    7060:	e1 f7       	brne	.-8      	; 0x705a <getWalletInfo+0xa2>
    7062:	80 e1       	ldi	r24, 0x10	; 16
    7064:	fe 01       	movw	r30, r28
    7066:	f1 96       	adiw	r30, 0x31	; 49
    7068:	d7 01       	movw	r26, r14
    706a:	01 90       	ld	r0, Z+
    706c:	0d 92       	st	X+, r0
    706e:	8a 95       	dec	r24
    7070:	e1 f7       	brne	.-8      	; 0x706a <getWalletInfo+0xb2>
    7072:	10 92 d9 08 	sts	0x08D9, r1	; 0x8008d9 <last_error>
    7076:	80 e0       	ldi	r24, 0x00	; 0
    7078:	c0 55       	subi	r28, 0x50	; 80
    707a:	df 4f       	sbci	r29, 0xFF	; 255
    707c:	0f b6       	in	r0, 0x3f	; 63
    707e:	f8 94       	cli
    7080:	de bf       	out	0x3e, r29	; 62
    7082:	0f be       	out	0x3f, r0	; 63
    7084:	cd bf       	out	0x3d, r28	; 61
    7086:	df 91       	pop	r29
    7088:	cf 91       	pop	r28
    708a:	1f 91       	pop	r17
    708c:	0f 91       	pop	r16
    708e:	ff 90       	pop	r15
    7090:	ef 90       	pop	r14
    7092:	df 90       	pop	r13
    7094:	cf 90       	pop	r12
    7096:	bf 90       	pop	r11
    7098:	af 90       	pop	r10
    709a:	7f 90       	pop	r7
    709c:	6f 90       	pop	r6
    709e:	5f 90       	pop	r5
    70a0:	4f 90       	pop	r4
    70a2:	08 95       	ret

000070a4 <initWallet>:
    70a4:	4f 92       	push	r4
    70a6:	5f 92       	push	r5
    70a8:	6f 92       	push	r6
    70aa:	7f 92       	push	r7
    70ac:	8f 92       	push	r8
    70ae:	9f 92       	push	r9
    70b0:	af 92       	push	r10
    70b2:	bf 92       	push	r11
    70b4:	df 92       	push	r13
    70b6:	ef 92       	push	r14
    70b8:	ff 92       	push	r15
    70ba:	0f 93       	push	r16
    70bc:	1f 93       	push	r17
    70be:	cf 93       	push	r28
    70c0:	df 93       	push	r29
    70c2:	cd b7       	in	r28, 0x3d	; 61
    70c4:	de b7       	in	r29, 0x3e	; 62
    70c6:	e0 97       	sbiw	r28, 0x30	; 48
    70c8:	0f b6       	in	r0, 0x3f	; 63
    70ca:	f8 94       	cli
    70cc:	de bf       	out	0x3e, r29	; 62
    70ce:	0f be       	out	0x3f, r0	; 63
    70d0:	cd bf       	out	0x3d, r28	; 61
    70d2:	2b 01       	movw	r4, r22
    70d4:	3c 01       	movw	r6, r24
    70d6:	5a 01       	movw	r10, r20
    70d8:	49 01       	movw	r8, r18
    70da:	7b d9       	rcall	.-3338   	; 0x63d2 <uninitWallet>
    70dc:	d8 2e       	mov	r13, r24
    70de:	88 23       	and	r24, r24
    70e0:	19 f0       	breq	.+6      	; 0x70e8 <initWallet+0x44>
    70e2:	d0 90 d9 08 	lds	r13, 0x08D9	; 0x8008d9 <last_error>
    70e6:	95 c0       	rjmp	.+298    	; 0x7212 <initWallet+0x16e>
    70e8:	27 db       	rcall	.-2482   	; 0x6738 <getNumberOfWallets>
    70ea:	67 2b       	or	r22, r23
    70ec:	68 2b       	or	r22, r24
    70ee:	69 2b       	or	r22, r25
    70f0:	19 f4       	brne	.+6      	; 0x70f8 <initWallet+0x54>
    70f2:	d0 90 d9 08 	lds	r13, 0x08D9	; 0x8008d9 <last_error>
    70f6:	8d c0       	rjmp	.+282    	; 0x7212 <initWallet+0x16e>
    70f8:	80 91 1f 08 	lds	r24, 0x081F	; 0x80081f <num_wallets>
    70fc:	90 91 20 08 	lds	r25, 0x0820	; 0x800820 <num_wallets+0x1>
    7100:	a0 91 21 08 	lds	r26, 0x0821	; 0x800821 <num_wallets+0x2>
    7104:	b0 91 22 08 	lds	r27, 0x0822	; 0x800822 <num_wallets+0x3>
    7108:	48 16       	cp	r4, r24
    710a:	59 06       	cpc	r5, r25
    710c:	6a 06       	cpc	r6, r26
    710e:	7b 06       	cpc	r7, r27
    7110:	40 f0       	brcs	.+16     	; 0x7122 <initWallet+0x7e>
    7112:	8b e0       	ldi	r24, 0x0B	; 11
    7114:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    7118:	0f 2e       	mov	r0, r31
    711a:	fb e0       	ldi	r31, 0x0B	; 11
    711c:	df 2e       	mov	r13, r31
    711e:	f0 2d       	mov	r31, r0
    7120:	78 c0       	rjmp	.+240    	; 0x7212 <initWallet+0x16e>
    7122:	a0 eb       	ldi	r26, 0xB0	; 176
    7124:	b0 e0       	ldi	r27, 0x00	; 0
    7126:	a3 01       	movw	r20, r6
    7128:	92 01       	movw	r18, r4
    712a:	13 d5       	rcall	.+2598   	; 0x7b52 <__muluhisi3>
    712c:	60 93 23 08 	sts	0x0823, r22	; 0x800823 <wallet_nv_address>
    7130:	70 93 24 08 	sts	0x0824, r23	; 0x800824 <wallet_nv_address+0x1>
    7134:	80 93 25 08 	sts	0x0825, r24	; 0x800825 <wallet_nv_address+0x2>
    7138:	90 93 26 08 	sts	0x0826, r25	; 0x800826 <wallet_nv_address+0x3>
    713c:	9b 01       	movw	r18, r22
    713e:	ac 01       	movw	r20, r24
    7140:	20 5d       	subi	r18, 0xD0	; 208
    7142:	3f 4f       	sbci	r19, 0xFF	; 255
    7144:	4f 4f       	sbci	r20, 0xFF	; 255
    7146:	5f 4f       	sbci	r21, 0xFF	; 255
    7148:	10 e1       	ldi	r17, 0x10	; 16
    714a:	e1 2e       	mov	r14, r17
    714c:	f1 2c       	mov	r15, r1
    714e:	00 e0       	ldi	r16, 0x00	; 0
    7150:	10 e0       	ldi	r17, 0x00	; 0
    7152:	61 e0       	ldi	r22, 0x01	; 1
    7154:	ce 01       	movw	r24, r28
    7156:	81 96       	adiw	r24, 0x21	; 33
    7158:	99 de       	rcall	.-718    	; 0x6e8c <nonVolatileRead>
    715a:	88 23       	and	r24, r24
    715c:	41 f0       	breq	.+16     	; 0x716e <initWallet+0xca>
    715e:	83 e0       	ldi	r24, 0x03	; 3
    7160:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    7164:	0f 2e       	mov	r0, r31
    7166:	f3 e0       	ldi	r31, 0x03	; 3
    7168:	df 2e       	mov	r13, r31
    716a:	f0 2d       	mov	r31, r0
    716c:	52 c0       	rjmp	.+164    	; 0x7212 <initWallet+0x16e>
    716e:	a4 01       	movw	r20, r8
    7170:	b5 01       	movw	r22, r10
    7172:	ce 01       	movw	r24, r28
    7174:	81 96       	adiw	r24, 0x21	; 33
    7176:	93 d8       	rcall	.-3802   	; 0x629e <deriveAndSetEncryptionKey>
    7178:	40 91 23 08 	lds	r20, 0x0823	; 0x800823 <wallet_nv_address>
    717c:	50 91 24 08 	lds	r21, 0x0824	; 0x800824 <wallet_nv_address+0x1>
    7180:	60 91 25 08 	lds	r22, 0x0825	; 0x800825 <wallet_nv_address+0x2>
    7184:	70 91 26 08 	lds	r23, 0x0826	; 0x800826 <wallet_nv_address+0x3>
    7188:	87 e2       	ldi	r24, 0x27	; 39
    718a:	98 e0       	ldi	r25, 0x08	; 8
    718c:	dc de       	rcall	.-584    	; 0x6f46 <readWalletRecord>
    718e:	88 23       	and	r24, r24
    7190:	21 f0       	breq	.+8      	; 0x719a <initWallet+0xf6>
    7192:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    7196:	d8 2e       	mov	r13, r24
    7198:	3c c0       	rjmp	.+120    	; 0x7212 <initWallet+0x16e>
    719a:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <current_wallet>
    719e:	90 91 28 08 	lds	r25, 0x0828	; 0x800828 <current_wallet+0x1>
    71a2:	a0 91 29 08 	lds	r26, 0x0829	; 0x800829 <current_wallet+0x2>
    71a6:	b0 91 2a 08 	lds	r27, 0x082A	; 0x80082a <current_wallet+0x3>
    71aa:	00 97       	sbiw	r24, 0x00	; 0
    71ac:	a1 05       	cpc	r26, r1
    71ae:	b1 05       	cpc	r27, r1
    71b0:	21 f4       	brne	.+8      	; 0x71ba <initWallet+0x116>
    71b2:	81 e0       	ldi	r24, 0x01	; 1
    71b4:	80 93 d7 08 	sts	0x08D7, r24	; 0x8008d7 <is_hidden_wallet>
    71b8:	12 c0       	rjmp	.+36     	; 0x71de <initWallet+0x13a>
    71ba:	02 97       	sbiw	r24, 0x02	; 2
    71bc:	a1 09       	sbc	r26, r1
    71be:	b1 09       	sbc	r27, r1
    71c0:	02 97       	sbiw	r24, 0x02	; 2
    71c2:	a1 05       	cpc	r26, r1
    71c4:	b1 05       	cpc	r27, r1
    71c6:	18 f4       	brcc	.+6      	; 0x71ce <initWallet+0x12a>
    71c8:	10 92 d7 08 	sts	0x08D7, r1	; 0x8008d7 <is_hidden_wallet>
    71cc:	08 c0       	rjmp	.+16     	; 0x71de <initWallet+0x13a>
    71ce:	86 e0       	ldi	r24, 0x06	; 6
    71d0:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    71d4:	0f 2e       	mov	r0, r31
    71d6:	f6 e0       	ldi	r31, 0x06	; 6
    71d8:	df 2e       	mov	r13, r31
    71da:	f0 2d       	mov	r31, r0
    71dc:	1a c0       	rjmp	.+52     	; 0x7212 <initWallet+0x16e>
    71de:	ce 01       	movw	r24, r28
    71e0:	01 96       	adiw	r24, 0x01	; 1
    71e2:	8e d8       	rcall	.-3812   	; 0x6300 <calculateWalletChecksum>
    71e4:	40 e2       	ldi	r20, 0x20	; 32
    71e6:	be 01       	movw	r22, r28
    71e8:	6f 5f       	subi	r22, 0xFF	; 255
    71ea:	7f 4f       	sbci	r23, 0xFF	; 255
    71ec:	87 eb       	ldi	r24, 0xB7	; 183
    71ee:	98 e0       	ldi	r25, 0x08	; 8
    71f0:	0e 94 7e 05 	call	0xafc	; 0xafc <bigCompareVariableSize>
    71f4:	88 23       	and	r24, r24
    71f6:	41 f0       	breq	.+16     	; 0x7208 <initWallet+0x164>
    71f8:	86 e0       	ldi	r24, 0x06	; 6
    71fa:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    71fe:	0f 2e       	mov	r0, r31
    7200:	f6 e0       	ldi	r31, 0x06	; 6
    7202:	df 2e       	mov	r13, r31
    7204:	f0 2d       	mov	r31, r0
    7206:	05 c0       	rjmp	.+10     	; 0x7212 <initWallet+0x16e>
    7208:	81 e0       	ldi	r24, 0x01	; 1
    720a:	80 93 d8 08 	sts	0x08D8, r24	; 0x8008d8 <wallet_loaded>
    720e:	10 92 d9 08 	sts	0x08D9, r1	; 0x8008d9 <last_error>
    7212:	8d 2d       	mov	r24, r13
    7214:	e0 96       	adiw	r28, 0x30	; 48
    7216:	0f b6       	in	r0, 0x3f	; 63
    7218:	f8 94       	cli
    721a:	de bf       	out	0x3e, r29	; 62
    721c:	0f be       	out	0x3f, r0	; 63
    721e:	cd bf       	out	0x3d, r28	; 61
    7220:	df 91       	pop	r29
    7222:	cf 91       	pop	r28
    7224:	1f 91       	pop	r17
    7226:	0f 91       	pop	r16
    7228:	ff 90       	pop	r15
    722a:	ef 90       	pop	r14
    722c:	df 90       	pop	r13
    722e:	bf 90       	pop	r11
    7230:	af 90       	pop	r10
    7232:	9f 90       	pop	r9
    7234:	8f 90       	pop	r8
    7236:	7f 90       	pop	r7
    7238:	6f 90       	pop	r6
    723a:	5f 90       	pop	r5
    723c:	4f 90       	pop	r4
    723e:	08 95       	ret

00007240 <newWallet>:
    7240:	4f 92       	push	r4
    7242:	5f 92       	push	r5
    7244:	6f 92       	push	r6
    7246:	7f 92       	push	r7
    7248:	8f 92       	push	r8
    724a:	9f 92       	push	r9
    724c:	af 92       	push	r10
    724e:	bf 92       	push	r11
    7250:	cf 92       	push	r12
    7252:	df 92       	push	r13
    7254:	ef 92       	push	r14
    7256:	ff 92       	push	r15
    7258:	0f 93       	push	r16
    725a:	1f 93       	push	r17
    725c:	cf 93       	push	r28
    725e:	df 93       	push	r29
    7260:	cd b7       	in	r28, 0x3d	; 61
    7262:	de b7       	in	r29, 0x3e	; 62
    7264:	e0 97       	sbiw	r28, 0x30	; 48
    7266:	0f b6       	in	r0, 0x3f	; 63
    7268:	f8 94       	cli
    726a:	de bf       	out	0x3e, r29	; 62
    726c:	0f be       	out	0x3f, r0	; 63
    726e:	cd bf       	out	0x3d, r28	; 61
    7270:	2b 01       	movw	r4, r22
    7272:	3c 01       	movw	r6, r24
    7274:	4a 01       	movw	r8, r20
    7276:	f2 2e       	mov	r15, r18
    7278:	ac d8       	rcall	.-3752   	; 0x63d2 <uninitWallet>
    727a:	88 23       	and	r24, r24
    727c:	19 f0       	breq	.+6      	; 0x7284 <newWallet+0x44>
    727e:	80 91 d9 08 	lds	r24, 0x08D9	; 0x8008d9 <last_error>
    7282:	f5 c0       	rjmp	.+490    	; 0x746e <newWallet+0x22e>
    7284:	59 da       	rcall	.-2894   	; 0x6738 <getNumberOfWallets>
    7286:	67 2b       	or	r22, r23
    7288:	68 2b       	or	r22, r24
    728a:	69 2b       	or	r22, r25
    728c:	19 f4       	brne	.+6      	; 0x7294 <newWallet+0x54>
    728e:	80 91 d9 08 	lds	r24, 0x08D9	; 0x8008d9 <last_error>
    7292:	ed c0       	rjmp	.+474    	; 0x746e <newWallet+0x22e>
    7294:	80 91 1f 08 	lds	r24, 0x081F	; 0x80081f <num_wallets>
    7298:	90 91 20 08 	lds	r25, 0x0820	; 0x800820 <num_wallets+0x1>
    729c:	a0 91 21 08 	lds	r26, 0x0821	; 0x800821 <num_wallets+0x2>
    72a0:	b0 91 22 08 	lds	r27, 0x0822	; 0x800822 <num_wallets+0x3>
    72a4:	48 16       	cp	r4, r24
    72a6:	59 06       	cpc	r5, r25
    72a8:	6a 06       	cpc	r6, r26
    72aa:	7b 06       	cpc	r7, r27
    72ac:	20 f0       	brcs	.+8      	; 0x72b6 <newWallet+0x76>
    72ae:	8b e0       	ldi	r24, 0x0B	; 11
    72b0:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    72b4:	dc c0       	rjmp	.+440    	; 0x746e <newWallet+0x22e>
    72b6:	a0 eb       	ldi	r26, 0xB0	; 176
    72b8:	b0 e0       	ldi	r27, 0x00	; 0
    72ba:	a3 01       	movw	r20, r6
    72bc:	92 01       	movw	r18, r4
    72be:	49 d4       	rcall	.+2194   	; 0x7b52 <__muluhisi3>
    72c0:	ab 01       	movw	r20, r22
    72c2:	bc 01       	movw	r22, r24
    72c4:	40 93 23 08 	sts	0x0823, r20	; 0x800823 <wallet_nv_address>
    72c8:	50 93 24 08 	sts	0x0824, r21	; 0x800824 <wallet_nv_address+0x1>
    72cc:	60 93 25 08 	sts	0x0825, r22	; 0x800825 <wallet_nv_address+0x2>
    72d0:	70 93 26 08 	sts	0x0826, r23	; 0x800826 <wallet_nv_address+0x3>
    72d4:	87 e2       	ldi	r24, 0x27	; 39
    72d6:	98 e0       	ldi	r25, 0x08	; 8
    72d8:	36 de       	rcall	.-916    	; 0x6f46 <readWalletRecord>
    72da:	88 23       	and	r24, r24
    72dc:	19 f0       	breq	.+6      	; 0x72e4 <newWallet+0xa4>
    72de:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    72e2:	c5 c0       	rjmp	.+394    	; 0x746e <newWallet+0x22e>
    72e4:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <current_wallet>
    72e8:	90 91 28 08 	lds	r25, 0x0828	; 0x800828 <current_wallet+0x1>
    72ec:	a0 91 29 08 	lds	r26, 0x0829	; 0x800829 <current_wallet+0x2>
    72f0:	b0 91 2a 08 	lds	r27, 0x082A	; 0x80082a <current_wallet+0x3>
    72f4:	89 2b       	or	r24, r25
    72f6:	8a 2b       	or	r24, r26
    72f8:	8b 2b       	or	r24, r27
    72fa:	21 f0       	breq	.+8      	; 0x7304 <newWallet+0xc4>
    72fc:	8d e0       	ldi	r24, 0x0D	; 13
    72fe:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    7302:	b5 c0       	rjmp	.+362    	; 0x746e <newWallet+0x22e>
    7304:	ee 20       	and	r14, r14
    7306:	81 f0       	breq	.+32     	; 0x7328 <newWallet+0xe8>
    7308:	80 e1       	ldi	r24, 0x10	; 16
    730a:	e7 e5       	ldi	r30, 0x57	; 87
    730c:	f8 e0       	ldi	r31, 0x08	; 8
    730e:	de 01       	movw	r26, r28
    7310:	91 96       	adiw	r26, 0x21	; 33
    7312:	01 90       	ld	r0, Z+
    7314:	0d 92       	st	X+, r0
    7316:	8a 95       	dec	r24
    7318:	e1 f7       	brne	.-8      	; 0x7312 <newWallet+0xd2>
    731a:	a5 01       	movw	r20, r10
    731c:	b6 01       	movw	r22, r12
    731e:	ce 01       	movw	r24, r28
    7320:	81 96       	adiw	r24, 0x21	; 33
    7322:	0e 94 4f 31 	call	0x629e	; 0x629e <deriveAndSetEncryptionKey>
    7326:	37 c0       	rjmp	.+110    	; 0x7396 <newWallet+0x156>
    7328:	ce 01       	movw	r24, r28
    732a:	01 96       	adiw	r24, 0x01	; 1
    732c:	0e 94 0a 28 	call	0x5014	; 0x5014 <getRandom256>
    7330:	88 23       	and	r24, r24
    7332:	21 f0       	breq	.+8      	; 0x733c <newWallet+0xfc>
    7334:	8a e0       	ldi	r24, 0x0A	; 10
    7336:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    733a:	99 c0       	rjmp	.+306    	; 0x746e <newWallet+0x22e>
    733c:	80 e1       	ldi	r24, 0x10	; 16
    733e:	fe 01       	movw	r30, r28
    7340:	31 96       	adiw	r30, 0x01	; 1
    7342:	de 01       	movw	r26, r28
    7344:	91 96       	adiw	r26, 0x21	; 33
    7346:	01 90       	ld	r0, Z+
    7348:	0d 92       	st	X+, r0
    734a:	8a 95       	dec	r24
    734c:	e1 f7       	brne	.-8      	; 0x7346 <newWallet+0x106>
    734e:	a5 01       	movw	r20, r10
    7350:	b6 01       	movw	r22, r12
    7352:	ce 01       	movw	r24, r28
    7354:	81 96       	adiw	r24, 0x21	; 33
    7356:	0e 94 4f 31 	call	0x629e	; 0x629e <deriveAndSetEncryptionKey>
    735a:	12 d8       	rcall	.-4060   	; 0x6380 <updateWalletVersion>
    735c:	88 23       	and	r24, r24
    735e:	19 f0       	breq	.+6      	; 0x7366 <newWallet+0x126>
    7360:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    7364:	84 c0       	rjmp	.+264    	; 0x746e <newWallet+0x22e>
    7366:	84 e0       	ldi	r24, 0x04	; 4
    7368:	eb e2       	ldi	r30, 0x2B	; 43
    736a:	f8 e0       	ldi	r31, 0x08	; 8
    736c:	df 01       	movw	r26, r30
    736e:	1d 92       	st	X+, r1
    7370:	8a 95       	dec	r24
    7372:	e9 f7       	brne	.-6      	; 0x736e <newWallet+0x12e>
    7374:	88 e2       	ldi	r24, 0x28	; 40
    7376:	f4 01       	movw	r30, r8
    7378:	af e2       	ldi	r26, 0x2F	; 47
    737a:	b8 e0       	ldi	r27, 0x08	; 8
    737c:	01 90       	ld	r0, Z+
    737e:	0d 92       	st	X+, r0
    7380:	8a 95       	dec	r24
    7382:	e1 f7       	brne	.-8      	; 0x737c <newWallet+0x13c>
    7384:	80 e1       	ldi	r24, 0x10	; 16
    7386:	fe 01       	movw	r30, r28
    7388:	b1 96       	adiw	r30, 0x21	; 33
    738a:	a7 e5       	ldi	r26, 0x57	; 87
    738c:	b8 e0       	ldi	r27, 0x08	; 8
    738e:	01 90       	ld	r0, Z+
    7390:	0d 92       	st	X+, r0
    7392:	8a 95       	dec	r24
    7394:	e1 f7       	brne	.-8      	; 0x738e <newWallet+0x14e>
    7396:	10 92 67 08 	sts	0x0867, r1	; 0x800867 <current_wallet+0x40>
    739a:	10 92 68 08 	sts	0x0868, r1	; 0x800868 <current_wallet+0x41>
    739e:	10 92 69 08 	sts	0x0869, r1	; 0x800869 <current_wallet+0x42>
    73a2:	10 92 6a 08 	sts	0x086A, r1	; 0x80086a <current_wallet+0x43>
    73a6:	ce 01       	movw	r24, r28
    73a8:	01 96       	adiw	r24, 0x01	; 1
    73aa:	0e 94 0a 28 	call	0x5014	; 0x5014 <getRandom256>
    73ae:	88 23       	and	r24, r24
    73b0:	21 f0       	breq	.+8      	; 0x73ba <newWallet+0x17a>
    73b2:	8a e0       	ldi	r24, 0x0A	; 10
    73b4:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    73b8:	5a c0       	rjmp	.+180    	; 0x746e <newWallet+0x22e>
    73ba:	88 e0       	ldi	r24, 0x08	; 8
    73bc:	fe 01       	movw	r30, r28
    73be:	31 96       	adiw	r30, 0x01	; 1
    73c0:	ab e6       	ldi	r26, 0x6B	; 107
    73c2:	b8 e0       	ldi	r27, 0x08	; 8
    73c4:	01 90       	ld	r0, Z+
    73c6:	0d 92       	st	X+, r0
    73c8:	8a 95       	dec	r24
    73ca:	e1 f7       	brne	.-8      	; 0x73c4 <newWallet+0x184>
    73cc:	84 e0       	ldi	r24, 0x04	; 4
    73ce:	e3 e7       	ldi	r30, 0x73	; 115
    73d0:	f8 e0       	ldi	r31, 0x08	; 8
    73d2:	df 01       	movw	r26, r30
    73d4:	1d 92       	st	X+, r1
    73d6:	8a 95       	dec	r24
    73d8:	e9 f7       	brne	.-6      	; 0x73d4 <newWallet+0x194>
    73da:	ff 20       	and	r15, r15
    73dc:	49 f0       	breq	.+18     	; 0x73f0 <newWallet+0x1b0>
    73de:	80 e4       	ldi	r24, 0x40	; 64
    73e0:	f8 01       	movw	r30, r16
    73e2:	a7 e7       	ldi	r26, 0x77	; 119
    73e4:	b8 e0       	ldi	r27, 0x08	; 8
    73e6:	01 90       	ld	r0, Z+
    73e8:	0d 92       	st	X+, r0
    73ea:	8a 95       	dec	r24
    73ec:	e1 f7       	brne	.-8      	; 0x73e6 <newWallet+0x1a6>
    73ee:	26 c0       	rjmp	.+76     	; 0x743c <newWallet+0x1fc>
    73f0:	ce 01       	movw	r24, r28
    73f2:	01 96       	adiw	r24, 0x01	; 1
    73f4:	0e 94 0a 28 	call	0x5014	; 0x5014 <getRandom256>
    73f8:	88 23       	and	r24, r24
    73fa:	21 f0       	breq	.+8      	; 0x7404 <newWallet+0x1c4>
    73fc:	8a e0       	ldi	r24, 0x0A	; 10
    73fe:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    7402:	35 c0       	rjmp	.+106    	; 0x746e <newWallet+0x22e>
    7404:	80 e2       	ldi	r24, 0x20	; 32
    7406:	fe 01       	movw	r30, r28
    7408:	31 96       	adiw	r30, 0x01	; 1
    740a:	a7 e7       	ldi	r26, 0x77	; 119
    740c:	b8 e0       	ldi	r27, 0x08	; 8
    740e:	01 90       	ld	r0, Z+
    7410:	0d 92       	st	X+, r0
    7412:	8a 95       	dec	r24
    7414:	e1 f7       	brne	.-8      	; 0x740e <newWallet+0x1ce>
    7416:	ce 01       	movw	r24, r28
    7418:	01 96       	adiw	r24, 0x01	; 1
    741a:	0e 94 0a 28 	call	0x5014	; 0x5014 <getRandom256>
    741e:	88 23       	and	r24, r24
    7420:	21 f0       	breq	.+8      	; 0x742a <newWallet+0x1ea>
    7422:	8a e0       	ldi	r24, 0x0A	; 10
    7424:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    7428:	22 c0       	rjmp	.+68     	; 0x746e <newWallet+0x22e>
    742a:	80 e2       	ldi	r24, 0x20	; 32
    742c:	fe 01       	movw	r30, r28
    742e:	31 96       	adiw	r30, 0x01	; 1
    7430:	a7 e9       	ldi	r26, 0x97	; 151
    7432:	b8 e0       	ldi	r27, 0x08	; 8
    7434:	01 90       	ld	r0, Z+
    7436:	0d 92       	st	X+, r0
    7438:	8a 95       	dec	r24
    743a:	e1 f7       	brne	.-8      	; 0x7434 <newWallet+0x1f4>
    743c:	87 eb       	ldi	r24, 0xB7	; 183
    743e:	98 e0       	ldi	r25, 0x08	; 8
    7440:	0e 94 80 31 	call	0x6300	; 0x6300 <calculateWalletChecksum>
    7444:	60 91 23 08 	lds	r22, 0x0823	; 0x800823 <wallet_nv_address>
    7448:	70 91 24 08 	lds	r23, 0x0824	; 0x800824 <wallet_nv_address+0x1>
    744c:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <wallet_nv_address+0x2>
    7450:	90 91 26 08 	lds	r25, 0x0826	; 0x800826 <wallet_nv_address+0x3>
    7454:	32 dc       	rcall	.-1948   	; 0x6cba <writeCurrentWalletRecord>
    7456:	88 23       	and	r24, r24
    7458:	19 f0       	breq	.+6      	; 0x7460 <newWallet+0x220>
    745a:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    745e:	07 c0       	rjmp	.+14     	; 0x746e <newWallet+0x22e>
    7460:	95 01       	movw	r18, r10
    7462:	a6 01       	movw	r20, r12
    7464:	c3 01       	movw	r24, r6
    7466:	b2 01       	movw	r22, r4
    7468:	1d de       	rcall	.-966    	; 0x70a4 <initWallet>
    746a:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
    746e:	e0 96       	adiw	r28, 0x30	; 48
    7470:	0f b6       	in	r0, 0x3f	; 63
    7472:	f8 94       	cli
    7474:	de bf       	out	0x3e, r29	; 62
    7476:	0f be       	out	0x3f, r0	; 63
    7478:	cd bf       	out	0x3d, r28	; 61
    747a:	df 91       	pop	r29
    747c:	cf 91       	pop	r28
    747e:	1f 91       	pop	r17
    7480:	0f 91       	pop	r16
    7482:	ff 90       	pop	r15
    7484:	ef 90       	pop	r14
    7486:	df 90       	pop	r13
    7488:	cf 90       	pop	r12
    748a:	bf 90       	pop	r11
    748c:	af 90       	pop	r10
    748e:	9f 90       	pop	r9
    7490:	8f 90       	pop	r8
    7492:	7f 90       	pop	r7
    7494:	6f 90       	pop	r6
    7496:	5f 90       	pop	r5
    7498:	4f 90       	pop	r4
    749a:	08 95       	ret

0000749c <nonVolatileFlush>:
    749c:	80 e0       	ldi	r24, 0x00	; 0
    749e:	08 95       	ret

000074a0 <writeBackupSeed>:
  *                           backup seed should be sent to.
  * \return false on success, true if the backup seed could not be written
  *         to the destination device.
  */
bool writeBackupSeed(uint8_t *seed, bool is_encrypted, uint32_t destination_device)
{
    74a0:	df 92       	push	r13
    74a2:	ef 92       	push	r14
    74a4:	ff 92       	push	r15
    74a6:	0f 93       	push	r16
    74a8:	1f 93       	push	r17
    74aa:	cf 93       	push	r28
    74ac:	df 93       	push	r29
	int i;

	if (destination_device > 0)
    74ae:	23 2b       	or	r18, r19
    74b0:	24 2b       	or	r18, r20
    74b2:	25 2b       	or	r18, r21
    74b4:	59 f5       	brne	.+86     	; 0x750c <writeBackupSeed+0x6c>
    74b6:	d6 2e       	mov	r13, r22
    74b8:	7c 01       	movw	r14, r24
	{
		return true;
	}
	else
	{
		printf("Test wallet seed written:");
    74ba:	80 e8       	ldi	r24, 0x80	; 128
    74bc:	97 e0       	ldi	r25, 0x07	; 7
    74be:	9f 93       	push	r25
    74c0:	8f 93       	push	r24
    74c2:	7b d4       	rcall	.+2294   	; 0x7dba <printf>
    74c4:	e7 01       	movw	r28, r14
    74c6:	80 e4       	ldi	r24, 0x40	; 64
    74c8:	e8 0e       	add	r14, r24
    74ca:	f1 1c       	adc	r15, r1
    74cc:	0f 90       	pop	r0
    74ce:	0f 90       	pop	r0
		for (i = 0; i < SEED_LENGTH; i++)
		{
			printf(" %02x", seed[i]);
    74d0:	0a e7       	ldi	r16, 0x7A	; 122
    74d2:	17 e0       	ldi	r17, 0x07	; 7
    74d4:	89 91       	ld	r24, Y+
    74d6:	1f 92       	push	r1
    74d8:	8f 93       	push	r24
    74da:	1f 93       	push	r17
    74dc:	0f 93       	push	r16
    74de:	6d d4       	rcall	.+2266   	; 0x7dba <printf>
		return true;
	}
	else
	{
		printf("Test wallet seed written:");
		for (i = 0; i < SEED_LENGTH; i++)
    74e0:	0f 90       	pop	r0
    74e2:	0f 90       	pop	r0
    74e4:	0f 90       	pop	r0
    74e6:	0f 90       	pop	r0
    74e8:	ce 15       	cp	r28, r14
    74ea:	df 05       	cpc	r29, r15
    74ec:	99 f7       	brne	.-26     	; 0x74d4 <writeBackupSeed+0x34>
		{
			printf(" %02x", seed[i]);
		}
		printf("\n");
    74ee:	8a e0       	ldi	r24, 0x0A	; 10
    74f0:	90 e0       	ldi	r25, 0x00	; 0
    74f2:	76 d4       	rcall	.+2284   	; 0x7de0 <putchar>
		if (is_encrypted)
    74f4:	dd 20       	and	r13, r13
		{
			printf("Seed is encrypted\n");
    74f6:	29 f0       	breq	.+10     	; 0x7502 <writeBackupSeed+0x62>
    74f8:	8a e9       	ldi	r24, 0x9A	; 154
    74fa:	97 e0       	ldi	r25, 0x07	; 7
    74fc:	76 d4       	rcall	.+2284   	; 0x7dea <puts>
		else
		{
			printf("Seed is unencrypted\n");
		}
		memcpy(test_wallet_backup, seed, SEED_LENGTH);
		return false;
    74fe:	80 e0       	ldi	r24, 0x00	; 0
		{
			printf("Seed is encrypted\n");
		}
		else
		{
			printf("Seed is unencrypted\n");
    7500:	06 c0       	rjmp	.+12     	; 0x750e <writeBackupSeed+0x6e>
    7502:	8c ea       	ldi	r24, 0xAC	; 172
    7504:	97 e0       	ldi	r25, 0x07	; 7
    7506:	71 d4       	rcall	.+2274   	; 0x7dea <puts>
		}
		memcpy(test_wallet_backup, seed, SEED_LENGTH);
		return false;
    7508:	80 e0       	ldi	r24, 0x00	; 0
    750a:	01 c0       	rjmp	.+2      	; 0x750e <writeBackupSeed+0x6e>
{
	int i;

	if (destination_device > 0)
	{
		return true;
    750c:	81 e0       	ldi	r24, 0x01	; 1
			printf("Seed is unencrypted\n");
		}
		memcpy(test_wallet_backup, seed, SEED_LENGTH);
		return false;
	}
}
    750e:	df 91       	pop	r29
    7510:	cf 91       	pop	r28
    7512:	1f 91       	pop	r17
    7514:	0f 91       	pop	r16
    7516:	ff 90       	pop	r15
    7518:	ef 90       	pop	r14
    751a:	df 90       	pop	r13
    751c:	08 95       	ret

0000751e <backupWallet>:
  * \param destination_device See writeBackupSeed().
  * \return #WALLET_NO_ERROR on success, or one of #WalletErrorsEnum if an
  *         error occurred.
  */
WalletErrors backupWallet(bool do_encrypt, uint32_t destination_device)
{
    751e:	4f 92       	push	r4
    7520:	5f 92       	push	r5
    7522:	6f 92       	push	r6
    7524:	7f 92       	push	r7
    7526:	af 92       	push	r10
    7528:	bf 92       	push	r11
    752a:	cf 92       	push	r12
    752c:	df 92       	push	r13
    752e:	ef 92       	push	r14
    7530:	ff 92       	push	r15
    7532:	0f 93       	push	r16
    7534:	1f 93       	push	r17
    7536:	cf 93       	push	r28
    7538:	df 93       	push	r29
    753a:	cd b7       	in	r28, 0x3d	; 61
    753c:	de b7       	in	r29, 0x3e	; 62
    753e:	c0 55       	subi	r28, 0x50	; 80
    7540:	d1 09       	sbc	r29, r1
    7542:	0f b6       	in	r0, 0x3f	; 63
    7544:	f8 94       	cli
    7546:	de bf       	out	0x3e, r29	; 62
    7548:	0f be       	out	0x3f, r0	; 63
    754a:	cd bf       	out	0x3d, r28	; 61
	uint8_t encrypted_seed[SEED_LENGTH];
	uint8_t n[16];
	bool r;
	uint8_t i;

	if (!wallet_loaded)
    754c:	90 91 d8 08 	lds	r25, 0x08D8	; 0x8008d8 <wallet_loaded>
    7550:	91 11       	cpse	r25, r1
    7552:	04 c0       	rjmp	.+8      	; 0x755c <backupWallet+0x3e>
	{
		last_error = WALLET_NOT_LOADED;
    7554:	87 e0       	ldi	r24, 0x07	; 7
    7556:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
		return last_error;
    755a:	48 c0       	rjmp	.+144    	; 0x75ec <backupWallet+0xce>
    755c:	2a 01       	movw	r4, r20
    755e:	3b 01       	movw	r6, r22
	}

	if (do_encrypt)
    7560:	88 23       	and	r24, r24
    7562:	a9 f1       	breq	.+106    	; 0x75ce <backupWallet+0xb0>
	{
#ifdef TEST
		assert(SEED_LENGTH % 16 == 0);
#endif
		memset(n, 0, 16);
    7564:	fe 01       	movw	r30, r28
    7566:	ef 5b       	subi	r30, 0xBF	; 191
    7568:	ff 4f       	sbci	r31, 0xFF	; 255
    756a:	80 e1       	ldi	r24, 0x10	; 16
    756c:	df 01       	movw	r26, r30
    756e:	1d 92       	st	X+, r1
    7570:	8a 95       	dec	r24
    7572:	e9 f7       	brne	.-6      	; 0x756e <backupWallet+0x50>
    7574:	ce 01       	movw	r24, r28
    7576:	01 96       	adiw	r24, 0x01	; 1
    7578:	5c 01       	movw	r10, r24
    757a:	07 e7       	ldi	r16, 0x77	; 119
    757c:	18 e0       	ldi	r17, 0x08	; 8
    757e:	c1 2c       	mov	r12, r1
    7580:	d1 2c       	mov	r13, r1
    7582:	76 01       	movw	r14, r12
		for (i = 0; i < SEED_LENGTH; i = (uint8_t)(i + 16))
		{
			writeU32LittleEndian(n, i);
    7584:	b7 01       	movw	r22, r14
    7586:	a6 01       	movw	r20, r12
    7588:	ce 01       	movw	r24, r28
    758a:	8f 5b       	subi	r24, 0xBF	; 191
    758c:	9f 4f       	sbci	r25, 0xFF	; 255
    758e:	0e 94 ef 0b 	call	0x17de	; 0x17de <writeU32LittleEndian>
			xexEncrypt(&(encrypted_seed[i]), &(current_wallet.encrypted.seed[i]), n, 1);
    7592:	21 e0       	ldi	r18, 0x01	; 1
    7594:	ae 01       	movw	r20, r28
    7596:	4f 5b       	subi	r20, 0xBF	; 191
    7598:	5f 4f       	sbci	r21, 0xFF	; 255
    759a:	b8 01       	movw	r22, r16
    759c:	c5 01       	movw	r24, r10
    759e:	d6 d0       	rcall	.+428    	; 0x774c <xexEncrypt>
    75a0:	90 e1       	ldi	r25, 0x10	; 16
    75a2:	c9 0e       	add	r12, r25
    75a4:	d1 1c       	adc	r13, r1
    75a6:	e1 1c       	adc	r14, r1
    75a8:	f1 1c       	adc	r15, r1
    75aa:	a0 e1       	ldi	r26, 0x10	; 16
    75ac:	aa 0e       	add	r10, r26
    75ae:	b1 1c       	adc	r11, r1
    75b0:	00 5f       	subi	r16, 0xF0	; 240
    75b2:	1f 4f       	sbci	r17, 0xFF	; 255
	{
#ifdef TEST
		assert(SEED_LENGTH % 16 == 0);
#endif
		memset(n, 0, 16);
		for (i = 0; i < SEED_LENGTH; i = (uint8_t)(i + 16))
    75b4:	b0 e4       	ldi	r27, 0x40	; 64
    75b6:	cb 16       	cp	r12, r27
    75b8:	d1 04       	cpc	r13, r1
    75ba:	e1 04       	cpc	r14, r1
    75bc:	f1 04       	cpc	r15, r1
    75be:	11 f7       	brne	.-60     	; 0x7584 <backupWallet+0x66>
		{
			writeU32LittleEndian(n, i);
			xexEncrypt(&(encrypted_seed[i]), &(current_wallet.encrypted.seed[i]), n, 1);
		}
		r = writeBackupSeed(encrypted_seed, do_encrypt, destination_device);
    75c0:	a3 01       	movw	r20, r6
    75c2:	92 01       	movw	r18, r4
    75c4:	61 e0       	ldi	r22, 0x01	; 1
    75c6:	ce 01       	movw	r24, r28
    75c8:	01 96       	adiw	r24, 0x01	; 1
    75ca:	6a df       	rcall	.-300    	; 0x74a0 <writeBackupSeed>
    75cc:	06 c0       	rjmp	.+12     	; 0x75da <backupWallet+0xbc>
	}
	else
	{
		r = writeBackupSeed(current_wallet.encrypted.seed, do_encrypt, destination_device);
    75ce:	9a 01       	movw	r18, r20
    75d0:	ab 01       	movw	r20, r22
    75d2:	60 e0       	ldi	r22, 0x00	; 0
    75d4:	87 e7       	ldi	r24, 0x77	; 119
    75d6:	98 e0       	ldi	r25, 0x08	; 8
    75d8:	63 df       	rcall	.-314    	; 0x74a0 <writeBackupSeed>
	}
	if (r)
    75da:	88 23       	and	r24, r24
    75dc:	21 f0       	breq	.+8      	; 0x75e6 <backupWallet+0xc8>
	{
		last_error = WALLET_BACKUP_ERROR;
    75de:	89 e0       	ldi	r24, 0x09	; 9
    75e0:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <last_error>
		return last_error;
    75e4:	03 c0       	rjmp	.+6      	; 0x75ec <backupWallet+0xce>
	}
	else
	{
		last_error = WALLET_NO_ERROR;
    75e6:	10 92 d9 08 	sts	0x08D9, r1	; 0x8008d9 <last_error>
		return last_error;
    75ea:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    75ec:	c0 5b       	subi	r28, 0xB0	; 176
    75ee:	df 4f       	sbci	r29, 0xFF	; 255
    75f0:	0f b6       	in	r0, 0x3f	; 63
    75f2:	f8 94       	cli
    75f4:	de bf       	out	0x3e, r29	; 62
    75f6:	0f be       	out	0x3f, r0	; 63
    75f8:	cd bf       	out	0x3d, r28	; 61
    75fa:	df 91       	pop	r29
    75fc:	cf 91       	pop	r28
    75fe:	1f 91       	pop	r17
    7600:	0f 91       	pop	r16
    7602:	ff 90       	pop	r15
    7604:	ef 90       	pop	r14
    7606:	df 90       	pop	r13
    7608:	cf 90       	pop	r12
    760a:	bf 90       	pop	r11
    760c:	af 90       	pop	r10
    760e:	7f 90       	pop	r7
    7610:	6f 90       	pop	r6
    7612:	5f 90       	pop	r5
    7614:	4f 90       	pop	r4
    7616:	08 95       	ret

00007618 <xexEnDecrypt>:
{
	// Just to be sure, do two passes.
	memset(nv_storage_tweak_key, 0xff, 16);
	memset(nv_storage_encrypt_key, 0xff, 16);
	memset(nv_storage_tweak_key, 0, 16);
	memset(nv_storage_encrypt_key, 0, 16);
    7618:	6f 92       	push	r6
    761a:	7f 92       	push	r7
    761c:	8f 92       	push	r8
    761e:	9f 92       	push	r9
    7620:	af 92       	push	r10
    7622:	bf 92       	push	r11
    7624:	cf 92       	push	r12
    7626:	df 92       	push	r13
    7628:	ef 92       	push	r14
    762a:	ff 92       	push	r15
    762c:	0f 93       	push	r16
    762e:	1f 93       	push	r17
    7630:	cf 93       	push	r28
    7632:	df 93       	push	r29
    7634:	cd b7       	in	r28, 0x3d	; 61
    7636:	de b7       	in	r29, 0x3e	; 62
    7638:	c0 5d       	subi	r28, 0xD0	; 208
    763a:	d1 09       	sbc	r29, r1
    763c:	0f b6       	in	r0, 0x3f	; 63
    763e:	f8 94       	cli
    7640:	de bf       	out	0x3e, r29	; 62
    7642:	0f be       	out	0x3f, r0	; 63
    7644:	cd bf       	out	0x3d, r28	; 61
    7646:	5c 01       	movw	r10, r24
    7648:	4b 01       	movw	r8, r22
    764a:	3a 01       	movw	r6, r20
    764c:	d2 2e       	mov	r13, r18
    764e:	b8 01       	movw	r22, r16
    7650:	ce 01       	movw	r24, r28
    7652:	01 96       	adiw	r24, 0x01	; 1
    7654:	0e 94 a1 03 	call	0x742	; 0x742 <aesExpandKey>
    7658:	ae 01       	movw	r20, r28
    765a:	4f 5f       	subi	r20, 0xFF	; 255
    765c:	5f 4f       	sbci	r21, 0xFF	; 255
    765e:	b3 01       	movw	r22, r6
    7660:	ce 01       	movw	r24, r28
    7662:	8f 54       	subi	r24, 0x4F	; 79
    7664:	9f 4f       	sbci	r25, 0xFF	; 255
    7666:	0e 94 f5 03 	call	0x7ea	; 0x7ea <aesEncrypt>
    766a:	d1 10       	cpse	r13, r1
    766c:	1e c0       	rjmp	.+60     	; 0x76aa <xexEnDecrypt+0x92>
    766e:	27 c0       	rjmp	.+78     	; 0x76be <xexEnDecrypt+0xa6>
    7670:	90 81       	ld	r25, Z
    7672:	29 2f       	mov	r18, r25
    7674:	22 0f       	add	r18, r18
    7676:	82 2b       	or	r24, r18
    7678:	81 93       	st	Z+, r24
    767a:	89 2f       	mov	r24, r25
    767c:	88 1f       	adc	r24, r24
    767e:	88 27       	eor	r24, r24
    7680:	88 1f       	adc	r24, r24
    7682:	4e 17       	cp	r20, r30
    7684:	5f 07       	cpc	r21, r31
    7686:	a1 f7       	brne	.-24     	; 0x7670 <xexEnDecrypt+0x58>
    7688:	81 95       	neg	r24
    768a:	87 78       	andi	r24, 0x87	; 135
    768c:	cf 54       	subi	r28, 0x4F	; 79
    768e:	df 4f       	sbci	r29, 0xFF	; 255
    7690:	98 81       	ld	r25, Y
    7692:	c1 5b       	subi	r28, 0xB1	; 177
    7694:	d0 40       	sbci	r29, 0x00	; 0
    7696:	89 27       	eor	r24, r25
    7698:	cf 54       	subi	r28, 0x4F	; 79
    769a:	df 4f       	sbci	r29, 0xFF	; 255
    769c:	88 83       	st	Y, r24
    769e:	c1 5b       	subi	r28, 0xB1	; 177
    76a0:	d0 40       	sbci	r29, 0x00	; 0
    76a2:	3f 5f       	subi	r19, 0xFF	; 255
    76a4:	d3 12       	cpse	r13, r19
    76a6:	03 c0       	rjmp	.+6      	; 0x76ae <xexEnDecrypt+0x96>
    76a8:	0a c0       	rjmp	.+20     	; 0x76be <xexEnDecrypt+0xa6>
    76aa:	30 e0       	ldi	r19, 0x00	; 0
    76ac:	60 e0       	ldi	r22, 0x00	; 0
    76ae:	fe 01       	movw	r30, r28
    76b0:	ef 54       	subi	r30, 0x4F	; 79
    76b2:	ff 4f       	sbci	r31, 0xFF	; 255
    76b4:	af 01       	movw	r20, r30
    76b6:	40 5f       	subi	r20, 0xF0	; 240
    76b8:	5f 4f       	sbci	r21, 0xFF	; 255
    76ba:	86 2f       	mov	r24, r22
    76bc:	d9 cf       	rjmp	.-78     	; 0x7670 <xexEnDecrypt+0x58>
    76be:	80 e1       	ldi	r24, 0x10	; 16
    76c0:	f4 01       	movw	r30, r8
    76c2:	de 01       	movw	r26, r28
    76c4:	af 53       	subi	r26, 0x3F	; 63
    76c6:	bf 4f       	sbci	r27, 0xFF	; 255
    76c8:	01 90       	ld	r0, Z+
    76ca:	0d 92       	st	X+, r0
    76cc:	8a 95       	dec	r24
    76ce:	e1 f7       	brne	.-8      	; 0x76c8 <xexEnDecrypt+0xb0>
    76d0:	be 01       	movw	r22, r28
    76d2:	6f 54       	subi	r22, 0x4F	; 79
    76d4:	7f 4f       	sbci	r23, 0xFF	; 255
    76d6:	ce 01       	movw	r24, r28
    76d8:	8f 53       	subi	r24, 0x3F	; 63
    76da:	9f 4f       	sbci	r25, 0xFF	; 255
    76dc:	0e 94 94 03 	call	0x728	; 0x728 <xor16Bytes>
    76e0:	b7 01       	movw	r22, r14
    76e2:	ce 01       	movw	r24, r28
    76e4:	01 96       	adiw	r24, 0x01	; 1
    76e6:	0e 94 a1 03 	call	0x742	; 0x742 <aesExpandKey>
    76ea:	cc 20       	and	r12, r12
    76ec:	51 f0       	breq	.+20     	; 0x7702 <xexEnDecrypt+0xea>
    76ee:	ae 01       	movw	r20, r28
    76f0:	4f 5f       	subi	r20, 0xFF	; 255
    76f2:	5f 4f       	sbci	r21, 0xFF	; 255
    76f4:	be 01       	movw	r22, r28
    76f6:	6f 53       	subi	r22, 0x3F	; 63
    76f8:	7f 4f       	sbci	r23, 0xFF	; 255
    76fa:	c5 01       	movw	r24, r10
    76fc:	0e 94 b1 04 	call	0x962	; 0x962 <aesDecrypt>
    7700:	09 c0       	rjmp	.+18     	; 0x7714 <xexEnDecrypt+0xfc>
    7702:	ae 01       	movw	r20, r28
    7704:	4f 5f       	subi	r20, 0xFF	; 255
    7706:	5f 4f       	sbci	r21, 0xFF	; 255
    7708:	be 01       	movw	r22, r28
    770a:	6f 53       	subi	r22, 0x3F	; 63
    770c:	7f 4f       	sbci	r23, 0xFF	; 255
    770e:	c5 01       	movw	r24, r10
    7710:	0e 94 f5 03 	call	0x7ea	; 0x7ea <aesEncrypt>
    7714:	be 01       	movw	r22, r28
    7716:	6f 54       	subi	r22, 0x4F	; 79
    7718:	7f 4f       	sbci	r23, 0xFF	; 255
    771a:	c5 01       	movw	r24, r10
    771c:	0e 94 94 03 	call	0x728	; 0x728 <xor16Bytes>
    7720:	c0 53       	subi	r28, 0x30	; 48
    7722:	df 4f       	sbci	r29, 0xFF	; 255
    7724:	0f b6       	in	r0, 0x3f	; 63
    7726:	f8 94       	cli
    7728:	de bf       	out	0x3e, r29	; 62
    772a:	0f be       	out	0x3f, r0	; 63
    772c:	cd bf       	out	0x3d, r28	; 61
    772e:	df 91       	pop	r29
    7730:	cf 91       	pop	r28
    7732:	1f 91       	pop	r17
    7734:	0f 91       	pop	r16
    7736:	ff 90       	pop	r15
    7738:	ef 90       	pop	r14
    773a:	df 90       	pop	r13
    773c:	cf 90       	pop	r12
    773e:	bf 90       	pop	r11
    7740:	af 90       	pop	r10
    7742:	9f 90       	pop	r9
    7744:	8f 90       	pop	r8
    7746:	7f 90       	pop	r7
    7748:	6f 90       	pop	r6
    774a:	08 95       	ret

0000774c <xexEncrypt>:
    774c:	cf 92       	push	r12
    774e:	ef 92       	push	r14
    7750:	ff 92       	push	r15
    7752:	0f 93       	push	r16
    7754:	1f 93       	push	r17
    7756:	c1 2c       	mov	r12, r1
    7758:	0f 2e       	mov	r0, r31
    775a:	fa ee       	ldi	r31, 0xEA	; 234
    775c:	ef 2e       	mov	r14, r31
    775e:	f8 e0       	ldi	r31, 0x08	; 8
    7760:	ff 2e       	mov	r15, r31
    7762:	f0 2d       	mov	r31, r0
    7764:	0a ed       	ldi	r16, 0xDA	; 218
    7766:	18 e0       	ldi	r17, 0x08	; 8
    7768:	57 df       	rcall	.-338    	; 0x7618 <xexEnDecrypt>
    776a:	1f 91       	pop	r17
    776c:	0f 91       	pop	r16
    776e:	ff 90       	pop	r15
    7770:	ef 90       	pop	r14
    7772:	cf 90       	pop	r12
    7774:	08 95       	ret

00007776 <xexDecrypt>:
    7776:	cf 92       	push	r12
    7778:	ef 92       	push	r14
    777a:	ff 92       	push	r15
    777c:	0f 93       	push	r16
    777e:	1f 93       	push	r17
    7780:	cc 24       	eor	r12, r12
    7782:	c3 94       	inc	r12
    7784:	0f 2e       	mov	r0, r31
    7786:	fa ee       	ldi	r31, 0xEA	; 234
    7788:	ef 2e       	mov	r14, r31
    778a:	f8 e0       	ldi	r31, 0x08	; 8
    778c:	ff 2e       	mov	r15, r31
    778e:	f0 2d       	mov	r31, r0
    7790:	0a ed       	ldi	r16, 0xDA	; 218
    7792:	18 e0       	ldi	r17, 0x08	; 8
    7794:	41 df       	rcall	.-382    	; 0x7618 <xexEnDecrypt>
    7796:	1f 91       	pop	r17
    7798:	0f 91       	pop	r16
    779a:	ff 90       	pop	r15
    779c:	ef 90       	pop	r14
    779e:	cf 90       	pop	r12
    77a0:	08 95       	ret

000077a2 <setEncryptionKey>:
    77a2:	9c 01       	movw	r18, r24
    77a4:	80 e1       	ldi	r24, 0x10	; 16
    77a6:	f9 01       	movw	r30, r18
    77a8:	aa ee       	ldi	r26, 0xEA	; 234
    77aa:	b8 e0       	ldi	r27, 0x08	; 8
    77ac:	01 90       	ld	r0, Z+
    77ae:	0d 92       	st	X+, r0
    77b0:	8a 95       	dec	r24
    77b2:	e1 f7       	brne	.-8      	; 0x77ac <setEncryptionKey+0xa>
    77b4:	90 e1       	ldi	r25, 0x10	; 16
    77b6:	f9 01       	movw	r30, r18
    77b8:	70 96       	adiw	r30, 0x10	; 16
    77ba:	aa ed       	ldi	r26, 0xDA	; 218
    77bc:	b8 e0       	ldi	r27, 0x08	; 8
    77be:	01 90       	ld	r0, Z+
    77c0:	0d 92       	st	X+, r0
    77c2:	9a 95       	dec	r25
    77c4:	e1 f7       	brne	.-8      	; 0x77be <setEncryptionKey+0x1c>
    77c6:	08 95       	ret

000077c8 <isEncryptionKeyNonZero>:
    77c8:	ea ee       	ldi	r30, 0xEA	; 234
    77ca:	f8 e0       	ldi	r31, 0x08	; 8
    77cc:	aa ed       	ldi	r26, 0xDA	; 218
    77ce:	b8 e0       	ldi	r27, 0x08	; 8
    77d0:	4a ef       	ldi	r20, 0xFA	; 250
    77d2:	58 e0       	ldi	r21, 0x08	; 8
    77d4:	90 e0       	ldi	r25, 0x00	; 0
    77d6:	21 91       	ld	r18, Z+
    77d8:	8d 91       	ld	r24, X+
    77da:	82 2b       	or	r24, r18
    77dc:	98 2b       	or	r25, r24
    77de:	e4 17       	cp	r30, r20
    77e0:	f5 07       	cpc	r31, r21
    77e2:	c9 f7       	brne	.-14     	; 0x77d6 <isEncryptionKeyNonZero+0xe>
    77e4:	81 e0       	ldi	r24, 0x01	; 1
    77e6:	91 11       	cpse	r25, r1
    77e8:	01 c0       	rjmp	.+2      	; 0x77ec <isEncryptionKeyNonZero+0x24>
    77ea:	80 e0       	ldi	r24, 0x00	; 0
    77ec:	08 95       	ret

000077ee <encryptedNonVolatileWrite>:
  * \return See #NonVolatileReturnEnum for return values.
  * \warning Writes may be buffered; use nonVolatileFlush() to be sure that
  *          data is actually written to non-volatile storage.
  */
NonVolatileReturn encryptedNonVolatileWrite(uint8_t *data, NVPartitions partition, uint32_t address, uint32_t length)
{
    77ee:	2f 92       	push	r2
    77f0:	3f 92       	push	r3
    77f2:	4f 92       	push	r4
    77f4:	5f 92       	push	r5
    77f6:	6f 92       	push	r6
    77f8:	7f 92       	push	r7
    77fa:	8f 92       	push	r8
    77fc:	9f 92       	push	r9
    77fe:	af 92       	push	r10
    7800:	bf 92       	push	r11
    7802:	cf 92       	push	r12
    7804:	df 92       	push	r13
    7806:	ef 92       	push	r14
    7808:	ff 92       	push	r15
    780a:	0f 93       	push	r16
    780c:	1f 93       	push	r17
    780e:	cf 93       	push	r28
    7810:	df 93       	push	r29
    7812:	cd b7       	in	r28, 0x3d	; 61
    7814:	de b7       	in	r29, 0x3e	; 62
    7816:	e4 97       	sbiw	r28, 0x34	; 52
    7818:	0f b6       	in	r0, 0x3f	; 63
    781a:	f8 94       	cli
    781c:	de bf       	out	0x3e, r29	; 62
    781e:	0f be       	out	0x3f, r0	; 63
    7820:	cd bf       	out	0x3d, r28	; 61
    7822:	3c 01       	movw	r6, r24
    7824:	c6 2e       	mov	r12, r22
    7826:	47 01       	movw	r8, r14
    7828:	58 01       	movw	r10, r16
	uint8_t n[16];
	NonVolatileReturn r;

	block_start = address & 0xfffffff0;
	block_offset = (uint8_t)(address & 0x0000000f);
	block_end = (address + length - 1) & 0xfffffff0;
    782a:	da 01       	movw	r26, r20
    782c:	c9 01       	movw	r24, r18
    782e:	8e 0d       	add	r24, r14
    7830:	9f 1d       	adc	r25, r15
    7832:	a0 1f       	adc	r26, r16
    7834:	b1 1f       	adc	r27, r17
	if ((address + length) < address)
    7836:	82 17       	cp	r24, r18
    7838:	93 07       	cpc	r25, r19
    783a:	a4 07       	cpc	r26, r20
    783c:	b5 07       	cpc	r27, r21
    783e:	08 f4       	brcc	.+2      	; 0x7842 <encryptedNonVolatileWrite+0x54>
    7840:	8e c0       	rjmp	.+284    	; 0x795e <encryptedNonVolatileWrite+0x170>
	uint8_t ciphertext[16];
	uint8_t plaintext[16];
	uint8_t n[16];
	NonVolatileReturn r;

	block_start = address & 0xfffffff0;
    7842:	19 01       	movw	r2, r18
    7844:	2a 01       	movw	r4, r20
    7846:	60 ef       	ldi	r22, 0xF0	; 240
    7848:	26 22       	and	r2, r22
	block_offset = (uint8_t)(address & 0x0000000f);
	block_end = (address + length - 1) & 0xfffffff0;
    784a:	7c 01       	movw	r14, r24
    784c:	8d 01       	movw	r16, r26
    784e:	61 e0       	ldi	r22, 0x01	; 1
    7850:	e6 1a       	sub	r14, r22
    7852:	f1 08       	sbc	r15, r1
    7854:	01 09       	sbc	r16, r1
    7856:	11 09       	sbc	r17, r1
    7858:	d8 01       	movw	r26, r16
    785a:	c7 01       	movw	r24, r14
    785c:	80 7f       	andi	r24, 0xF0	; 240
    785e:	89 ab       	std	Y+49, r24	; 0x31
    7860:	9a ab       	std	Y+50, r25	; 0x32
    7862:	ab ab       	std	Y+51, r26	; 0x33
    7864:	bc ab       	std	Y+52, r27	; 0x34
	{
		// Overflow occurred.
		return NV_INVALID_ADDRESS;
	}

	memset(n, 0, 16);
    7866:	fe 01       	movw	r30, r28
    7868:	b1 96       	adiw	r30, 0x21	; 33
    786a:	80 e1       	ldi	r24, 0x10	; 16
    786c:	df 01       	movw	r26, r30
    786e:	1d 92       	st	X+, r1
    7870:	8a 95       	dec	r24
    7872:	e9 f7       	brne	.-6      	; 0x786e <encryptedNonVolatileWrite+0x80>
	for (; block_start <= block_end; block_start += 16)
    7874:	89 a9       	ldd	r24, Y+49	; 0x31
    7876:	9a a9       	ldd	r25, Y+50	; 0x32
    7878:	ab a9       	ldd	r26, Y+51	; 0x33
    787a:	bc a9       	ldd	r27, Y+52	; 0x34
    787c:	82 15       	cp	r24, r2
    787e:	93 05       	cpc	r25, r3
    7880:	a4 05       	cpc	r26, r4
    7882:	b5 05       	cpc	r27, r5
    7884:	08 f4       	brcc	.+2      	; 0x7888 <encryptedNonVolatileWrite+0x9a>
    7886:	6d c0       	rjmp	.+218    	; 0x7962 <encryptedNonVolatileWrite+0x174>
	uint8_t plaintext[16];
	uint8_t n[16];
	NonVolatileReturn r;

	block_start = address & 0xfffffff0;
	block_offset = (uint8_t)(address & 0x0000000f);
    7888:	92 2f       	mov	r25, r18
    788a:	9f 70       	andi	r25, 0x0F	; 15
    788c:	d9 2e       	mov	r13, r25
	}

	memset(n, 0, 16);
	for (; block_start <= block_end; block_start += 16)
	{
		r = nonVolatileRead(ciphertext, partition, block_start, 16);
    788e:	10 e1       	ldi	r17, 0x10	; 16
    7890:	e1 2e       	mov	r14, r17
    7892:	f1 2c       	mov	r15, r1
    7894:	00 e0       	ldi	r16, 0x00	; 0
    7896:	10 e0       	ldi	r17, 0x00	; 0
    7898:	a2 01       	movw	r20, r4
    789a:	91 01       	movw	r18, r2
    789c:	6c 2d       	mov	r22, r12
    789e:	ce 01       	movw	r24, r28
    78a0:	01 96       	adiw	r24, 0x01	; 1
    78a2:	f4 da       	rcall	.-2584   	; 0x6e8c <nonVolatileRead>
		if (r != NV_NO_ERROR)
    78a4:	81 11       	cpse	r24, r1
    78a6:	5e c0       	rjmp	.+188    	; 0x7964 <encryptedNonVolatileWrite+0x176>
		{
			return r;
		}
		writeU32LittleEndian(n, block_start);
    78a8:	b2 01       	movw	r22, r4
    78aa:	a1 01       	movw	r20, r2
    78ac:	ce 01       	movw	r24, r28
    78ae:	81 96       	adiw	r24, 0x21	; 33
    78b0:	0e 94 ef 0b 	call	0x17de	; 0x17de <writeU32LittleEndian>
		xexDecrypt(plaintext, ciphertext, n, 1);
    78b4:	21 e0       	ldi	r18, 0x01	; 1
    78b6:	ae 01       	movw	r20, r28
    78b8:	4f 5d       	subi	r20, 0xDF	; 223
    78ba:	5f 4f       	sbci	r21, 0xFF	; 255
    78bc:	be 01       	movw	r22, r28
    78be:	6f 5f       	subi	r22, 0xFF	; 255
    78c0:	7f 4f       	sbci	r23, 0xFF	; 255
    78c2:	ce 01       	movw	r24, r28
    78c4:	41 96       	adiw	r24, 0x11	; 17
    78c6:	57 df       	rcall	.-338    	; 0x7776 <xexDecrypt>
		while (length && block_offset < 16)
    78c8:	81 14       	cp	r8, r1
    78ca:	91 04       	cpc	r9, r1
    78cc:	a1 04       	cpc	r10, r1
    78ce:	b1 04       	cpc	r11, r1
    78d0:	e1 f0       	breq	.+56     	; 0x790a <encryptedNonVolatileWrite+0x11c>
    78d2:	af e0       	ldi	r26, 0x0F	; 15
    78d4:	ad 15       	cp	r26, r13
    78d6:	c8 f0       	brcs	.+50     	; 0x790a <encryptedNonVolatileWrite+0x11c>
		{
			plaintext[block_offset++] = *data++;
    78d8:	91 e0       	ldi	r25, 0x01	; 1
    78da:	9d 0d       	add	r25, r13
    78dc:	bf ef       	ldi	r27, 0xFF	; 255
    78de:	6b 1a       	sub	r6, r27
    78e0:	7b 0a       	sbc	r7, r27
    78e2:	e1 e1       	ldi	r30, 0x11	; 17
    78e4:	f0 e0       	ldi	r31, 0x00	; 0
    78e6:	ec 0f       	add	r30, r28
    78e8:	fd 1f       	adc	r31, r29
    78ea:	ed 0d       	add	r30, r13
    78ec:	f1 1d       	adc	r31, r1
    78ee:	d3 01       	movw	r26, r6
    78f0:	11 97       	sbiw	r26, 0x01	; 1
    78f2:	8c 91       	ld	r24, X
    78f4:	80 83       	st	Z, r24
			length--;
    78f6:	61 e0       	ldi	r22, 0x01	; 1
    78f8:	86 1a       	sub	r8, r22
    78fa:	91 08       	sbc	r9, r1
    78fc:	a1 08       	sbc	r10, r1
    78fe:	b1 08       	sbc	r11, r1
		{
			return r;
		}
		writeU32LittleEndian(n, block_start);
		xexDecrypt(plaintext, ciphertext, n, 1);
		while (length && block_offset < 16)
    7900:	21 f0       	breq	.+8      	; 0x790a <encryptedNonVolatileWrite+0x11c>
		{
			plaintext[block_offset++] = *data++;
    7902:	d9 2e       	mov	r13, r25
		{
			return r;
		}
		writeU32LittleEndian(n, block_start);
		xexDecrypt(plaintext, ciphertext, n, 1);
		while (length && block_offset < 16)
    7904:	80 e1       	ldi	r24, 0x10	; 16
    7906:	98 13       	cpse	r25, r24
    7908:	e7 cf       	rjmp	.-50     	; 0x78d8 <encryptedNonVolatileWrite+0xea>
		{
			plaintext[block_offset++] = *data++;
			length--;
		}
		block_offset = 0;
		xexEncrypt(ciphertext, plaintext, n, 1);
    790a:	21 e0       	ldi	r18, 0x01	; 1
    790c:	ae 01       	movw	r20, r28
    790e:	4f 5d       	subi	r20, 0xDF	; 223
    7910:	5f 4f       	sbci	r21, 0xFF	; 255
    7912:	be 01       	movw	r22, r28
    7914:	6f 5e       	subi	r22, 0xEF	; 239
    7916:	7f 4f       	sbci	r23, 0xFF	; 255
    7918:	ce 01       	movw	r24, r28
    791a:	01 96       	adiw	r24, 0x01	; 1
    791c:	17 df       	rcall	.-466    	; 0x774c <xexEncrypt>
		r = nonVolatileWrite(ciphertext, partition, block_start, 16);
    791e:	10 e1       	ldi	r17, 0x10	; 16
    7920:	e1 2e       	mov	r14, r17
    7922:	f1 2c       	mov	r15, r1
    7924:	00 e0       	ldi	r16, 0x00	; 0
    7926:	10 e0       	ldi	r17, 0x00	; 0
    7928:	a2 01       	movw	r20, r4
    792a:	91 01       	movw	r18, r2
    792c:	6c 2d       	mov	r22, r12
    792e:	ce 01       	movw	r24, r28
    7930:	01 96       	adiw	r24, 0x01	; 1
    7932:	0e 94 e3 33 	call	0x67c6	; 0x67c6 <nonVolatileWrite>
		if (r != NV_NO_ERROR)
    7936:	81 11       	cpse	r24, r1
    7938:	15 c0       	rjmp	.+42     	; 0x7964 <encryptedNonVolatileWrite+0x176>
		// Overflow occurred.
		return NV_INVALID_ADDRESS;
	}

	memset(n, 0, 16);
	for (; block_start <= block_end; block_start += 16)
    793a:	90 e1       	ldi	r25, 0x10	; 16
    793c:	29 0e       	add	r2, r25
    793e:	31 1c       	adc	r3, r1
    7940:	41 1c       	adc	r4, r1
    7942:	51 1c       	adc	r5, r1
		while (length && block_offset < 16)
		{
			plaintext[block_offset++] = *data++;
			length--;
		}
		block_offset = 0;
    7944:	d1 2c       	mov	r13, r1
		// Overflow occurred.
		return NV_INVALID_ADDRESS;
	}

	memset(n, 0, 16);
	for (; block_start <= block_end; block_start += 16)
    7946:	89 a9       	ldd	r24, Y+49	; 0x31
    7948:	9a a9       	ldd	r25, Y+50	; 0x32
    794a:	ab a9       	ldd	r26, Y+51	; 0x33
    794c:	bc a9       	ldd	r27, Y+52	; 0x34
    794e:	82 15       	cp	r24, r2
    7950:	93 05       	cpc	r25, r3
    7952:	a4 05       	cpc	r26, r4
    7954:	b5 05       	cpc	r27, r5
    7956:	08 f0       	brcs	.+2      	; 0x795a <encryptedNonVolatileWrite+0x16c>
    7958:	9a cf       	rjmp	.-204    	; 0x788e <encryptedNonVolatileWrite+0xa0>
		{
			return r;
		}
	}

	return NV_NO_ERROR;
    795a:	80 e0       	ldi	r24, 0x00	; 0
    795c:	03 c0       	rjmp	.+6      	; 0x7964 <encryptedNonVolatileWrite+0x176>
	block_offset = (uint8_t)(address & 0x0000000f);
	block_end = (address + length - 1) & 0xfffffff0;
	if ((address + length) < address)
	{
		// Overflow occurred.
		return NV_INVALID_ADDRESS;
    795e:	81 e0       	ldi	r24, 0x01	; 1
    7960:	01 c0       	rjmp	.+2      	; 0x7964 <encryptedNonVolatileWrite+0x176>
		{
			return r;
		}
	}

	return NV_NO_ERROR;
    7962:	80 e0       	ldi	r24, 0x00	; 0
}
    7964:	e4 96       	adiw	r28, 0x34	; 52
    7966:	0f b6       	in	r0, 0x3f	; 63
    7968:	f8 94       	cli
    796a:	de bf       	out	0x3e, r29	; 62
    796c:	0f be       	out	0x3f, r0	; 63
    796e:	cd bf       	out	0x3d, r28	; 61
    7970:	df 91       	pop	r29
    7972:	cf 91       	pop	r28
    7974:	1f 91       	pop	r17
    7976:	0f 91       	pop	r16
    7978:	ff 90       	pop	r15
    797a:	ef 90       	pop	r14
    797c:	df 90       	pop	r13
    797e:	cf 90       	pop	r12
    7980:	bf 90       	pop	r11
    7982:	af 90       	pop	r10
    7984:	9f 90       	pop	r9
    7986:	8f 90       	pop	r8
    7988:	7f 90       	pop	r7
    798a:	6f 90       	pop	r6
    798c:	5f 90       	pop	r5
    798e:	4f 90       	pop	r4
    7990:	3f 90       	pop	r3
    7992:	2f 90       	pop	r2
    7994:	08 95       	ret

00007996 <encryptedNonVolatileRead>:
  *                start reading from.
  * \param length The number of bytes to read.
  * \return See #NonVolatileReturnEnum for return values.
  */
NonVolatileReturn encryptedNonVolatileRead(uint8_t *data, NVPartitions partition, uint32_t address, uint32_t length)
{
    7996:	2f 92       	push	r2
    7998:	3f 92       	push	r3
    799a:	4f 92       	push	r4
    799c:	5f 92       	push	r5
    799e:	6f 92       	push	r6
    79a0:	7f 92       	push	r7
    79a2:	8f 92       	push	r8
    79a4:	9f 92       	push	r9
    79a6:	af 92       	push	r10
    79a8:	bf 92       	push	r11
    79aa:	cf 92       	push	r12
    79ac:	df 92       	push	r13
    79ae:	ef 92       	push	r14
    79b0:	ff 92       	push	r15
    79b2:	0f 93       	push	r16
    79b4:	1f 93       	push	r17
    79b6:	cf 93       	push	r28
    79b8:	df 93       	push	r29
    79ba:	cd b7       	in	r28, 0x3d	; 61
    79bc:	de b7       	in	r29, 0x3e	; 62
    79be:	e4 97       	sbiw	r28, 0x34	; 52
    79c0:	0f b6       	in	r0, 0x3f	; 63
    79c2:	f8 94       	cli
    79c4:	de bf       	out	0x3e, r29	; 62
    79c6:	0f be       	out	0x3f, r0	; 63
    79c8:	cd bf       	out	0x3d, r28	; 61
    79ca:	3c 01       	movw	r6, r24
    79cc:	c6 2e       	mov	r12, r22
    79ce:	47 01       	movw	r8, r14
    79d0:	58 01       	movw	r10, r16
	uint8_t n[16];
	NonVolatileReturn r;

	block_start = address & 0xfffffff0;
	block_offset = (uint8_t)(address & 0x0000000f);
	block_end = (address + length - 1) & 0xfffffff0;
    79d2:	da 01       	movw	r26, r20
    79d4:	c9 01       	movw	r24, r18
    79d6:	8e 0d       	add	r24, r14
    79d8:	9f 1d       	adc	r25, r15
    79da:	a0 1f       	adc	r26, r16
    79dc:	b1 1f       	adc	r27, r17
	if ((address + length) < address)
    79de:	82 17       	cp	r24, r18
    79e0:	93 07       	cpc	r25, r19
    79e2:	a4 07       	cpc	r26, r20
    79e4:	b5 07       	cpc	r27, r21
    79e6:	08 f4       	brcc	.+2      	; 0x79ea <encryptedNonVolatileRead+0x54>
    79e8:	76 c0       	rjmp	.+236    	; 0x7ad6 <encryptedNonVolatileRead+0x140>
	uint8_t ciphertext[16];
	uint8_t plaintext[16];
	uint8_t n[16];
	NonVolatileReturn r;

	block_start = address & 0xfffffff0;
    79ea:	19 01       	movw	r2, r18
    79ec:	2a 01       	movw	r4, r20
    79ee:	60 ef       	ldi	r22, 0xF0	; 240
    79f0:	26 22       	and	r2, r22
	block_offset = (uint8_t)(address & 0x0000000f);
	block_end = (address + length - 1) & 0xfffffff0;
    79f2:	7c 01       	movw	r14, r24
    79f4:	8d 01       	movw	r16, r26
    79f6:	61 e0       	ldi	r22, 0x01	; 1
    79f8:	e6 1a       	sub	r14, r22
    79fa:	f1 08       	sbc	r15, r1
    79fc:	01 09       	sbc	r16, r1
    79fe:	11 09       	sbc	r17, r1
    7a00:	d8 01       	movw	r26, r16
    7a02:	c7 01       	movw	r24, r14
    7a04:	80 7f       	andi	r24, 0xF0	; 240
    7a06:	89 ab       	std	Y+49, r24	; 0x31
    7a08:	9a ab       	std	Y+50, r25	; 0x32
    7a0a:	ab ab       	std	Y+51, r26	; 0x33
    7a0c:	bc ab       	std	Y+52, r27	; 0x34
	{
		// Overflow occurred.
		return NV_INVALID_ADDRESS;
	}

	memset(n, 0, 16);
    7a0e:	fe 01       	movw	r30, r28
    7a10:	b1 96       	adiw	r30, 0x21	; 33
    7a12:	80 e1       	ldi	r24, 0x10	; 16
    7a14:	df 01       	movw	r26, r30
    7a16:	1d 92       	st	X+, r1
    7a18:	8a 95       	dec	r24
    7a1a:	e9 f7       	brne	.-6      	; 0x7a16 <encryptedNonVolatileRead+0x80>
	for (; block_start <= block_end; block_start += 16)
    7a1c:	89 a9       	ldd	r24, Y+49	; 0x31
    7a1e:	9a a9       	ldd	r25, Y+50	; 0x32
    7a20:	ab a9       	ldd	r26, Y+51	; 0x33
    7a22:	bc a9       	ldd	r27, Y+52	; 0x34
    7a24:	82 15       	cp	r24, r2
    7a26:	93 05       	cpc	r25, r3
    7a28:	a4 05       	cpc	r26, r4
    7a2a:	b5 05       	cpc	r27, r5
    7a2c:	08 f4       	brcc	.+2      	; 0x7a30 <encryptedNonVolatileRead+0x9a>
    7a2e:	55 c0       	rjmp	.+170    	; 0x7ada <encryptedNonVolatileRead+0x144>
	uint8_t plaintext[16];
	uint8_t n[16];
	NonVolatileReturn r;

	block_start = address & 0xfffffff0;
	block_offset = (uint8_t)(address & 0x0000000f);
    7a30:	92 2f       	mov	r25, r18
    7a32:	9f 70       	andi	r25, 0x0F	; 15
    7a34:	d9 2e       	mov	r13, r25
	}

	memset(n, 0, 16);
	for (; block_start <= block_end; block_start += 16)
	{
		r = nonVolatileRead(ciphertext, partition, block_start, 16);
    7a36:	10 e1       	ldi	r17, 0x10	; 16
    7a38:	e1 2e       	mov	r14, r17
    7a3a:	f1 2c       	mov	r15, r1
    7a3c:	00 e0       	ldi	r16, 0x00	; 0
    7a3e:	10 e0       	ldi	r17, 0x00	; 0
    7a40:	a2 01       	movw	r20, r4
    7a42:	91 01       	movw	r18, r2
    7a44:	6c 2d       	mov	r22, r12
    7a46:	ce 01       	movw	r24, r28
    7a48:	01 96       	adiw	r24, 0x01	; 1
    7a4a:	20 da       	rcall	.-3008   	; 0x6e8c <nonVolatileRead>
		if (r != NV_NO_ERROR)
    7a4c:	81 11       	cpse	r24, r1
    7a4e:	46 c0       	rjmp	.+140    	; 0x7adc <encryptedNonVolatileRead+0x146>
		{
			return r;
		}
		writeU32LittleEndian(n, block_start);
    7a50:	b2 01       	movw	r22, r4
    7a52:	a1 01       	movw	r20, r2
    7a54:	ce 01       	movw	r24, r28
    7a56:	81 96       	adiw	r24, 0x21	; 33
    7a58:	0e 94 ef 0b 	call	0x17de	; 0x17de <writeU32LittleEndian>
		xexDecrypt(plaintext, ciphertext, n, 1);
    7a5c:	21 e0       	ldi	r18, 0x01	; 1
    7a5e:	ae 01       	movw	r20, r28
    7a60:	4f 5d       	subi	r20, 0xDF	; 223
    7a62:	5f 4f       	sbci	r21, 0xFF	; 255
    7a64:	be 01       	movw	r22, r28
    7a66:	6f 5f       	subi	r22, 0xFF	; 255
    7a68:	7f 4f       	sbci	r23, 0xFF	; 255
    7a6a:	ce 01       	movw	r24, r28
    7a6c:	41 96       	adiw	r24, 0x11	; 17
    7a6e:	83 de       	rcall	.-762    	; 0x7776 <xexDecrypt>
		while (length && block_offset < 16)
    7a70:	81 14       	cp	r8, r1
    7a72:	91 04       	cpc	r9, r1
    7a74:	a1 04       	cpc	r10, r1
    7a76:	b1 04       	cpc	r11, r1
    7a78:	e1 f0       	breq	.+56     	; 0x7ab2 <encryptedNonVolatileRead+0x11c>
    7a7a:	af e0       	ldi	r26, 0x0F	; 15
    7a7c:	ad 15       	cp	r26, r13
    7a7e:	c8 f0       	brcs	.+50     	; 0x7ab2 <encryptedNonVolatileRead+0x11c>
		{
			*data++ = plaintext[block_offset++];
    7a80:	bf ef       	ldi	r27, 0xFF	; 255
    7a82:	6b 1a       	sub	r6, r27
    7a84:	7b 0a       	sbc	r7, r27
    7a86:	91 e0       	ldi	r25, 0x01	; 1
    7a88:	9d 0d       	add	r25, r13
    7a8a:	f3 01       	movw	r30, r6
    7a8c:	31 97       	sbiw	r30, 0x01	; 1
    7a8e:	a1 e1       	ldi	r26, 0x11	; 17
    7a90:	b0 e0       	ldi	r27, 0x00	; 0
    7a92:	ac 0f       	add	r26, r28
    7a94:	bd 1f       	adc	r27, r29
    7a96:	ad 0d       	add	r26, r13
    7a98:	b1 1d       	adc	r27, r1
    7a9a:	8c 91       	ld	r24, X
    7a9c:	80 83       	st	Z, r24
			length--;
    7a9e:	61 e0       	ldi	r22, 0x01	; 1
    7aa0:	86 1a       	sub	r8, r22
    7aa2:	91 08       	sbc	r9, r1
    7aa4:	a1 08       	sbc	r10, r1
    7aa6:	b1 08       	sbc	r11, r1
		{
			return r;
		}
		writeU32LittleEndian(n, block_start);
		xexDecrypt(plaintext, ciphertext, n, 1);
		while (length && block_offset < 16)
    7aa8:	21 f0       	breq	.+8      	; 0x7ab2 <encryptedNonVolatileRead+0x11c>
		{
			*data++ = plaintext[block_offset++];
    7aaa:	d9 2e       	mov	r13, r25
		{
			return r;
		}
		writeU32LittleEndian(n, block_start);
		xexDecrypt(plaintext, ciphertext, n, 1);
		while (length && block_offset < 16)
    7aac:	80 e1       	ldi	r24, 0x10	; 16
    7aae:	98 13       	cpse	r25, r24
    7ab0:	e7 cf       	rjmp	.-50     	; 0x7a80 <encryptedNonVolatileRead+0xea>
		// Overflow occurred.
		return NV_INVALID_ADDRESS;
	}

	memset(n, 0, 16);
	for (; block_start <= block_end; block_start += 16)
    7ab2:	90 e1       	ldi	r25, 0x10	; 16
    7ab4:	29 0e       	add	r2, r25
    7ab6:	31 1c       	adc	r3, r1
    7ab8:	41 1c       	adc	r4, r1
    7aba:	51 1c       	adc	r5, r1
		while (length && block_offset < 16)
		{
			*data++ = plaintext[block_offset++];
			length--;
		}
		block_offset = 0;
    7abc:	d1 2c       	mov	r13, r1
		// Overflow occurred.
		return NV_INVALID_ADDRESS;
	}

	memset(n, 0, 16);
	for (; block_start <= block_end; block_start += 16)
    7abe:	89 a9       	ldd	r24, Y+49	; 0x31
    7ac0:	9a a9       	ldd	r25, Y+50	; 0x32
    7ac2:	ab a9       	ldd	r26, Y+51	; 0x33
    7ac4:	bc a9       	ldd	r27, Y+52	; 0x34
    7ac6:	82 15       	cp	r24, r2
    7ac8:	93 05       	cpc	r25, r3
    7aca:	a4 05       	cpc	r26, r4
    7acc:	b5 05       	cpc	r27, r5
    7ace:	08 f0       	brcs	.+2      	; 0x7ad2 <encryptedNonVolatileRead+0x13c>
    7ad0:	b2 cf       	rjmp	.-156    	; 0x7a36 <encryptedNonVolatileRead+0xa0>
			length--;
		}
		block_offset = 0;
	}

	return NV_NO_ERROR;
    7ad2:	80 e0       	ldi	r24, 0x00	; 0
    7ad4:	03 c0       	rjmp	.+6      	; 0x7adc <encryptedNonVolatileRead+0x146>
	block_offset = (uint8_t)(address & 0x0000000f);
	block_end = (address + length - 1) & 0xfffffff0;
	if ((address + length) < address)
	{
		// Overflow occurred.
		return NV_INVALID_ADDRESS;
    7ad6:	81 e0       	ldi	r24, 0x01	; 1
    7ad8:	01 c0       	rjmp	.+2      	; 0x7adc <encryptedNonVolatileRead+0x146>
			length--;
		}
		block_offset = 0;
	}

	return NV_NO_ERROR;
    7ada:	80 e0       	ldi	r24, 0x00	; 0
}
    7adc:	e4 96       	adiw	r28, 0x34	; 52
    7ade:	0f b6       	in	r0, 0x3f	; 63
    7ae0:	f8 94       	cli
    7ae2:	de bf       	out	0x3e, r29	; 62
    7ae4:	0f be       	out	0x3f, r0	; 63
    7ae6:	cd bf       	out	0x3d, r28	; 61
    7ae8:	df 91       	pop	r29
    7aea:	cf 91       	pop	r28
    7aec:	1f 91       	pop	r17
    7aee:	0f 91       	pop	r16
    7af0:	ff 90       	pop	r15
    7af2:	ef 90       	pop	r14
    7af4:	df 90       	pop	r13
    7af6:	cf 90       	pop	r12
    7af8:	bf 90       	pop	r11
    7afa:	af 90       	pop	r10
    7afc:	9f 90       	pop	r9
    7afe:	8f 90       	pop	r8
    7b00:	7f 90       	pop	r7
    7b02:	6f 90       	pop	r6
    7b04:	5f 90       	pop	r5
    7b06:	4f 90       	pop	r4
    7b08:	3f 90       	pop	r3
    7b0a:	2f 90       	pop	r2
    7b0c:	08 95       	ret

00007b0e <__udivmodsi4>:
    7b0e:	a1 e2       	ldi	r26, 0x21	; 33
    7b10:	1a 2e       	mov	r1, r26
    7b12:	aa 1b       	sub	r26, r26
    7b14:	bb 1b       	sub	r27, r27
    7b16:	fd 01       	movw	r30, r26
    7b18:	0d c0       	rjmp	.+26     	; 0x7b34 <__udivmodsi4_ep>

00007b1a <__udivmodsi4_loop>:
    7b1a:	aa 1f       	adc	r26, r26
    7b1c:	bb 1f       	adc	r27, r27
    7b1e:	ee 1f       	adc	r30, r30
    7b20:	ff 1f       	adc	r31, r31
    7b22:	a2 17       	cp	r26, r18
    7b24:	b3 07       	cpc	r27, r19
    7b26:	e4 07       	cpc	r30, r20
    7b28:	f5 07       	cpc	r31, r21
    7b2a:	20 f0       	brcs	.+8      	; 0x7b34 <__udivmodsi4_ep>
    7b2c:	a2 1b       	sub	r26, r18
    7b2e:	b3 0b       	sbc	r27, r19
    7b30:	e4 0b       	sbc	r30, r20
    7b32:	f5 0b       	sbc	r31, r21

00007b34 <__udivmodsi4_ep>:
    7b34:	66 1f       	adc	r22, r22
    7b36:	77 1f       	adc	r23, r23
    7b38:	88 1f       	adc	r24, r24
    7b3a:	99 1f       	adc	r25, r25
    7b3c:	1a 94       	dec	r1
    7b3e:	69 f7       	brne	.-38     	; 0x7b1a <__udivmodsi4_loop>
    7b40:	60 95       	com	r22
    7b42:	70 95       	com	r23
    7b44:	80 95       	com	r24
    7b46:	90 95       	com	r25
    7b48:	9b 01       	movw	r18, r22
    7b4a:	ac 01       	movw	r20, r24
    7b4c:	bd 01       	movw	r22, r26
    7b4e:	cf 01       	movw	r24, r30
    7b50:	08 95       	ret

00007b52 <__muluhisi3>:
    7b52:	64 d0       	rcall	.+200    	; 0x7c1c <__umulhisi3>
    7b54:	a5 9f       	mul	r26, r21
    7b56:	90 0d       	add	r25, r0
    7b58:	b4 9f       	mul	r27, r20
    7b5a:	90 0d       	add	r25, r0
    7b5c:	a4 9f       	mul	r26, r20
    7b5e:	80 0d       	add	r24, r0
    7b60:	91 1d       	adc	r25, r1
    7b62:	11 24       	eor	r1, r1
    7b64:	08 95       	ret

00007b66 <__ashldi3>:
    7b66:	0f 93       	push	r16
    7b68:	08 30       	cpi	r16, 0x08	; 8
    7b6a:	90 f0       	brcs	.+36     	; 0x7b90 <__ashldi3+0x2a>
    7b6c:	98 2f       	mov	r25, r24
    7b6e:	87 2f       	mov	r24, r23
    7b70:	76 2f       	mov	r23, r22
    7b72:	65 2f       	mov	r22, r21
    7b74:	54 2f       	mov	r21, r20
    7b76:	43 2f       	mov	r20, r19
    7b78:	32 2f       	mov	r19, r18
    7b7a:	22 27       	eor	r18, r18
    7b7c:	08 50       	subi	r16, 0x08	; 8
    7b7e:	f4 cf       	rjmp	.-24     	; 0x7b68 <__ashldi3+0x2>
    7b80:	22 0f       	add	r18, r18
    7b82:	33 1f       	adc	r19, r19
    7b84:	44 1f       	adc	r20, r20
    7b86:	55 1f       	adc	r21, r21
    7b88:	66 1f       	adc	r22, r22
    7b8a:	77 1f       	adc	r23, r23
    7b8c:	88 1f       	adc	r24, r24
    7b8e:	99 1f       	adc	r25, r25
    7b90:	0a 95       	dec	r16
    7b92:	b2 f7       	brpl	.-20     	; 0x7b80 <__ashldi3+0x1a>
    7b94:	0f 91       	pop	r16
    7b96:	08 95       	ret

00007b98 <__ashrdi3>:
    7b98:	97 fb       	bst	r25, 7
    7b9a:	10 f8       	bld	r1, 0

00007b9c <__lshrdi3>:
    7b9c:	16 94       	lsr	r1
    7b9e:	00 08       	sbc	r0, r0
    7ba0:	0f 93       	push	r16
    7ba2:	08 30       	cpi	r16, 0x08	; 8
    7ba4:	98 f0       	brcs	.+38     	; 0x7bcc <__lshrdi3+0x30>
    7ba6:	08 50       	subi	r16, 0x08	; 8
    7ba8:	23 2f       	mov	r18, r19
    7baa:	34 2f       	mov	r19, r20
    7bac:	45 2f       	mov	r20, r21
    7bae:	56 2f       	mov	r21, r22
    7bb0:	67 2f       	mov	r22, r23
    7bb2:	78 2f       	mov	r23, r24
    7bb4:	89 2f       	mov	r24, r25
    7bb6:	90 2d       	mov	r25, r0
    7bb8:	f4 cf       	rjmp	.-24     	; 0x7ba2 <__lshrdi3+0x6>
    7bba:	05 94       	asr	r0
    7bbc:	97 95       	ror	r25
    7bbe:	87 95       	ror	r24
    7bc0:	77 95       	ror	r23
    7bc2:	67 95       	ror	r22
    7bc4:	57 95       	ror	r21
    7bc6:	47 95       	ror	r20
    7bc8:	37 95       	ror	r19
    7bca:	27 95       	ror	r18
    7bcc:	0a 95       	dec	r16
    7bce:	aa f7       	brpl	.-22     	; 0x7bba <__lshrdi3+0x1e>
    7bd0:	0f 91       	pop	r16
    7bd2:	08 95       	ret

00007bd4 <__rotldi3>:
    7bd4:	0f 93       	push	r16
    7bd6:	08 30       	cpi	r16, 0x08	; 8
    7bd8:	a0 f0       	brcs	.+40     	; 0x7c02 <__rotldi3+0x2e>
    7bda:	08 50       	subi	r16, 0x08	; 8
    7bdc:	09 2e       	mov	r0, r25
    7bde:	98 2f       	mov	r25, r24
    7be0:	87 2f       	mov	r24, r23
    7be2:	76 2f       	mov	r23, r22
    7be4:	65 2f       	mov	r22, r21
    7be6:	54 2f       	mov	r21, r20
    7be8:	43 2f       	mov	r20, r19
    7bea:	32 2f       	mov	r19, r18
    7bec:	20 2d       	mov	r18, r0
    7bee:	f3 cf       	rjmp	.-26     	; 0x7bd6 <__rotldi3+0x2>
    7bf0:	22 0f       	add	r18, r18
    7bf2:	33 1f       	adc	r19, r19
    7bf4:	44 1f       	adc	r20, r20
    7bf6:	55 1f       	adc	r21, r21
    7bf8:	66 1f       	adc	r22, r22
    7bfa:	77 1f       	adc	r23, r23
    7bfc:	88 1f       	adc	r24, r24
    7bfe:	99 1f       	adc	r25, r25
    7c00:	21 1d       	adc	r18, r1
    7c02:	0a 95       	dec	r16
    7c04:	aa f7       	brpl	.-22     	; 0x7bf0 <__rotldi3+0x1c>
    7c06:	0f 91       	pop	r16
    7c08:	08 95       	ret

00007c0a <__adddi3>:
    7c0a:	2a 0d       	add	r18, r10
    7c0c:	3b 1d       	adc	r19, r11
    7c0e:	4c 1d       	adc	r20, r12
    7c10:	5d 1d       	adc	r21, r13
    7c12:	6e 1d       	adc	r22, r14
    7c14:	7f 1d       	adc	r23, r15
    7c16:	80 1f       	adc	r24, r16
    7c18:	91 1f       	adc	r25, r17
    7c1a:	08 95       	ret

00007c1c <__umulhisi3>:
    7c1c:	a2 9f       	mul	r26, r18
    7c1e:	b0 01       	movw	r22, r0
    7c20:	b3 9f       	mul	r27, r19
    7c22:	c0 01       	movw	r24, r0
    7c24:	a3 9f       	mul	r26, r19
    7c26:	70 0d       	add	r23, r0
    7c28:	81 1d       	adc	r24, r1
    7c2a:	11 24       	eor	r1, r1
    7c2c:	91 1d       	adc	r25, r1
    7c2e:	b2 9f       	mul	r27, r18
    7c30:	70 0d       	add	r23, r0
    7c32:	81 1d       	adc	r24, r1
    7c34:	11 24       	eor	r1, r1
    7c36:	91 1d       	adc	r25, r1
    7c38:	08 95       	ret

00007c3a <do_rand>:
    7c3a:	8f 92       	push	r8
    7c3c:	9f 92       	push	r9
    7c3e:	af 92       	push	r10
    7c40:	bf 92       	push	r11
    7c42:	cf 92       	push	r12
    7c44:	df 92       	push	r13
    7c46:	ef 92       	push	r14
    7c48:	ff 92       	push	r15
    7c4a:	cf 93       	push	r28
    7c4c:	df 93       	push	r29
    7c4e:	ec 01       	movw	r28, r24
    7c50:	68 81       	ld	r22, Y
    7c52:	79 81       	ldd	r23, Y+1	; 0x01
    7c54:	8a 81       	ldd	r24, Y+2	; 0x02
    7c56:	9b 81       	ldd	r25, Y+3	; 0x03
    7c58:	61 15       	cp	r22, r1
    7c5a:	71 05       	cpc	r23, r1
    7c5c:	81 05       	cpc	r24, r1
    7c5e:	91 05       	cpc	r25, r1
    7c60:	21 f4       	brne	.+8      	; 0x7c6a <do_rand+0x30>
    7c62:	64 e2       	ldi	r22, 0x24	; 36
    7c64:	79 ed       	ldi	r23, 0xD9	; 217
    7c66:	8b e5       	ldi	r24, 0x5B	; 91
    7c68:	97 e0       	ldi	r25, 0x07	; 7
    7c6a:	2d e1       	ldi	r18, 0x1D	; 29
    7c6c:	33 ef       	ldi	r19, 0xF3	; 243
    7c6e:	41 e0       	ldi	r20, 0x01	; 1
    7c70:	50 e0       	ldi	r21, 0x00	; 0
    7c72:	d3 d4       	rcall	.+2470   	; 0x861a <__divmodsi4>
    7c74:	49 01       	movw	r8, r18
    7c76:	5a 01       	movw	r10, r20
    7c78:	9b 01       	movw	r18, r22
    7c7a:	ac 01       	movw	r20, r24
    7c7c:	a7 ea       	ldi	r26, 0xA7	; 167
    7c7e:	b1 e4       	ldi	r27, 0x41	; 65
    7c80:	68 df       	rcall	.-304    	; 0x7b52 <__muluhisi3>
    7c82:	6b 01       	movw	r12, r22
    7c84:	7c 01       	movw	r14, r24
    7c86:	ac ee       	ldi	r26, 0xEC	; 236
    7c88:	b4 ef       	ldi	r27, 0xF4	; 244
    7c8a:	a5 01       	movw	r20, r10
    7c8c:	94 01       	movw	r18, r8
    7c8e:	e3 d4       	rcall	.+2502   	; 0x8656 <__mulohisi3>
    7c90:	dc 01       	movw	r26, r24
    7c92:	cb 01       	movw	r24, r22
    7c94:	8c 0d       	add	r24, r12
    7c96:	9d 1d       	adc	r25, r13
    7c98:	ae 1d       	adc	r26, r14
    7c9a:	bf 1d       	adc	r27, r15
    7c9c:	b7 ff       	sbrs	r27, 7
    7c9e:	03 c0       	rjmp	.+6      	; 0x7ca6 <do_rand+0x6c>
    7ca0:	01 97       	sbiw	r24, 0x01	; 1
    7ca2:	a1 09       	sbc	r26, r1
    7ca4:	b0 48       	sbci	r27, 0x80	; 128
    7ca6:	88 83       	st	Y, r24
    7ca8:	99 83       	std	Y+1, r25	; 0x01
    7caa:	aa 83       	std	Y+2, r26	; 0x02
    7cac:	bb 83       	std	Y+3, r27	; 0x03
    7cae:	9f 77       	andi	r25, 0x7F	; 127
    7cb0:	df 91       	pop	r29
    7cb2:	cf 91       	pop	r28
    7cb4:	ff 90       	pop	r15
    7cb6:	ef 90       	pop	r14
    7cb8:	df 90       	pop	r13
    7cba:	cf 90       	pop	r12
    7cbc:	bf 90       	pop	r11
    7cbe:	af 90       	pop	r10
    7cc0:	9f 90       	pop	r9
    7cc2:	8f 90       	pop	r8
    7cc4:	08 95       	ret

00007cc6 <rand_r>:
    7cc6:	b9 cf       	rjmp	.-142    	; 0x7c3a <do_rand>

00007cc8 <rand>:
    7cc8:	80 e0       	ldi	r24, 0x00	; 0
    7cca:	91 e0       	ldi	r25, 0x01	; 1
    7ccc:	b6 cf       	rjmp	.-148    	; 0x7c3a <do_rand>

00007cce <srand>:
    7cce:	a0 e0       	ldi	r26, 0x00	; 0
    7cd0:	b0 e0       	ldi	r27, 0x00	; 0
    7cd2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    7cd6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    7cda:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    7cde:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    7ce2:	08 95       	ret

00007ce4 <abort>:
    7ce4:	81 e0       	ldi	r24, 0x01	; 1
    7ce6:	90 e0       	ldi	r25, 0x00	; 0
    7ce8:	f8 94       	cli
    7cea:	b9 c4       	rjmp	.+2418   	; 0x865e <_exit>

00007cec <memcmp>:
    7cec:	fb 01       	movw	r30, r22
    7cee:	dc 01       	movw	r26, r24
    7cf0:	04 c0       	rjmp	.+8      	; 0x7cfa <memcmp+0xe>
    7cf2:	8d 91       	ld	r24, X+
    7cf4:	01 90       	ld	r0, Z+
    7cf6:	80 19       	sub	r24, r0
    7cf8:	21 f4       	brne	.+8      	; 0x7d02 <memcmp+0x16>
    7cfa:	41 50       	subi	r20, 0x01	; 1
    7cfc:	50 40       	sbci	r21, 0x00	; 0
    7cfe:	c8 f7       	brcc	.-14     	; 0x7cf2 <memcmp+0x6>
    7d00:	88 1b       	sub	r24, r24
    7d02:	99 0b       	sbc	r25, r25
    7d04:	08 95       	ret

00007d06 <memcpy>:
    7d06:	fb 01       	movw	r30, r22
    7d08:	dc 01       	movw	r26, r24
    7d0a:	02 c0       	rjmp	.+4      	; 0x7d10 <memcpy+0xa>
    7d0c:	01 90       	ld	r0, Z+
    7d0e:	0d 92       	st	X+, r0
    7d10:	41 50       	subi	r20, 0x01	; 1
    7d12:	50 40       	sbci	r21, 0x00	; 0
    7d14:	d8 f7       	brcc	.-10     	; 0x7d0c <memcpy+0x6>
    7d16:	08 95       	ret

00007d18 <memset>:
    7d18:	dc 01       	movw	r26, r24
    7d1a:	01 c0       	rjmp	.+2      	; 0x7d1e <memset+0x6>
    7d1c:	6d 93       	st	X+, r22
    7d1e:	41 50       	subi	r20, 0x01	; 1
    7d20:	50 40       	sbci	r21, 0x00	; 0
    7d22:	e0 f7       	brcc	.-8      	; 0x7d1c <memset+0x4>
    7d24:	08 95       	ret

00007d26 <fdevopen>:
    7d26:	0f 93       	push	r16
    7d28:	1f 93       	push	r17
    7d2a:	cf 93       	push	r28
    7d2c:	df 93       	push	r29
    7d2e:	00 97       	sbiw	r24, 0x00	; 0
    7d30:	31 f4       	brne	.+12     	; 0x7d3e <fdevopen+0x18>
    7d32:	61 15       	cp	r22, r1
    7d34:	71 05       	cpc	r23, r1
    7d36:	19 f4       	brne	.+6      	; 0x7d3e <fdevopen+0x18>
    7d38:	80 e0       	ldi	r24, 0x00	; 0
    7d3a:	90 e0       	ldi	r25, 0x00	; 0
    7d3c:	39 c0       	rjmp	.+114    	; 0x7db0 <fdevopen+0x8a>
    7d3e:	8b 01       	movw	r16, r22
    7d40:	ec 01       	movw	r28, r24
    7d42:	6e e0       	ldi	r22, 0x0E	; 14
    7d44:	70 e0       	ldi	r23, 0x00	; 0
    7d46:	81 e0       	ldi	r24, 0x01	; 1
    7d48:	90 e0       	ldi	r25, 0x00	; 0
    7d4a:	7c d2       	rcall	.+1272   	; 0x8244 <calloc>
    7d4c:	fc 01       	movw	r30, r24
    7d4e:	89 2b       	or	r24, r25
    7d50:	99 f3       	breq	.-26     	; 0x7d38 <fdevopen+0x12>
    7d52:	80 e8       	ldi	r24, 0x80	; 128
    7d54:	83 83       	std	Z+3, r24	; 0x03
    7d56:	01 15       	cp	r16, r1
    7d58:	11 05       	cpc	r17, r1
    7d5a:	71 f0       	breq	.+28     	; 0x7d78 <fdevopen+0x52>
    7d5c:	13 87       	std	Z+11, r17	; 0x0b
    7d5e:	02 87       	std	Z+10, r16	; 0x0a
    7d60:	81 e8       	ldi	r24, 0x81	; 129
    7d62:	83 83       	std	Z+3, r24	; 0x03
    7d64:	80 91 fa 08 	lds	r24, 0x08FA	; 0x8008fa <__iob>
    7d68:	90 91 fb 08 	lds	r25, 0x08FB	; 0x8008fb <__iob+0x1>
    7d6c:	89 2b       	or	r24, r25
    7d6e:	21 f4       	brne	.+8      	; 0x7d78 <fdevopen+0x52>
    7d70:	f0 93 fb 08 	sts	0x08FB, r31	; 0x8008fb <__iob+0x1>
    7d74:	e0 93 fa 08 	sts	0x08FA, r30	; 0x8008fa <__iob>
    7d78:	20 97       	sbiw	r28, 0x00	; 0
    7d7a:	c9 f0       	breq	.+50     	; 0x7dae <fdevopen+0x88>
    7d7c:	d1 87       	std	Z+9, r29	; 0x09
    7d7e:	c0 87       	std	Z+8, r28	; 0x08
    7d80:	83 81       	ldd	r24, Z+3	; 0x03
    7d82:	82 60       	ori	r24, 0x02	; 2
    7d84:	83 83       	std	Z+3, r24	; 0x03
    7d86:	80 91 fc 08 	lds	r24, 0x08FC	; 0x8008fc <__iob+0x2>
    7d8a:	90 91 fd 08 	lds	r25, 0x08FD	; 0x8008fd <__iob+0x3>
    7d8e:	89 2b       	or	r24, r25
    7d90:	71 f4       	brne	.+28     	; 0x7dae <fdevopen+0x88>
    7d92:	f0 93 fd 08 	sts	0x08FD, r31	; 0x8008fd <__iob+0x3>
    7d96:	e0 93 fc 08 	sts	0x08FC, r30	; 0x8008fc <__iob+0x2>
    7d9a:	80 91 fe 08 	lds	r24, 0x08FE	; 0x8008fe <__iob+0x4>
    7d9e:	90 91 ff 08 	lds	r25, 0x08FF	; 0x8008ff <__iob+0x5>
    7da2:	89 2b       	or	r24, r25
    7da4:	21 f4       	brne	.+8      	; 0x7dae <fdevopen+0x88>
    7da6:	f0 93 ff 08 	sts	0x08FF, r31	; 0x8008ff <__iob+0x5>
    7daa:	e0 93 fe 08 	sts	0x08FE, r30	; 0x8008fe <__iob+0x4>
    7dae:	cf 01       	movw	r24, r30
    7db0:	df 91       	pop	r29
    7db2:	cf 91       	pop	r28
    7db4:	1f 91       	pop	r17
    7db6:	0f 91       	pop	r16
    7db8:	08 95       	ret

00007dba <printf>:
    7dba:	cf 93       	push	r28
    7dbc:	df 93       	push	r29
    7dbe:	cd b7       	in	r28, 0x3d	; 61
    7dc0:	de b7       	in	r29, 0x3e	; 62
    7dc2:	ae 01       	movw	r20, r28
    7dc4:	4b 5f       	subi	r20, 0xFB	; 251
    7dc6:	5f 4f       	sbci	r21, 0xFF	; 255
    7dc8:	fa 01       	movw	r30, r20
    7dca:	61 91       	ld	r22, Z+
    7dcc:	71 91       	ld	r23, Z+
    7dce:	af 01       	movw	r20, r30
    7dd0:	80 91 fc 08 	lds	r24, 0x08FC	; 0x8008fc <__iob+0x2>
    7dd4:	90 91 fd 08 	lds	r25, 0x08FD	; 0x8008fd <__iob+0x3>
    7dd8:	38 d0       	rcall	.+112    	; 0x7e4a <vfprintf>
    7dda:	df 91       	pop	r29
    7ddc:	cf 91       	pop	r28
    7dde:	08 95       	ret

00007de0 <putchar>:
    7de0:	60 91 fc 08 	lds	r22, 0x08FC	; 0x8008fc <__iob+0x2>
    7de4:	70 91 fd 08 	lds	r23, 0x08FD	; 0x8008fd <__iob+0x3>
    7de8:	7e c3       	rjmp	.+1788   	; 0x84e6 <fputc>

00007dea <puts>:
    7dea:	0f 93       	push	r16
    7dec:	1f 93       	push	r17
    7dee:	cf 93       	push	r28
    7df0:	df 93       	push	r29
    7df2:	e0 91 fc 08 	lds	r30, 0x08FC	; 0x8008fc <__iob+0x2>
    7df6:	f0 91 fd 08 	lds	r31, 0x08FD	; 0x8008fd <__iob+0x3>
    7dfa:	23 81       	ldd	r18, Z+3	; 0x03
    7dfc:	21 ff       	sbrs	r18, 1
    7dfe:	1b c0       	rjmp	.+54     	; 0x7e36 <puts+0x4c>
    7e00:	8c 01       	movw	r16, r24
    7e02:	d0 e0       	ldi	r29, 0x00	; 0
    7e04:	c0 e0       	ldi	r28, 0x00	; 0
    7e06:	f8 01       	movw	r30, r16
    7e08:	81 91       	ld	r24, Z+
    7e0a:	8f 01       	movw	r16, r30
    7e0c:	60 91 fc 08 	lds	r22, 0x08FC	; 0x8008fc <__iob+0x2>
    7e10:	70 91 fd 08 	lds	r23, 0x08FD	; 0x8008fd <__iob+0x3>
    7e14:	db 01       	movw	r26, r22
    7e16:	18 96       	adiw	r26, 0x08	; 8
    7e18:	ed 91       	ld	r30, X+
    7e1a:	fc 91       	ld	r31, X
    7e1c:	19 97       	sbiw	r26, 0x09	; 9
    7e1e:	88 23       	and	r24, r24
    7e20:	31 f0       	breq	.+12     	; 0x7e2e <puts+0x44>
    7e22:	09 95       	icall
    7e24:	89 2b       	or	r24, r25
    7e26:	79 f3       	breq	.-34     	; 0x7e06 <puts+0x1c>
    7e28:	df ef       	ldi	r29, 0xFF	; 255
    7e2a:	cf ef       	ldi	r28, 0xFF	; 255
    7e2c:	ec cf       	rjmp	.-40     	; 0x7e06 <puts+0x1c>
    7e2e:	8a e0       	ldi	r24, 0x0A	; 10
    7e30:	09 95       	icall
    7e32:	89 2b       	or	r24, r25
    7e34:	19 f0       	breq	.+6      	; 0x7e3c <puts+0x52>
    7e36:	8f ef       	ldi	r24, 0xFF	; 255
    7e38:	9f ef       	ldi	r25, 0xFF	; 255
    7e3a:	02 c0       	rjmp	.+4      	; 0x7e40 <puts+0x56>
    7e3c:	8d 2f       	mov	r24, r29
    7e3e:	9c 2f       	mov	r25, r28
    7e40:	df 91       	pop	r29
    7e42:	cf 91       	pop	r28
    7e44:	1f 91       	pop	r17
    7e46:	0f 91       	pop	r16
    7e48:	08 95       	ret

00007e4a <vfprintf>:
    7e4a:	2f 92       	push	r2
    7e4c:	3f 92       	push	r3
    7e4e:	4f 92       	push	r4
    7e50:	5f 92       	push	r5
    7e52:	6f 92       	push	r6
    7e54:	7f 92       	push	r7
    7e56:	8f 92       	push	r8
    7e58:	9f 92       	push	r9
    7e5a:	af 92       	push	r10
    7e5c:	bf 92       	push	r11
    7e5e:	cf 92       	push	r12
    7e60:	df 92       	push	r13
    7e62:	ef 92       	push	r14
    7e64:	ff 92       	push	r15
    7e66:	0f 93       	push	r16
    7e68:	1f 93       	push	r17
    7e6a:	cf 93       	push	r28
    7e6c:	df 93       	push	r29
    7e6e:	cd b7       	in	r28, 0x3d	; 61
    7e70:	de b7       	in	r29, 0x3e	; 62
    7e72:	2b 97       	sbiw	r28, 0x0b	; 11
    7e74:	0f b6       	in	r0, 0x3f	; 63
    7e76:	f8 94       	cli
    7e78:	de bf       	out	0x3e, r29	; 62
    7e7a:	0f be       	out	0x3f, r0	; 63
    7e7c:	cd bf       	out	0x3d, r28	; 61
    7e7e:	6c 01       	movw	r12, r24
    7e80:	7b 01       	movw	r14, r22
    7e82:	8a 01       	movw	r16, r20
    7e84:	fc 01       	movw	r30, r24
    7e86:	17 82       	std	Z+7, r1	; 0x07
    7e88:	16 82       	std	Z+6, r1	; 0x06
    7e8a:	83 81       	ldd	r24, Z+3	; 0x03
    7e8c:	81 ff       	sbrs	r24, 1
    7e8e:	bf c1       	rjmp	.+894    	; 0x820e <vfprintf+0x3c4>
    7e90:	ce 01       	movw	r24, r28
    7e92:	01 96       	adiw	r24, 0x01	; 1
    7e94:	3c 01       	movw	r6, r24
    7e96:	f6 01       	movw	r30, r12
    7e98:	93 81       	ldd	r25, Z+3	; 0x03
    7e9a:	f7 01       	movw	r30, r14
    7e9c:	93 fd       	sbrc	r25, 3
    7e9e:	85 91       	lpm	r24, Z+
    7ea0:	93 ff       	sbrs	r25, 3
    7ea2:	81 91       	ld	r24, Z+
    7ea4:	7f 01       	movw	r14, r30
    7ea6:	88 23       	and	r24, r24
    7ea8:	09 f4       	brne	.+2      	; 0x7eac <vfprintf+0x62>
    7eaa:	ad c1       	rjmp	.+858    	; 0x8206 <vfprintf+0x3bc>
    7eac:	85 32       	cpi	r24, 0x25	; 37
    7eae:	39 f4       	brne	.+14     	; 0x7ebe <vfprintf+0x74>
    7eb0:	93 fd       	sbrc	r25, 3
    7eb2:	85 91       	lpm	r24, Z+
    7eb4:	93 ff       	sbrs	r25, 3
    7eb6:	81 91       	ld	r24, Z+
    7eb8:	7f 01       	movw	r14, r30
    7eba:	85 32       	cpi	r24, 0x25	; 37
    7ebc:	21 f4       	brne	.+8      	; 0x7ec6 <vfprintf+0x7c>
    7ebe:	b6 01       	movw	r22, r12
    7ec0:	90 e0       	ldi	r25, 0x00	; 0
    7ec2:	11 d3       	rcall	.+1570   	; 0x84e6 <fputc>
    7ec4:	e8 cf       	rjmp	.-48     	; 0x7e96 <vfprintf+0x4c>
    7ec6:	91 2c       	mov	r9, r1
    7ec8:	21 2c       	mov	r2, r1
    7eca:	31 2c       	mov	r3, r1
    7ecc:	ff e1       	ldi	r31, 0x1F	; 31
    7ece:	f3 15       	cp	r31, r3
    7ed0:	d8 f0       	brcs	.+54     	; 0x7f08 <vfprintf+0xbe>
    7ed2:	8b 32       	cpi	r24, 0x2B	; 43
    7ed4:	79 f0       	breq	.+30     	; 0x7ef4 <vfprintf+0xaa>
    7ed6:	38 f4       	brcc	.+14     	; 0x7ee6 <vfprintf+0x9c>
    7ed8:	80 32       	cpi	r24, 0x20	; 32
    7eda:	79 f0       	breq	.+30     	; 0x7efa <vfprintf+0xb0>
    7edc:	83 32       	cpi	r24, 0x23	; 35
    7ede:	a1 f4       	brne	.+40     	; 0x7f08 <vfprintf+0xbe>
    7ee0:	23 2d       	mov	r18, r3
    7ee2:	20 61       	ori	r18, 0x10	; 16
    7ee4:	1d c0       	rjmp	.+58     	; 0x7f20 <vfprintf+0xd6>
    7ee6:	8d 32       	cpi	r24, 0x2D	; 45
    7ee8:	61 f0       	breq	.+24     	; 0x7f02 <vfprintf+0xb8>
    7eea:	80 33       	cpi	r24, 0x30	; 48
    7eec:	69 f4       	brne	.+26     	; 0x7f08 <vfprintf+0xbe>
    7eee:	23 2d       	mov	r18, r3
    7ef0:	21 60       	ori	r18, 0x01	; 1
    7ef2:	16 c0       	rjmp	.+44     	; 0x7f20 <vfprintf+0xd6>
    7ef4:	83 2d       	mov	r24, r3
    7ef6:	82 60       	ori	r24, 0x02	; 2
    7ef8:	38 2e       	mov	r3, r24
    7efa:	e3 2d       	mov	r30, r3
    7efc:	e4 60       	ori	r30, 0x04	; 4
    7efe:	3e 2e       	mov	r3, r30
    7f00:	2a c0       	rjmp	.+84     	; 0x7f56 <vfprintf+0x10c>
    7f02:	f3 2d       	mov	r31, r3
    7f04:	f8 60       	ori	r31, 0x08	; 8
    7f06:	1d c0       	rjmp	.+58     	; 0x7f42 <vfprintf+0xf8>
    7f08:	37 fc       	sbrc	r3, 7
    7f0a:	2d c0       	rjmp	.+90     	; 0x7f66 <vfprintf+0x11c>
    7f0c:	20 ed       	ldi	r18, 0xD0	; 208
    7f0e:	28 0f       	add	r18, r24
    7f10:	2a 30       	cpi	r18, 0x0A	; 10
    7f12:	40 f0       	brcs	.+16     	; 0x7f24 <vfprintf+0xda>
    7f14:	8e 32       	cpi	r24, 0x2E	; 46
    7f16:	b9 f4       	brne	.+46     	; 0x7f46 <vfprintf+0xfc>
    7f18:	36 fc       	sbrc	r3, 6
    7f1a:	75 c1       	rjmp	.+746    	; 0x8206 <vfprintf+0x3bc>
    7f1c:	23 2d       	mov	r18, r3
    7f1e:	20 64       	ori	r18, 0x40	; 64
    7f20:	32 2e       	mov	r3, r18
    7f22:	19 c0       	rjmp	.+50     	; 0x7f56 <vfprintf+0x10c>
    7f24:	36 fe       	sbrs	r3, 6
    7f26:	06 c0       	rjmp	.+12     	; 0x7f34 <vfprintf+0xea>
    7f28:	8a e0       	ldi	r24, 0x0A	; 10
    7f2a:	98 9e       	mul	r9, r24
    7f2c:	20 0d       	add	r18, r0
    7f2e:	11 24       	eor	r1, r1
    7f30:	92 2e       	mov	r9, r18
    7f32:	11 c0       	rjmp	.+34     	; 0x7f56 <vfprintf+0x10c>
    7f34:	ea e0       	ldi	r30, 0x0A	; 10
    7f36:	2e 9e       	mul	r2, r30
    7f38:	20 0d       	add	r18, r0
    7f3a:	11 24       	eor	r1, r1
    7f3c:	22 2e       	mov	r2, r18
    7f3e:	f3 2d       	mov	r31, r3
    7f40:	f0 62       	ori	r31, 0x20	; 32
    7f42:	3f 2e       	mov	r3, r31
    7f44:	08 c0       	rjmp	.+16     	; 0x7f56 <vfprintf+0x10c>
    7f46:	8c 36       	cpi	r24, 0x6C	; 108
    7f48:	21 f4       	brne	.+8      	; 0x7f52 <vfprintf+0x108>
    7f4a:	83 2d       	mov	r24, r3
    7f4c:	80 68       	ori	r24, 0x80	; 128
    7f4e:	38 2e       	mov	r3, r24
    7f50:	02 c0       	rjmp	.+4      	; 0x7f56 <vfprintf+0x10c>
    7f52:	88 36       	cpi	r24, 0x68	; 104
    7f54:	41 f4       	brne	.+16     	; 0x7f66 <vfprintf+0x11c>
    7f56:	f7 01       	movw	r30, r14
    7f58:	93 fd       	sbrc	r25, 3
    7f5a:	85 91       	lpm	r24, Z+
    7f5c:	93 ff       	sbrs	r25, 3
    7f5e:	81 91       	ld	r24, Z+
    7f60:	7f 01       	movw	r14, r30
    7f62:	81 11       	cpse	r24, r1
    7f64:	b3 cf       	rjmp	.-154    	; 0x7ecc <vfprintf+0x82>
    7f66:	98 2f       	mov	r25, r24
    7f68:	9f 7d       	andi	r25, 0xDF	; 223
    7f6a:	95 54       	subi	r25, 0x45	; 69
    7f6c:	93 30       	cpi	r25, 0x03	; 3
    7f6e:	28 f4       	brcc	.+10     	; 0x7f7a <vfprintf+0x130>
    7f70:	0c 5f       	subi	r16, 0xFC	; 252
    7f72:	1f 4f       	sbci	r17, 0xFF	; 255
    7f74:	9f e3       	ldi	r25, 0x3F	; 63
    7f76:	99 83       	std	Y+1, r25	; 0x01
    7f78:	0d c0       	rjmp	.+26     	; 0x7f94 <vfprintf+0x14a>
    7f7a:	83 36       	cpi	r24, 0x63	; 99
    7f7c:	31 f0       	breq	.+12     	; 0x7f8a <vfprintf+0x140>
    7f7e:	83 37       	cpi	r24, 0x73	; 115
    7f80:	71 f0       	breq	.+28     	; 0x7f9e <vfprintf+0x154>
    7f82:	83 35       	cpi	r24, 0x53	; 83
    7f84:	09 f0       	breq	.+2      	; 0x7f88 <vfprintf+0x13e>
    7f86:	55 c0       	rjmp	.+170    	; 0x8032 <vfprintf+0x1e8>
    7f88:	20 c0       	rjmp	.+64     	; 0x7fca <vfprintf+0x180>
    7f8a:	f8 01       	movw	r30, r16
    7f8c:	80 81       	ld	r24, Z
    7f8e:	89 83       	std	Y+1, r24	; 0x01
    7f90:	0e 5f       	subi	r16, 0xFE	; 254
    7f92:	1f 4f       	sbci	r17, 0xFF	; 255
    7f94:	88 24       	eor	r8, r8
    7f96:	83 94       	inc	r8
    7f98:	91 2c       	mov	r9, r1
    7f9a:	53 01       	movw	r10, r6
    7f9c:	12 c0       	rjmp	.+36     	; 0x7fc2 <vfprintf+0x178>
    7f9e:	28 01       	movw	r4, r16
    7fa0:	f2 e0       	ldi	r31, 0x02	; 2
    7fa2:	4f 0e       	add	r4, r31
    7fa4:	51 1c       	adc	r5, r1
    7fa6:	f8 01       	movw	r30, r16
    7fa8:	a0 80       	ld	r10, Z
    7faa:	b1 80       	ldd	r11, Z+1	; 0x01
    7fac:	36 fe       	sbrs	r3, 6
    7fae:	03 c0       	rjmp	.+6      	; 0x7fb6 <vfprintf+0x16c>
    7fb0:	69 2d       	mov	r22, r9
    7fb2:	70 e0       	ldi	r23, 0x00	; 0
    7fb4:	02 c0       	rjmp	.+4      	; 0x7fba <vfprintf+0x170>
    7fb6:	6f ef       	ldi	r22, 0xFF	; 255
    7fb8:	7f ef       	ldi	r23, 0xFF	; 255
    7fba:	c5 01       	movw	r24, r10
    7fbc:	89 d2       	rcall	.+1298   	; 0x84d0 <strnlen>
    7fbe:	4c 01       	movw	r8, r24
    7fc0:	82 01       	movw	r16, r4
    7fc2:	f3 2d       	mov	r31, r3
    7fc4:	ff 77       	andi	r31, 0x7F	; 127
    7fc6:	3f 2e       	mov	r3, r31
    7fc8:	15 c0       	rjmp	.+42     	; 0x7ff4 <vfprintf+0x1aa>
    7fca:	28 01       	movw	r4, r16
    7fcc:	22 e0       	ldi	r18, 0x02	; 2
    7fce:	42 0e       	add	r4, r18
    7fd0:	51 1c       	adc	r5, r1
    7fd2:	f8 01       	movw	r30, r16
    7fd4:	a0 80       	ld	r10, Z
    7fd6:	b1 80       	ldd	r11, Z+1	; 0x01
    7fd8:	36 fe       	sbrs	r3, 6
    7fda:	03 c0       	rjmp	.+6      	; 0x7fe2 <vfprintf+0x198>
    7fdc:	69 2d       	mov	r22, r9
    7fde:	70 e0       	ldi	r23, 0x00	; 0
    7fe0:	02 c0       	rjmp	.+4      	; 0x7fe6 <vfprintf+0x19c>
    7fe2:	6f ef       	ldi	r22, 0xFF	; 255
    7fe4:	7f ef       	ldi	r23, 0xFF	; 255
    7fe6:	c5 01       	movw	r24, r10
    7fe8:	68 d2       	rcall	.+1232   	; 0x84ba <strnlen_P>
    7fea:	4c 01       	movw	r8, r24
    7fec:	f3 2d       	mov	r31, r3
    7fee:	f0 68       	ori	r31, 0x80	; 128
    7ff0:	3f 2e       	mov	r3, r31
    7ff2:	82 01       	movw	r16, r4
    7ff4:	33 fc       	sbrc	r3, 3
    7ff6:	19 c0       	rjmp	.+50     	; 0x802a <vfprintf+0x1e0>
    7ff8:	82 2d       	mov	r24, r2
    7ffa:	90 e0       	ldi	r25, 0x00	; 0
    7ffc:	88 16       	cp	r8, r24
    7ffe:	99 06       	cpc	r9, r25
    8000:	a0 f4       	brcc	.+40     	; 0x802a <vfprintf+0x1e0>
    8002:	b6 01       	movw	r22, r12
    8004:	80 e2       	ldi	r24, 0x20	; 32
    8006:	90 e0       	ldi	r25, 0x00	; 0
    8008:	6e d2       	rcall	.+1244   	; 0x84e6 <fputc>
    800a:	2a 94       	dec	r2
    800c:	f5 cf       	rjmp	.-22     	; 0x7ff8 <vfprintf+0x1ae>
    800e:	f5 01       	movw	r30, r10
    8010:	37 fc       	sbrc	r3, 7
    8012:	85 91       	lpm	r24, Z+
    8014:	37 fe       	sbrs	r3, 7
    8016:	81 91       	ld	r24, Z+
    8018:	5f 01       	movw	r10, r30
    801a:	b6 01       	movw	r22, r12
    801c:	90 e0       	ldi	r25, 0x00	; 0
    801e:	63 d2       	rcall	.+1222   	; 0x84e6 <fputc>
    8020:	21 10       	cpse	r2, r1
    8022:	2a 94       	dec	r2
    8024:	21 e0       	ldi	r18, 0x01	; 1
    8026:	82 1a       	sub	r8, r18
    8028:	91 08       	sbc	r9, r1
    802a:	81 14       	cp	r8, r1
    802c:	91 04       	cpc	r9, r1
    802e:	79 f7       	brne	.-34     	; 0x800e <vfprintf+0x1c4>
    8030:	e1 c0       	rjmp	.+450    	; 0x81f4 <vfprintf+0x3aa>
    8032:	84 36       	cpi	r24, 0x64	; 100
    8034:	11 f0       	breq	.+4      	; 0x803a <vfprintf+0x1f0>
    8036:	89 36       	cpi	r24, 0x69	; 105
    8038:	39 f5       	brne	.+78     	; 0x8088 <vfprintf+0x23e>
    803a:	f8 01       	movw	r30, r16
    803c:	37 fe       	sbrs	r3, 7
    803e:	07 c0       	rjmp	.+14     	; 0x804e <vfprintf+0x204>
    8040:	60 81       	ld	r22, Z
    8042:	71 81       	ldd	r23, Z+1	; 0x01
    8044:	82 81       	ldd	r24, Z+2	; 0x02
    8046:	93 81       	ldd	r25, Z+3	; 0x03
    8048:	0c 5f       	subi	r16, 0xFC	; 252
    804a:	1f 4f       	sbci	r17, 0xFF	; 255
    804c:	08 c0       	rjmp	.+16     	; 0x805e <vfprintf+0x214>
    804e:	60 81       	ld	r22, Z
    8050:	71 81       	ldd	r23, Z+1	; 0x01
    8052:	07 2e       	mov	r0, r23
    8054:	00 0c       	add	r0, r0
    8056:	88 0b       	sbc	r24, r24
    8058:	99 0b       	sbc	r25, r25
    805a:	0e 5f       	subi	r16, 0xFE	; 254
    805c:	1f 4f       	sbci	r17, 0xFF	; 255
    805e:	f3 2d       	mov	r31, r3
    8060:	ff 76       	andi	r31, 0x6F	; 111
    8062:	3f 2e       	mov	r3, r31
    8064:	97 ff       	sbrs	r25, 7
    8066:	09 c0       	rjmp	.+18     	; 0x807a <vfprintf+0x230>
    8068:	90 95       	com	r25
    806a:	80 95       	com	r24
    806c:	70 95       	com	r23
    806e:	61 95       	neg	r22
    8070:	7f 4f       	sbci	r23, 0xFF	; 255
    8072:	8f 4f       	sbci	r24, 0xFF	; 255
    8074:	9f 4f       	sbci	r25, 0xFF	; 255
    8076:	f0 68       	ori	r31, 0x80	; 128
    8078:	3f 2e       	mov	r3, r31
    807a:	2a e0       	ldi	r18, 0x0A	; 10
    807c:	30 e0       	ldi	r19, 0x00	; 0
    807e:	a3 01       	movw	r20, r6
    8080:	6e d2       	rcall	.+1244   	; 0x855e <__ultoa_invert>
    8082:	88 2e       	mov	r8, r24
    8084:	86 18       	sub	r8, r6
    8086:	44 c0       	rjmp	.+136    	; 0x8110 <vfprintf+0x2c6>
    8088:	85 37       	cpi	r24, 0x75	; 117
    808a:	31 f4       	brne	.+12     	; 0x8098 <vfprintf+0x24e>
    808c:	23 2d       	mov	r18, r3
    808e:	2f 7e       	andi	r18, 0xEF	; 239
    8090:	b2 2e       	mov	r11, r18
    8092:	2a e0       	ldi	r18, 0x0A	; 10
    8094:	30 e0       	ldi	r19, 0x00	; 0
    8096:	25 c0       	rjmp	.+74     	; 0x80e2 <vfprintf+0x298>
    8098:	93 2d       	mov	r25, r3
    809a:	99 7f       	andi	r25, 0xF9	; 249
    809c:	b9 2e       	mov	r11, r25
    809e:	8f 36       	cpi	r24, 0x6F	; 111
    80a0:	c1 f0       	breq	.+48     	; 0x80d2 <vfprintf+0x288>
    80a2:	18 f4       	brcc	.+6      	; 0x80aa <vfprintf+0x260>
    80a4:	88 35       	cpi	r24, 0x58	; 88
    80a6:	79 f0       	breq	.+30     	; 0x80c6 <vfprintf+0x27c>
    80a8:	ae c0       	rjmp	.+348    	; 0x8206 <vfprintf+0x3bc>
    80aa:	80 37       	cpi	r24, 0x70	; 112
    80ac:	19 f0       	breq	.+6      	; 0x80b4 <vfprintf+0x26a>
    80ae:	88 37       	cpi	r24, 0x78	; 120
    80b0:	21 f0       	breq	.+8      	; 0x80ba <vfprintf+0x270>
    80b2:	a9 c0       	rjmp	.+338    	; 0x8206 <vfprintf+0x3bc>
    80b4:	e9 2f       	mov	r30, r25
    80b6:	e0 61       	ori	r30, 0x10	; 16
    80b8:	be 2e       	mov	r11, r30
    80ba:	b4 fe       	sbrs	r11, 4
    80bc:	0d c0       	rjmp	.+26     	; 0x80d8 <vfprintf+0x28e>
    80be:	fb 2d       	mov	r31, r11
    80c0:	f4 60       	ori	r31, 0x04	; 4
    80c2:	bf 2e       	mov	r11, r31
    80c4:	09 c0       	rjmp	.+18     	; 0x80d8 <vfprintf+0x28e>
    80c6:	34 fe       	sbrs	r3, 4
    80c8:	0a c0       	rjmp	.+20     	; 0x80de <vfprintf+0x294>
    80ca:	29 2f       	mov	r18, r25
    80cc:	26 60       	ori	r18, 0x06	; 6
    80ce:	b2 2e       	mov	r11, r18
    80d0:	06 c0       	rjmp	.+12     	; 0x80de <vfprintf+0x294>
    80d2:	28 e0       	ldi	r18, 0x08	; 8
    80d4:	30 e0       	ldi	r19, 0x00	; 0
    80d6:	05 c0       	rjmp	.+10     	; 0x80e2 <vfprintf+0x298>
    80d8:	20 e1       	ldi	r18, 0x10	; 16
    80da:	30 e0       	ldi	r19, 0x00	; 0
    80dc:	02 c0       	rjmp	.+4      	; 0x80e2 <vfprintf+0x298>
    80de:	20 e1       	ldi	r18, 0x10	; 16
    80e0:	32 e0       	ldi	r19, 0x02	; 2
    80e2:	f8 01       	movw	r30, r16
    80e4:	b7 fe       	sbrs	r11, 7
    80e6:	07 c0       	rjmp	.+14     	; 0x80f6 <vfprintf+0x2ac>
    80e8:	60 81       	ld	r22, Z
    80ea:	71 81       	ldd	r23, Z+1	; 0x01
    80ec:	82 81       	ldd	r24, Z+2	; 0x02
    80ee:	93 81       	ldd	r25, Z+3	; 0x03
    80f0:	0c 5f       	subi	r16, 0xFC	; 252
    80f2:	1f 4f       	sbci	r17, 0xFF	; 255
    80f4:	06 c0       	rjmp	.+12     	; 0x8102 <vfprintf+0x2b8>
    80f6:	60 81       	ld	r22, Z
    80f8:	71 81       	ldd	r23, Z+1	; 0x01
    80fa:	80 e0       	ldi	r24, 0x00	; 0
    80fc:	90 e0       	ldi	r25, 0x00	; 0
    80fe:	0e 5f       	subi	r16, 0xFE	; 254
    8100:	1f 4f       	sbci	r17, 0xFF	; 255
    8102:	a3 01       	movw	r20, r6
    8104:	2c d2       	rcall	.+1112   	; 0x855e <__ultoa_invert>
    8106:	88 2e       	mov	r8, r24
    8108:	86 18       	sub	r8, r6
    810a:	fb 2d       	mov	r31, r11
    810c:	ff 77       	andi	r31, 0x7F	; 127
    810e:	3f 2e       	mov	r3, r31
    8110:	36 fe       	sbrs	r3, 6
    8112:	0d c0       	rjmp	.+26     	; 0x812e <vfprintf+0x2e4>
    8114:	23 2d       	mov	r18, r3
    8116:	2e 7f       	andi	r18, 0xFE	; 254
    8118:	a2 2e       	mov	r10, r18
    811a:	89 14       	cp	r8, r9
    811c:	58 f4       	brcc	.+22     	; 0x8134 <vfprintf+0x2ea>
    811e:	34 fe       	sbrs	r3, 4
    8120:	0b c0       	rjmp	.+22     	; 0x8138 <vfprintf+0x2ee>
    8122:	32 fc       	sbrc	r3, 2
    8124:	09 c0       	rjmp	.+18     	; 0x8138 <vfprintf+0x2ee>
    8126:	83 2d       	mov	r24, r3
    8128:	8e 7e       	andi	r24, 0xEE	; 238
    812a:	a8 2e       	mov	r10, r24
    812c:	05 c0       	rjmp	.+10     	; 0x8138 <vfprintf+0x2ee>
    812e:	b8 2c       	mov	r11, r8
    8130:	a3 2c       	mov	r10, r3
    8132:	03 c0       	rjmp	.+6      	; 0x813a <vfprintf+0x2f0>
    8134:	b8 2c       	mov	r11, r8
    8136:	01 c0       	rjmp	.+2      	; 0x813a <vfprintf+0x2f0>
    8138:	b9 2c       	mov	r11, r9
    813a:	a4 fe       	sbrs	r10, 4
    813c:	0f c0       	rjmp	.+30     	; 0x815c <vfprintf+0x312>
    813e:	fe 01       	movw	r30, r28
    8140:	e8 0d       	add	r30, r8
    8142:	f1 1d       	adc	r31, r1
    8144:	80 81       	ld	r24, Z
    8146:	80 33       	cpi	r24, 0x30	; 48
    8148:	21 f4       	brne	.+8      	; 0x8152 <vfprintf+0x308>
    814a:	9a 2d       	mov	r25, r10
    814c:	99 7e       	andi	r25, 0xE9	; 233
    814e:	a9 2e       	mov	r10, r25
    8150:	09 c0       	rjmp	.+18     	; 0x8164 <vfprintf+0x31a>
    8152:	a2 fe       	sbrs	r10, 2
    8154:	06 c0       	rjmp	.+12     	; 0x8162 <vfprintf+0x318>
    8156:	b3 94       	inc	r11
    8158:	b3 94       	inc	r11
    815a:	04 c0       	rjmp	.+8      	; 0x8164 <vfprintf+0x31a>
    815c:	8a 2d       	mov	r24, r10
    815e:	86 78       	andi	r24, 0x86	; 134
    8160:	09 f0       	breq	.+2      	; 0x8164 <vfprintf+0x31a>
    8162:	b3 94       	inc	r11
    8164:	a3 fc       	sbrc	r10, 3
    8166:	10 c0       	rjmp	.+32     	; 0x8188 <vfprintf+0x33e>
    8168:	a0 fe       	sbrs	r10, 0
    816a:	06 c0       	rjmp	.+12     	; 0x8178 <vfprintf+0x32e>
    816c:	b2 14       	cp	r11, r2
    816e:	80 f4       	brcc	.+32     	; 0x8190 <vfprintf+0x346>
    8170:	28 0c       	add	r2, r8
    8172:	92 2c       	mov	r9, r2
    8174:	9b 18       	sub	r9, r11
    8176:	0d c0       	rjmp	.+26     	; 0x8192 <vfprintf+0x348>
    8178:	b2 14       	cp	r11, r2
    817a:	58 f4       	brcc	.+22     	; 0x8192 <vfprintf+0x348>
    817c:	b6 01       	movw	r22, r12
    817e:	80 e2       	ldi	r24, 0x20	; 32
    8180:	90 e0       	ldi	r25, 0x00	; 0
    8182:	b1 d1       	rcall	.+866    	; 0x84e6 <fputc>
    8184:	b3 94       	inc	r11
    8186:	f8 cf       	rjmp	.-16     	; 0x8178 <vfprintf+0x32e>
    8188:	b2 14       	cp	r11, r2
    818a:	18 f4       	brcc	.+6      	; 0x8192 <vfprintf+0x348>
    818c:	2b 18       	sub	r2, r11
    818e:	02 c0       	rjmp	.+4      	; 0x8194 <vfprintf+0x34a>
    8190:	98 2c       	mov	r9, r8
    8192:	21 2c       	mov	r2, r1
    8194:	a4 fe       	sbrs	r10, 4
    8196:	0f c0       	rjmp	.+30     	; 0x81b6 <vfprintf+0x36c>
    8198:	b6 01       	movw	r22, r12
    819a:	80 e3       	ldi	r24, 0x30	; 48
    819c:	90 e0       	ldi	r25, 0x00	; 0
    819e:	a3 d1       	rcall	.+838    	; 0x84e6 <fputc>
    81a0:	a2 fe       	sbrs	r10, 2
    81a2:	16 c0       	rjmp	.+44     	; 0x81d0 <vfprintf+0x386>
    81a4:	a1 fc       	sbrc	r10, 1
    81a6:	03 c0       	rjmp	.+6      	; 0x81ae <vfprintf+0x364>
    81a8:	88 e7       	ldi	r24, 0x78	; 120
    81aa:	90 e0       	ldi	r25, 0x00	; 0
    81ac:	02 c0       	rjmp	.+4      	; 0x81b2 <vfprintf+0x368>
    81ae:	88 e5       	ldi	r24, 0x58	; 88
    81b0:	90 e0       	ldi	r25, 0x00	; 0
    81b2:	b6 01       	movw	r22, r12
    81b4:	0c c0       	rjmp	.+24     	; 0x81ce <vfprintf+0x384>
    81b6:	8a 2d       	mov	r24, r10
    81b8:	86 78       	andi	r24, 0x86	; 134
    81ba:	51 f0       	breq	.+20     	; 0x81d0 <vfprintf+0x386>
    81bc:	a1 fe       	sbrs	r10, 1
    81be:	02 c0       	rjmp	.+4      	; 0x81c4 <vfprintf+0x37a>
    81c0:	8b e2       	ldi	r24, 0x2B	; 43
    81c2:	01 c0       	rjmp	.+2      	; 0x81c6 <vfprintf+0x37c>
    81c4:	80 e2       	ldi	r24, 0x20	; 32
    81c6:	a7 fc       	sbrc	r10, 7
    81c8:	8d e2       	ldi	r24, 0x2D	; 45
    81ca:	b6 01       	movw	r22, r12
    81cc:	90 e0       	ldi	r25, 0x00	; 0
    81ce:	8b d1       	rcall	.+790    	; 0x84e6 <fputc>
    81d0:	89 14       	cp	r8, r9
    81d2:	30 f4       	brcc	.+12     	; 0x81e0 <vfprintf+0x396>
    81d4:	b6 01       	movw	r22, r12
    81d6:	80 e3       	ldi	r24, 0x30	; 48
    81d8:	90 e0       	ldi	r25, 0x00	; 0
    81da:	85 d1       	rcall	.+778    	; 0x84e6 <fputc>
    81dc:	9a 94       	dec	r9
    81de:	f8 cf       	rjmp	.-16     	; 0x81d0 <vfprintf+0x386>
    81e0:	8a 94       	dec	r8
    81e2:	f3 01       	movw	r30, r6
    81e4:	e8 0d       	add	r30, r8
    81e6:	f1 1d       	adc	r31, r1
    81e8:	80 81       	ld	r24, Z
    81ea:	b6 01       	movw	r22, r12
    81ec:	90 e0       	ldi	r25, 0x00	; 0
    81ee:	7b d1       	rcall	.+758    	; 0x84e6 <fputc>
    81f0:	81 10       	cpse	r8, r1
    81f2:	f6 cf       	rjmp	.-20     	; 0x81e0 <vfprintf+0x396>
    81f4:	22 20       	and	r2, r2
    81f6:	09 f4       	brne	.+2      	; 0x81fa <vfprintf+0x3b0>
    81f8:	4e ce       	rjmp	.-868    	; 0x7e96 <vfprintf+0x4c>
    81fa:	b6 01       	movw	r22, r12
    81fc:	80 e2       	ldi	r24, 0x20	; 32
    81fe:	90 e0       	ldi	r25, 0x00	; 0
    8200:	72 d1       	rcall	.+740    	; 0x84e6 <fputc>
    8202:	2a 94       	dec	r2
    8204:	f7 cf       	rjmp	.-18     	; 0x81f4 <vfprintf+0x3aa>
    8206:	f6 01       	movw	r30, r12
    8208:	86 81       	ldd	r24, Z+6	; 0x06
    820a:	97 81       	ldd	r25, Z+7	; 0x07
    820c:	02 c0       	rjmp	.+4      	; 0x8212 <vfprintf+0x3c8>
    820e:	8f ef       	ldi	r24, 0xFF	; 255
    8210:	9f ef       	ldi	r25, 0xFF	; 255
    8212:	2b 96       	adiw	r28, 0x0b	; 11
    8214:	0f b6       	in	r0, 0x3f	; 63
    8216:	f8 94       	cli
    8218:	de bf       	out	0x3e, r29	; 62
    821a:	0f be       	out	0x3f, r0	; 63
    821c:	cd bf       	out	0x3d, r28	; 61
    821e:	df 91       	pop	r29
    8220:	cf 91       	pop	r28
    8222:	1f 91       	pop	r17
    8224:	0f 91       	pop	r16
    8226:	ff 90       	pop	r15
    8228:	ef 90       	pop	r14
    822a:	df 90       	pop	r13
    822c:	cf 90       	pop	r12
    822e:	bf 90       	pop	r11
    8230:	af 90       	pop	r10
    8232:	9f 90       	pop	r9
    8234:	8f 90       	pop	r8
    8236:	7f 90       	pop	r7
    8238:	6f 90       	pop	r6
    823a:	5f 90       	pop	r5
    823c:	4f 90       	pop	r4
    823e:	3f 90       	pop	r3
    8240:	2f 90       	pop	r2
    8242:	08 95       	ret

00008244 <calloc>:
    8244:	0f 93       	push	r16
    8246:	1f 93       	push	r17
    8248:	cf 93       	push	r28
    824a:	df 93       	push	r29
    824c:	86 9f       	mul	r24, r22
    824e:	80 01       	movw	r16, r0
    8250:	87 9f       	mul	r24, r23
    8252:	10 0d       	add	r17, r0
    8254:	96 9f       	mul	r25, r22
    8256:	10 0d       	add	r17, r0
    8258:	11 24       	eor	r1, r1
    825a:	c8 01       	movw	r24, r16
    825c:	0d d0       	rcall	.+26     	; 0x8278 <malloc>
    825e:	ec 01       	movw	r28, r24
    8260:	00 97       	sbiw	r24, 0x00	; 0
    8262:	21 f0       	breq	.+8      	; 0x826c <calloc+0x28>
    8264:	a8 01       	movw	r20, r16
    8266:	60 e0       	ldi	r22, 0x00	; 0
    8268:	70 e0       	ldi	r23, 0x00	; 0
    826a:	56 dd       	rcall	.-1364   	; 0x7d18 <memset>
    826c:	ce 01       	movw	r24, r28
    826e:	df 91       	pop	r29
    8270:	cf 91       	pop	r28
    8272:	1f 91       	pop	r17
    8274:	0f 91       	pop	r16
    8276:	08 95       	ret

00008278 <malloc>:
    8278:	0f 93       	push	r16
    827a:	1f 93       	push	r17
    827c:	cf 93       	push	r28
    827e:	df 93       	push	r29
    8280:	82 30       	cpi	r24, 0x02	; 2
    8282:	91 05       	cpc	r25, r1
    8284:	10 f4       	brcc	.+4      	; 0x828a <malloc+0x12>
    8286:	82 e0       	ldi	r24, 0x02	; 2
    8288:	90 e0       	ldi	r25, 0x00	; 0
    828a:	e0 91 02 09 	lds	r30, 0x0902	; 0x800902 <__flp>
    828e:	f0 91 03 09 	lds	r31, 0x0903	; 0x800903 <__flp+0x1>
    8292:	20 e0       	ldi	r18, 0x00	; 0
    8294:	30 e0       	ldi	r19, 0x00	; 0
    8296:	a0 e0       	ldi	r26, 0x00	; 0
    8298:	b0 e0       	ldi	r27, 0x00	; 0
    829a:	30 97       	sbiw	r30, 0x00	; 0
    829c:	19 f1       	breq	.+70     	; 0x82e4 <malloc+0x6c>
    829e:	40 81       	ld	r20, Z
    82a0:	51 81       	ldd	r21, Z+1	; 0x01
    82a2:	02 81       	ldd	r16, Z+2	; 0x02
    82a4:	13 81       	ldd	r17, Z+3	; 0x03
    82a6:	48 17       	cp	r20, r24
    82a8:	59 07       	cpc	r21, r25
    82aa:	c8 f0       	brcs	.+50     	; 0x82de <malloc+0x66>
    82ac:	84 17       	cp	r24, r20
    82ae:	95 07       	cpc	r25, r21
    82b0:	69 f4       	brne	.+26     	; 0x82cc <malloc+0x54>
    82b2:	10 97       	sbiw	r26, 0x00	; 0
    82b4:	31 f0       	breq	.+12     	; 0x82c2 <malloc+0x4a>
    82b6:	12 96       	adiw	r26, 0x02	; 2
    82b8:	0c 93       	st	X, r16
    82ba:	12 97       	sbiw	r26, 0x02	; 2
    82bc:	13 96       	adiw	r26, 0x03	; 3
    82be:	1c 93       	st	X, r17
    82c0:	27 c0       	rjmp	.+78     	; 0x8310 <malloc+0x98>
    82c2:	00 93 02 09 	sts	0x0902, r16	; 0x800902 <__flp>
    82c6:	10 93 03 09 	sts	0x0903, r17	; 0x800903 <__flp+0x1>
    82ca:	22 c0       	rjmp	.+68     	; 0x8310 <malloc+0x98>
    82cc:	21 15       	cp	r18, r1
    82ce:	31 05       	cpc	r19, r1
    82d0:	19 f0       	breq	.+6      	; 0x82d8 <malloc+0x60>
    82d2:	42 17       	cp	r20, r18
    82d4:	53 07       	cpc	r21, r19
    82d6:	18 f4       	brcc	.+6      	; 0x82de <malloc+0x66>
    82d8:	9a 01       	movw	r18, r20
    82da:	bd 01       	movw	r22, r26
    82dc:	ef 01       	movw	r28, r30
    82de:	df 01       	movw	r26, r30
    82e0:	f8 01       	movw	r30, r16
    82e2:	db cf       	rjmp	.-74     	; 0x829a <malloc+0x22>
    82e4:	21 15       	cp	r18, r1
    82e6:	31 05       	cpc	r19, r1
    82e8:	f9 f0       	breq	.+62     	; 0x8328 <malloc+0xb0>
    82ea:	28 1b       	sub	r18, r24
    82ec:	39 0b       	sbc	r19, r25
    82ee:	24 30       	cpi	r18, 0x04	; 4
    82f0:	31 05       	cpc	r19, r1
    82f2:	80 f4       	brcc	.+32     	; 0x8314 <malloc+0x9c>
    82f4:	8a 81       	ldd	r24, Y+2	; 0x02
    82f6:	9b 81       	ldd	r25, Y+3	; 0x03
    82f8:	61 15       	cp	r22, r1
    82fa:	71 05       	cpc	r23, r1
    82fc:	21 f0       	breq	.+8      	; 0x8306 <malloc+0x8e>
    82fe:	fb 01       	movw	r30, r22
    8300:	93 83       	std	Z+3, r25	; 0x03
    8302:	82 83       	std	Z+2, r24	; 0x02
    8304:	04 c0       	rjmp	.+8      	; 0x830e <malloc+0x96>
    8306:	90 93 03 09 	sts	0x0903, r25	; 0x800903 <__flp+0x1>
    830a:	80 93 02 09 	sts	0x0902, r24	; 0x800902 <__flp>
    830e:	fe 01       	movw	r30, r28
    8310:	32 96       	adiw	r30, 0x02	; 2
    8312:	44 c0       	rjmp	.+136    	; 0x839c <malloc+0x124>
    8314:	fe 01       	movw	r30, r28
    8316:	e2 0f       	add	r30, r18
    8318:	f3 1f       	adc	r31, r19
    831a:	81 93       	st	Z+, r24
    831c:	91 93       	st	Z+, r25
    831e:	22 50       	subi	r18, 0x02	; 2
    8320:	31 09       	sbc	r19, r1
    8322:	39 83       	std	Y+1, r19	; 0x01
    8324:	28 83       	st	Y, r18
    8326:	3a c0       	rjmp	.+116    	; 0x839c <malloc+0x124>
    8328:	20 91 00 09 	lds	r18, 0x0900	; 0x800900 <__brkval>
    832c:	30 91 01 09 	lds	r19, 0x0901	; 0x800901 <__brkval+0x1>
    8330:	23 2b       	or	r18, r19
    8332:	41 f4       	brne	.+16     	; 0x8344 <malloc+0xcc>
    8334:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__malloc_heap_start>
    8338:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__malloc_heap_start+0x1>
    833c:	30 93 01 09 	sts	0x0901, r19	; 0x800901 <__brkval+0x1>
    8340:	20 93 00 09 	sts	0x0900, r18	; 0x800900 <__brkval>
    8344:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_end>
    8348:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_end+0x1>
    834c:	21 15       	cp	r18, r1
    834e:	31 05       	cpc	r19, r1
    8350:	41 f4       	brne	.+16     	; 0x8362 <malloc+0xea>
    8352:	2d b7       	in	r18, 0x3d	; 61
    8354:	3e b7       	in	r19, 0x3e	; 62
    8356:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__malloc_margin>
    835a:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__malloc_margin+0x1>
    835e:	24 1b       	sub	r18, r20
    8360:	35 0b       	sbc	r19, r21
    8362:	e0 91 00 09 	lds	r30, 0x0900	; 0x800900 <__brkval>
    8366:	f0 91 01 09 	lds	r31, 0x0901	; 0x800901 <__brkval+0x1>
    836a:	e2 17       	cp	r30, r18
    836c:	f3 07       	cpc	r31, r19
    836e:	a0 f4       	brcc	.+40     	; 0x8398 <malloc+0x120>
    8370:	2e 1b       	sub	r18, r30
    8372:	3f 0b       	sbc	r19, r31
    8374:	28 17       	cp	r18, r24
    8376:	39 07       	cpc	r19, r25
    8378:	78 f0       	brcs	.+30     	; 0x8398 <malloc+0x120>
    837a:	ac 01       	movw	r20, r24
    837c:	4e 5f       	subi	r20, 0xFE	; 254
    837e:	5f 4f       	sbci	r21, 0xFF	; 255
    8380:	24 17       	cp	r18, r20
    8382:	35 07       	cpc	r19, r21
    8384:	48 f0       	brcs	.+18     	; 0x8398 <malloc+0x120>
    8386:	4e 0f       	add	r20, r30
    8388:	5f 1f       	adc	r21, r31
    838a:	50 93 01 09 	sts	0x0901, r21	; 0x800901 <__brkval+0x1>
    838e:	40 93 00 09 	sts	0x0900, r20	; 0x800900 <__brkval>
    8392:	81 93       	st	Z+, r24
    8394:	91 93       	st	Z+, r25
    8396:	02 c0       	rjmp	.+4      	; 0x839c <malloc+0x124>
    8398:	e0 e0       	ldi	r30, 0x00	; 0
    839a:	f0 e0       	ldi	r31, 0x00	; 0
    839c:	cf 01       	movw	r24, r30
    839e:	df 91       	pop	r29
    83a0:	cf 91       	pop	r28
    83a2:	1f 91       	pop	r17
    83a4:	0f 91       	pop	r16
    83a6:	08 95       	ret

000083a8 <free>:
    83a8:	cf 93       	push	r28
    83aa:	df 93       	push	r29
    83ac:	00 97       	sbiw	r24, 0x00	; 0
    83ae:	09 f4       	brne	.+2      	; 0x83b2 <free+0xa>
    83b0:	81 c0       	rjmp	.+258    	; 0x84b4 <free+0x10c>
    83b2:	fc 01       	movw	r30, r24
    83b4:	32 97       	sbiw	r30, 0x02	; 2
    83b6:	13 82       	std	Z+3, r1	; 0x03
    83b8:	12 82       	std	Z+2, r1	; 0x02
    83ba:	a0 91 02 09 	lds	r26, 0x0902	; 0x800902 <__flp>
    83be:	b0 91 03 09 	lds	r27, 0x0903	; 0x800903 <__flp+0x1>
    83c2:	10 97       	sbiw	r26, 0x00	; 0
    83c4:	81 f4       	brne	.+32     	; 0x83e6 <free+0x3e>
    83c6:	20 81       	ld	r18, Z
    83c8:	31 81       	ldd	r19, Z+1	; 0x01
    83ca:	82 0f       	add	r24, r18
    83cc:	93 1f       	adc	r25, r19
    83ce:	20 91 00 09 	lds	r18, 0x0900	; 0x800900 <__brkval>
    83d2:	30 91 01 09 	lds	r19, 0x0901	; 0x800901 <__brkval+0x1>
    83d6:	28 17       	cp	r18, r24
    83d8:	39 07       	cpc	r19, r25
    83da:	51 f5       	brne	.+84     	; 0x8430 <free+0x88>
    83dc:	f0 93 01 09 	sts	0x0901, r31	; 0x800901 <__brkval+0x1>
    83e0:	e0 93 00 09 	sts	0x0900, r30	; 0x800900 <__brkval>
    83e4:	67 c0       	rjmp	.+206    	; 0x84b4 <free+0x10c>
    83e6:	ed 01       	movw	r28, r26
    83e8:	20 e0       	ldi	r18, 0x00	; 0
    83ea:	30 e0       	ldi	r19, 0x00	; 0
    83ec:	ce 17       	cp	r28, r30
    83ee:	df 07       	cpc	r29, r31
    83f0:	40 f4       	brcc	.+16     	; 0x8402 <free+0x5a>
    83f2:	4a 81       	ldd	r20, Y+2	; 0x02
    83f4:	5b 81       	ldd	r21, Y+3	; 0x03
    83f6:	9e 01       	movw	r18, r28
    83f8:	41 15       	cp	r20, r1
    83fa:	51 05       	cpc	r21, r1
    83fc:	f1 f0       	breq	.+60     	; 0x843a <free+0x92>
    83fe:	ea 01       	movw	r28, r20
    8400:	f5 cf       	rjmp	.-22     	; 0x83ec <free+0x44>
    8402:	d3 83       	std	Z+3, r29	; 0x03
    8404:	c2 83       	std	Z+2, r28	; 0x02
    8406:	40 81       	ld	r20, Z
    8408:	51 81       	ldd	r21, Z+1	; 0x01
    840a:	84 0f       	add	r24, r20
    840c:	95 1f       	adc	r25, r21
    840e:	c8 17       	cp	r28, r24
    8410:	d9 07       	cpc	r29, r25
    8412:	59 f4       	brne	.+22     	; 0x842a <free+0x82>
    8414:	88 81       	ld	r24, Y
    8416:	99 81       	ldd	r25, Y+1	; 0x01
    8418:	84 0f       	add	r24, r20
    841a:	95 1f       	adc	r25, r21
    841c:	02 96       	adiw	r24, 0x02	; 2
    841e:	91 83       	std	Z+1, r25	; 0x01
    8420:	80 83       	st	Z, r24
    8422:	8a 81       	ldd	r24, Y+2	; 0x02
    8424:	9b 81       	ldd	r25, Y+3	; 0x03
    8426:	93 83       	std	Z+3, r25	; 0x03
    8428:	82 83       	std	Z+2, r24	; 0x02
    842a:	21 15       	cp	r18, r1
    842c:	31 05       	cpc	r19, r1
    842e:	29 f4       	brne	.+10     	; 0x843a <free+0x92>
    8430:	f0 93 03 09 	sts	0x0903, r31	; 0x800903 <__flp+0x1>
    8434:	e0 93 02 09 	sts	0x0902, r30	; 0x800902 <__flp>
    8438:	3d c0       	rjmp	.+122    	; 0x84b4 <free+0x10c>
    843a:	e9 01       	movw	r28, r18
    843c:	fb 83       	std	Y+3, r31	; 0x03
    843e:	ea 83       	std	Y+2, r30	; 0x02
    8440:	49 91       	ld	r20, Y+
    8442:	59 91       	ld	r21, Y+
    8444:	c4 0f       	add	r28, r20
    8446:	d5 1f       	adc	r29, r21
    8448:	ec 17       	cp	r30, r28
    844a:	fd 07       	cpc	r31, r29
    844c:	61 f4       	brne	.+24     	; 0x8466 <free+0xbe>
    844e:	80 81       	ld	r24, Z
    8450:	91 81       	ldd	r25, Z+1	; 0x01
    8452:	84 0f       	add	r24, r20
    8454:	95 1f       	adc	r25, r21
    8456:	02 96       	adiw	r24, 0x02	; 2
    8458:	e9 01       	movw	r28, r18
    845a:	99 83       	std	Y+1, r25	; 0x01
    845c:	88 83       	st	Y, r24
    845e:	82 81       	ldd	r24, Z+2	; 0x02
    8460:	93 81       	ldd	r25, Z+3	; 0x03
    8462:	9b 83       	std	Y+3, r25	; 0x03
    8464:	8a 83       	std	Y+2, r24	; 0x02
    8466:	e0 e0       	ldi	r30, 0x00	; 0
    8468:	f0 e0       	ldi	r31, 0x00	; 0
    846a:	12 96       	adiw	r26, 0x02	; 2
    846c:	8d 91       	ld	r24, X+
    846e:	9c 91       	ld	r25, X
    8470:	13 97       	sbiw	r26, 0x03	; 3
    8472:	00 97       	sbiw	r24, 0x00	; 0
    8474:	19 f0       	breq	.+6      	; 0x847c <free+0xd4>
    8476:	fd 01       	movw	r30, r26
    8478:	dc 01       	movw	r26, r24
    847a:	f7 cf       	rjmp	.-18     	; 0x846a <free+0xc2>
    847c:	8d 91       	ld	r24, X+
    847e:	9c 91       	ld	r25, X
    8480:	11 97       	sbiw	r26, 0x01	; 1
    8482:	9d 01       	movw	r18, r26
    8484:	2e 5f       	subi	r18, 0xFE	; 254
    8486:	3f 4f       	sbci	r19, 0xFF	; 255
    8488:	82 0f       	add	r24, r18
    848a:	93 1f       	adc	r25, r19
    848c:	20 91 00 09 	lds	r18, 0x0900	; 0x800900 <__brkval>
    8490:	30 91 01 09 	lds	r19, 0x0901	; 0x800901 <__brkval+0x1>
    8494:	28 17       	cp	r18, r24
    8496:	39 07       	cpc	r19, r25
    8498:	69 f4       	brne	.+26     	; 0x84b4 <free+0x10c>
    849a:	30 97       	sbiw	r30, 0x00	; 0
    849c:	29 f4       	brne	.+10     	; 0x84a8 <free+0x100>
    849e:	10 92 03 09 	sts	0x0903, r1	; 0x800903 <__flp+0x1>
    84a2:	10 92 02 09 	sts	0x0902, r1	; 0x800902 <__flp>
    84a6:	02 c0       	rjmp	.+4      	; 0x84ac <free+0x104>
    84a8:	13 82       	std	Z+3, r1	; 0x03
    84aa:	12 82       	std	Z+2, r1	; 0x02
    84ac:	b0 93 01 09 	sts	0x0901, r27	; 0x800901 <__brkval+0x1>
    84b0:	a0 93 00 09 	sts	0x0900, r26	; 0x800900 <__brkval>
    84b4:	df 91       	pop	r29
    84b6:	cf 91       	pop	r28
    84b8:	08 95       	ret

000084ba <strnlen_P>:
    84ba:	fc 01       	movw	r30, r24
    84bc:	05 90       	lpm	r0, Z+
    84be:	61 50       	subi	r22, 0x01	; 1
    84c0:	70 40       	sbci	r23, 0x00	; 0
    84c2:	01 10       	cpse	r0, r1
    84c4:	d8 f7       	brcc	.-10     	; 0x84bc <strnlen_P+0x2>
    84c6:	80 95       	com	r24
    84c8:	90 95       	com	r25
    84ca:	8e 0f       	add	r24, r30
    84cc:	9f 1f       	adc	r25, r31
    84ce:	08 95       	ret

000084d0 <strnlen>:
    84d0:	fc 01       	movw	r30, r24
    84d2:	61 50       	subi	r22, 0x01	; 1
    84d4:	70 40       	sbci	r23, 0x00	; 0
    84d6:	01 90       	ld	r0, Z+
    84d8:	01 10       	cpse	r0, r1
    84da:	d8 f7       	brcc	.-10     	; 0x84d2 <strnlen+0x2>
    84dc:	80 95       	com	r24
    84de:	90 95       	com	r25
    84e0:	8e 0f       	add	r24, r30
    84e2:	9f 1f       	adc	r25, r31
    84e4:	08 95       	ret

000084e6 <fputc>:
    84e6:	0f 93       	push	r16
    84e8:	1f 93       	push	r17
    84ea:	cf 93       	push	r28
    84ec:	df 93       	push	r29
    84ee:	fb 01       	movw	r30, r22
    84f0:	23 81       	ldd	r18, Z+3	; 0x03
    84f2:	21 fd       	sbrc	r18, 1
    84f4:	03 c0       	rjmp	.+6      	; 0x84fc <fputc+0x16>
    84f6:	8f ef       	ldi	r24, 0xFF	; 255
    84f8:	9f ef       	ldi	r25, 0xFF	; 255
    84fa:	2c c0       	rjmp	.+88     	; 0x8554 <fputc+0x6e>
    84fc:	22 ff       	sbrs	r18, 2
    84fe:	16 c0       	rjmp	.+44     	; 0x852c <fputc+0x46>
    8500:	46 81       	ldd	r20, Z+6	; 0x06
    8502:	57 81       	ldd	r21, Z+7	; 0x07
    8504:	24 81       	ldd	r18, Z+4	; 0x04
    8506:	35 81       	ldd	r19, Z+5	; 0x05
    8508:	42 17       	cp	r20, r18
    850a:	53 07       	cpc	r21, r19
    850c:	44 f4       	brge	.+16     	; 0x851e <fputc+0x38>
    850e:	a0 81       	ld	r26, Z
    8510:	b1 81       	ldd	r27, Z+1	; 0x01
    8512:	9d 01       	movw	r18, r26
    8514:	2f 5f       	subi	r18, 0xFF	; 255
    8516:	3f 4f       	sbci	r19, 0xFF	; 255
    8518:	31 83       	std	Z+1, r19	; 0x01
    851a:	20 83       	st	Z, r18
    851c:	8c 93       	st	X, r24
    851e:	26 81       	ldd	r18, Z+6	; 0x06
    8520:	37 81       	ldd	r19, Z+7	; 0x07
    8522:	2f 5f       	subi	r18, 0xFF	; 255
    8524:	3f 4f       	sbci	r19, 0xFF	; 255
    8526:	37 83       	std	Z+7, r19	; 0x07
    8528:	26 83       	std	Z+6, r18	; 0x06
    852a:	14 c0       	rjmp	.+40     	; 0x8554 <fputc+0x6e>
    852c:	8b 01       	movw	r16, r22
    852e:	ec 01       	movw	r28, r24
    8530:	fb 01       	movw	r30, r22
    8532:	00 84       	ldd	r0, Z+8	; 0x08
    8534:	f1 85       	ldd	r31, Z+9	; 0x09
    8536:	e0 2d       	mov	r30, r0
    8538:	09 95       	icall
    853a:	89 2b       	or	r24, r25
    853c:	e1 f6       	brne	.-72     	; 0x84f6 <fputc+0x10>
    853e:	d8 01       	movw	r26, r16
    8540:	16 96       	adiw	r26, 0x06	; 6
    8542:	8d 91       	ld	r24, X+
    8544:	9c 91       	ld	r25, X
    8546:	17 97       	sbiw	r26, 0x07	; 7
    8548:	01 96       	adiw	r24, 0x01	; 1
    854a:	17 96       	adiw	r26, 0x07	; 7
    854c:	9c 93       	st	X, r25
    854e:	8e 93       	st	-X, r24
    8550:	16 97       	sbiw	r26, 0x06	; 6
    8552:	ce 01       	movw	r24, r28
    8554:	df 91       	pop	r29
    8556:	cf 91       	pop	r28
    8558:	1f 91       	pop	r17
    855a:	0f 91       	pop	r16
    855c:	08 95       	ret

0000855e <__ultoa_invert>:
    855e:	fa 01       	movw	r30, r20
    8560:	aa 27       	eor	r26, r26
    8562:	28 30       	cpi	r18, 0x08	; 8
    8564:	51 f1       	breq	.+84     	; 0x85ba <__ultoa_invert+0x5c>
    8566:	20 31       	cpi	r18, 0x10	; 16
    8568:	81 f1       	breq	.+96     	; 0x85ca <__ultoa_invert+0x6c>
    856a:	e8 94       	clt
    856c:	6f 93       	push	r22
    856e:	6e 7f       	andi	r22, 0xFE	; 254
    8570:	6e 5f       	subi	r22, 0xFE	; 254
    8572:	7f 4f       	sbci	r23, 0xFF	; 255
    8574:	8f 4f       	sbci	r24, 0xFF	; 255
    8576:	9f 4f       	sbci	r25, 0xFF	; 255
    8578:	af 4f       	sbci	r26, 0xFF	; 255
    857a:	b1 e0       	ldi	r27, 0x01	; 1
    857c:	3e d0       	rcall	.+124    	; 0x85fa <__ultoa_invert+0x9c>
    857e:	b4 e0       	ldi	r27, 0x04	; 4
    8580:	3c d0       	rcall	.+120    	; 0x85fa <__ultoa_invert+0x9c>
    8582:	67 0f       	add	r22, r23
    8584:	78 1f       	adc	r23, r24
    8586:	89 1f       	adc	r24, r25
    8588:	9a 1f       	adc	r25, r26
    858a:	a1 1d       	adc	r26, r1
    858c:	68 0f       	add	r22, r24
    858e:	79 1f       	adc	r23, r25
    8590:	8a 1f       	adc	r24, r26
    8592:	91 1d       	adc	r25, r1
    8594:	a1 1d       	adc	r26, r1
    8596:	6a 0f       	add	r22, r26
    8598:	71 1d       	adc	r23, r1
    859a:	81 1d       	adc	r24, r1
    859c:	91 1d       	adc	r25, r1
    859e:	a1 1d       	adc	r26, r1
    85a0:	20 d0       	rcall	.+64     	; 0x85e2 <__ultoa_invert+0x84>
    85a2:	09 f4       	brne	.+2      	; 0x85a6 <__ultoa_invert+0x48>
    85a4:	68 94       	set
    85a6:	3f 91       	pop	r19
    85a8:	2a e0       	ldi	r18, 0x0A	; 10
    85aa:	26 9f       	mul	r18, r22
    85ac:	11 24       	eor	r1, r1
    85ae:	30 19       	sub	r19, r0
    85b0:	30 5d       	subi	r19, 0xD0	; 208
    85b2:	31 93       	st	Z+, r19
    85b4:	de f6       	brtc	.-74     	; 0x856c <__ultoa_invert+0xe>
    85b6:	cf 01       	movw	r24, r30
    85b8:	08 95       	ret
    85ba:	46 2f       	mov	r20, r22
    85bc:	47 70       	andi	r20, 0x07	; 7
    85be:	40 5d       	subi	r20, 0xD0	; 208
    85c0:	41 93       	st	Z+, r20
    85c2:	b3 e0       	ldi	r27, 0x03	; 3
    85c4:	0f d0       	rcall	.+30     	; 0x85e4 <__ultoa_invert+0x86>
    85c6:	c9 f7       	brne	.-14     	; 0x85ba <__ultoa_invert+0x5c>
    85c8:	f6 cf       	rjmp	.-20     	; 0x85b6 <__ultoa_invert+0x58>
    85ca:	46 2f       	mov	r20, r22
    85cc:	4f 70       	andi	r20, 0x0F	; 15
    85ce:	40 5d       	subi	r20, 0xD0	; 208
    85d0:	4a 33       	cpi	r20, 0x3A	; 58
    85d2:	18 f0       	brcs	.+6      	; 0x85da <__ultoa_invert+0x7c>
    85d4:	49 5d       	subi	r20, 0xD9	; 217
    85d6:	31 fd       	sbrc	r19, 1
    85d8:	40 52       	subi	r20, 0x20	; 32
    85da:	41 93       	st	Z+, r20
    85dc:	02 d0       	rcall	.+4      	; 0x85e2 <__ultoa_invert+0x84>
    85de:	a9 f7       	brne	.-22     	; 0x85ca <__ultoa_invert+0x6c>
    85e0:	ea cf       	rjmp	.-44     	; 0x85b6 <__ultoa_invert+0x58>
    85e2:	b4 e0       	ldi	r27, 0x04	; 4
    85e4:	a6 95       	lsr	r26
    85e6:	97 95       	ror	r25
    85e8:	87 95       	ror	r24
    85ea:	77 95       	ror	r23
    85ec:	67 95       	ror	r22
    85ee:	ba 95       	dec	r27
    85f0:	c9 f7       	brne	.-14     	; 0x85e4 <__ultoa_invert+0x86>
    85f2:	00 97       	sbiw	r24, 0x00	; 0
    85f4:	61 05       	cpc	r22, r1
    85f6:	71 05       	cpc	r23, r1
    85f8:	08 95       	ret
    85fa:	9b 01       	movw	r18, r22
    85fc:	ac 01       	movw	r20, r24
    85fe:	0a 2e       	mov	r0, r26
    8600:	06 94       	lsr	r0
    8602:	57 95       	ror	r21
    8604:	47 95       	ror	r20
    8606:	37 95       	ror	r19
    8608:	27 95       	ror	r18
    860a:	ba 95       	dec	r27
    860c:	c9 f7       	brne	.-14     	; 0x8600 <__ultoa_invert+0xa2>
    860e:	62 0f       	add	r22, r18
    8610:	73 1f       	adc	r23, r19
    8612:	84 1f       	adc	r24, r20
    8614:	95 1f       	adc	r25, r21
    8616:	a0 1d       	adc	r26, r0
    8618:	08 95       	ret

0000861a <__divmodsi4>:
    861a:	05 2e       	mov	r0, r21
    861c:	97 fb       	bst	r25, 7
    861e:	16 f4       	brtc	.+4      	; 0x8624 <__divmodsi4+0xa>
    8620:	00 94       	com	r0
    8622:	0f d0       	rcall	.+30     	; 0x8642 <__negsi2>
    8624:	57 fd       	sbrc	r21, 7
    8626:	05 d0       	rcall	.+10     	; 0x8632 <__divmodsi4_neg2>
    8628:	72 da       	rcall	.-2844   	; 0x7b0e <__udivmodsi4>
    862a:	07 fc       	sbrc	r0, 7
    862c:	02 d0       	rcall	.+4      	; 0x8632 <__divmodsi4_neg2>
    862e:	46 f4       	brtc	.+16     	; 0x8640 <__divmodsi4_exit>
    8630:	08 c0       	rjmp	.+16     	; 0x8642 <__negsi2>

00008632 <__divmodsi4_neg2>:
    8632:	50 95       	com	r21
    8634:	40 95       	com	r20
    8636:	30 95       	com	r19
    8638:	21 95       	neg	r18
    863a:	3f 4f       	sbci	r19, 0xFF	; 255
    863c:	4f 4f       	sbci	r20, 0xFF	; 255
    863e:	5f 4f       	sbci	r21, 0xFF	; 255

00008640 <__divmodsi4_exit>:
    8640:	08 95       	ret

00008642 <__negsi2>:
    8642:	90 95       	com	r25
    8644:	80 95       	com	r24
    8646:	70 95       	com	r23
    8648:	61 95       	neg	r22
    864a:	7f 4f       	sbci	r23, 0xFF	; 255
    864c:	8f 4f       	sbci	r24, 0xFF	; 255
    864e:	9f 4f       	sbci	r25, 0xFF	; 255
    8650:	08 95       	ret

00008652 <__mulshisi3>:
    8652:	b7 ff       	sbrs	r27, 7
    8654:	7e ca       	rjmp	.-2820   	; 0x7b52 <__muluhisi3>

00008656 <__mulohisi3>:
    8656:	7d da       	rcall	.-2822   	; 0x7b52 <__muluhisi3>
    8658:	82 1b       	sub	r24, r18
    865a:	93 0b       	sbc	r25, r19
    865c:	08 95       	ret

0000865e <_exit>:
    865e:	f8 94       	cli

00008660 <__stop_program>:
    8660:	ff cf       	rjmp	.-2      	; 0x8660 <__stop_program>
